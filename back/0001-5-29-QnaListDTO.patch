From b0af4b088cd9ec36d6d73c4e4f8460f7d7977f3a Mon Sep 17 00:00:00 2001
From: JAVCKICHAN <iluvderry@gmail.com>
Date: Thu, 29 May 2025 16:12:33 +0900
Subject: [PATCH] =?UTF-8?q?5/29=20QnaListDTO=EC=95=88=20=EC=98=AC=EB=9D=BC?=
 =?UTF-8?q?=EA=B0=80=EB=8A=94=20=EB=AC=B8=EC=A0=9C?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 back/bin/main/application.yml                 |   3 +
 .../reports/problems/problems-report.html     |   2 +-
 .../controller/CustomErrorController.java     |  39 ++
 .../admin/AdminAuctionController.java         |   4 -
 .../controller/admin/AdminController.java     |  66 ---
 .../admin/AdminProductController.java         |   4 -
 .../admin/AdminSellerApprovalController.java  |  82 ---
 .../controller/admin/StatController.java      | 344 -------------
 .../controller/auction/AuctionController.java | 185 -------
 .../controller/auction/BidController.java     | 103 ----
 .../controller/auth/RefreshController.java    |  83 ----
 .../controller/customer/MemberController.java |  26 +-
 .../controller/customer/QnaController.java    |  14 +-
 .../controller/order/OrderController.java     | 129 -----
 .../controller/product/ProductController.java |  76 ---
 .../public_api/LoginController.java           |  25 +-
 .../public_api/ProductViewController.java     |  15 +
 .../controller/review/ReviewController.java   |  81 ---
 .../seller/OrderDeliveryController.java       |  61 ---
 .../controller/seller/SellerController.java   | 113 -----
 .../seller/SellerQnaController.java           |  41 --
 .../dto/customer/member/MemberJoinDTO.java    |  21 +-
 .../dto/customer/member/MemberLoginDTO.java   |   7 +
 .../dto/customer/member/MemberModifyDTO.java  |  11 +-
 .../customer/qna/CustomerQnaRequestDTO.java   |   9 +
 .../com/realive/dto/error/ErrorResponse.java  |   5 +
 .../exception/DuplicateEmailException.java    |  10 +
 .../exception/GlobalExceptionHandler.java     |  54 +-
 .../order/OrderDeliveryRepository.java        |  18 -
 .../repository/order/OrderItemRepository.java |  18 -
 .../repository/order/OrderRepository.java     |  19 -
 .../order/SellerOrderDeliveryRepository.java  |  22 -
 .../order/SellerOrderRepository.java          |  31 --
 .../seller/SellerDocumentRepository.java      |  24 -
 .../seller/SellerQnaRepository.java           |  21 -
 .../repository/seller/SellerRepository.java   |  19 -
 .../realive/security/AdminDetailsService.java |  24 -
 .../AdminJwtAuthenticationFilter.java         |  64 ---
 .../com/realive/security/AdminPrincipal.java  |  47 --
 .../security/JwtAuthenticationFilter.java     |  71 ---
 .../java/com/realive/security/JwtUtil.java    | 138 ------
 .../realive/service/admin/AdminService.java   |  17 -
 .../service/admin/AdminServiceImpl.java       |  96 ----
 .../admin/approval/SellerApprovalService.java |  34 --
 .../service/admin/auction/AuctionService.java |  52 --
 .../service/admin/auction/BidService.java     |  41 --
 .../service/admin/logs/StatService.java       |  43 --
 .../service/admin/logs/StatServiceImpl.java   | 356 -------------
 .../service/customer/CustomerQnaService.java  |  13 +-
 .../service/customer/CustomerService.java     |   5 +-
 .../service/customer/MemberService.java       |  15 +-
 .../customer/ProductViewServiceImpl.java      |   3 +-
 .../service/customer/WishlistService.java     |   6 +-
 .../service/order/OrderDeliveryService.java   |  31 --
 .../realive/service/order/OrderService.java   |  25 -
 .../service/order/OrderServiceImpl.java       | 467 ------------------
 .../service/order/SellerOrderService.java     |   0
 .../service/product/ProductService.java       |  49 --
 .../review/crud/ReviewCRUDService.java        |  11 -
 .../review/crud/ReviewCRUDServiceImpl.java    | 158 ------
 .../review/view/ReviewViewService.java        |  19 -
 .../review/view/ReviewViewServiceImpl.java    |  73 ---
 .../service/seller/SellerQnaService.java      |  24 -
 .../realive/service/seller/SellerService.java |  88 ----
 .../approval/SellerApprovalServiceImpl.java   | 122 -----
 .../admin/auction/AuctionServiceImpl.java     | 197 --------
 .../admin/auction/BidServiceImpl.java         | 142 ------
 .../order/OrderDeliveryServiceImpl.java       | 132 -----
 .../product/ProductServiceImpl.java           | 303 ------------
 .../seller/SellerQnaServiceImpl.java          |  61 ---
 .../serviceimpl/seller/SellerServiceImpl.java | 178 -------
 .../java/com/realive/util/ImageUploader.java  |   8 -
 .../realive/util/LocalDiskImageUploader.java  |  57 ---
 back/src/main/resources/application.yml       |   3 +
 .../java/com/realive/login/LoginTests.java    |  64 ---
 .../com/realive/product/ProductRepoTests.java |  92 ----
 .../AdminSellerApprovalControllerTest.java    | 260 ----------
 .../com/realive/realive/AdminSignupTest.java  |  29 --
 .../realive/AuctionControllerTest.java        | 218 --------
 .../realive/RealiveApplicationTests.java      |  16 -
 .../realive/realive/StatControllerTest.java   | 307 ------------
 .../com/realive/review/ReviewRepoTests.java   |  66 ---
 82 files changed, 216 insertions(+), 5794 deletions(-)
 create mode 100644 back/src/main/java/com/realive/controller/CustomErrorController.java
 delete mode 100644 back/src/main/java/com/realive/controller/admin/AdminAuctionController.java
 delete mode 100644 back/src/main/java/com/realive/controller/admin/AdminController.java
 delete mode 100644 back/src/main/java/com/realive/controller/admin/AdminProductController.java
 delete mode 100644 back/src/main/java/com/realive/controller/admin/AdminSellerApprovalController.java
 delete mode 100644 back/src/main/java/com/realive/controller/admin/StatController.java
 delete mode 100644 back/src/main/java/com/realive/controller/auction/AuctionController.java
 delete mode 100644 back/src/main/java/com/realive/controller/auction/BidController.java
 delete mode 100644 back/src/main/java/com/realive/controller/auth/RefreshController.java
 delete mode 100644 back/src/main/java/com/realive/controller/order/OrderController.java
 delete mode 100644 back/src/main/java/com/realive/controller/product/ProductController.java
 delete mode 100644 back/src/main/java/com/realive/controller/review/ReviewController.java
 delete mode 100644 back/src/main/java/com/realive/controller/seller/OrderDeliveryController.java
 delete mode 100644 back/src/main/java/com/realive/controller/seller/SellerController.java
 delete mode 100644 back/src/main/java/com/realive/controller/seller/SellerQnaController.java
 create mode 100644 back/src/main/java/com/realive/exception/DuplicateEmailException.java
 delete mode 100644 back/src/main/java/com/realive/repository/order/OrderDeliveryRepository.java
 delete mode 100644 back/src/main/java/com/realive/repository/order/OrderItemRepository.java
 delete mode 100644 back/src/main/java/com/realive/repository/order/OrderRepository.java
 delete mode 100644 back/src/main/java/com/realive/repository/order/SellerOrderDeliveryRepository.java
 delete mode 100644 back/src/main/java/com/realive/repository/order/SellerOrderRepository.java
 delete mode 100644 back/src/main/java/com/realive/repository/seller/SellerDocumentRepository.java
 delete mode 100644 back/src/main/java/com/realive/repository/seller/SellerQnaRepository.java
 delete mode 100644 back/src/main/java/com/realive/repository/seller/SellerRepository.java
 delete mode 100644 back/src/main/java/com/realive/security/AdminDetailsService.java
 delete mode 100644 back/src/main/java/com/realive/security/AdminJwtAuthenticationFilter.java
 delete mode 100644 back/src/main/java/com/realive/security/AdminPrincipal.java
 delete mode 100644 back/src/main/java/com/realive/security/JwtAuthenticationFilter.java
 delete mode 100644 back/src/main/java/com/realive/security/JwtUtil.java
 delete mode 100644 back/src/main/java/com/realive/service/admin/AdminService.java
 delete mode 100644 back/src/main/java/com/realive/service/admin/AdminServiceImpl.java
 delete mode 100644 back/src/main/java/com/realive/service/admin/approval/SellerApprovalService.java
 delete mode 100644 back/src/main/java/com/realive/service/admin/auction/AuctionService.java
 delete mode 100644 back/src/main/java/com/realive/service/admin/auction/BidService.java
 delete mode 100644 back/src/main/java/com/realive/service/admin/logs/StatService.java
 delete mode 100644 back/src/main/java/com/realive/service/admin/logs/StatServiceImpl.java
 delete mode 100644 back/src/main/java/com/realive/service/order/OrderDeliveryService.java
 delete mode 100644 back/src/main/java/com/realive/service/order/OrderService.java
 delete mode 100644 back/src/main/java/com/realive/service/order/OrderServiceImpl.java
 delete mode 100644 back/src/main/java/com/realive/service/order/SellerOrderService.java
 delete mode 100644 back/src/main/java/com/realive/service/product/ProductService.java
 delete mode 100644 back/src/main/java/com/realive/service/review/crud/ReviewCRUDService.java
 delete mode 100644 back/src/main/java/com/realive/service/review/crud/ReviewCRUDServiceImpl.java
 delete mode 100644 back/src/main/java/com/realive/service/review/view/ReviewViewService.java
 delete mode 100644 back/src/main/java/com/realive/service/review/view/ReviewViewServiceImpl.java
 delete mode 100644 back/src/main/java/com/realive/service/seller/SellerQnaService.java
 delete mode 100644 back/src/main/java/com/realive/service/seller/SellerService.java
 delete mode 100644 back/src/main/java/com/realive/serviceimpl/admin/approval/SellerApprovalServiceImpl.java
 delete mode 100644 back/src/main/java/com/realive/serviceimpl/admin/auction/AuctionServiceImpl.java
 delete mode 100644 back/src/main/java/com/realive/serviceimpl/admin/auction/BidServiceImpl.java
 delete mode 100644 back/src/main/java/com/realive/serviceimpl/order/OrderDeliveryServiceImpl.java
 delete mode 100644 back/src/main/java/com/realive/serviceimpl/product/ProductServiceImpl.java
 delete mode 100644 back/src/main/java/com/realive/serviceimpl/seller/SellerQnaServiceImpl.java
 delete mode 100644 back/src/main/java/com/realive/serviceimpl/seller/SellerServiceImpl.java
 delete mode 100644 back/src/main/java/com/realive/util/ImageUploader.java
 delete mode 100644 back/src/main/java/com/realive/util/LocalDiskImageUploader.java
 delete mode 100644 back/src/test/java/com/realive/login/LoginTests.java
 delete mode 100644 back/src/test/java/com/realive/product/ProductRepoTests.java
 delete mode 100644 back/src/test/java/com/realive/realive/AdminSellerApprovalControllerTest.java
 delete mode 100644 back/src/test/java/com/realive/realive/AdminSignupTest.java
 delete mode 100644 back/src/test/java/com/realive/realive/AuctionControllerTest.java
 delete mode 100644 back/src/test/java/com/realive/realive/RealiveApplicationTests.java
 delete mode 100644 back/src/test/java/com/realive/realive/StatControllerTest.java
 delete mode 100644 back/src/test/java/com/realive/review/ReviewRepoTests.java

diff --git a/back/bin/main/application.yml b/back/bin/main/application.yml
index 025ccfc7..016d2264 100644
--- a/back/bin/main/application.yml
+++ b/back/bin/main/application.yml
@@ -3,6 +3,9 @@ server:
   port: 8080
   servlet:
     context-path:
+  error:
+    whitelabel:
+      enabled: false
 
 spring:
   config:
diff --git a/back/build/reports/problems/problems-report.html b/back/build/reports/problems/problems-report.html
index 866dda64..7f777cf7 100644
--- a/back/build/reports/problems/problems-report.html
+++ b/back/build/reports/problems/problems-report.html
@@ -650,7 +650,7 @@ code + .copy-button {
 <script type="text/javascript">
 function configurationCacheProblems() { return (
 // begin-report-data
-{"diagnostics":[{"locations":[{"path":"build file 'C:\\Realive\\back\\build.gradle'","line":90}],"problem":[{"text":"The CompileOptions.annotationProcessorGeneratedSourcesDirectory property has been deprecated."}],"severity":"WARNING","problemDetails":[{"text":"This is scheduled to be removed in Gradle 9.0."}],"contextualLabel":"The CompileOptions.annotationProcessorGeneratedSourcesDirectory property has been deprecated.","documentationLink":"https://docs.gradle.org/8.13/dsl/org.gradle.api.tasks.compile.CompileOptions.html#org.gradle.api.tasks.compile.CompileOptions:annotationProcessorGeneratedSourcesDirectory","problemId":[{"name":"deprecation","displayName":"Deprecation"},{"name":"the-compileoptions-annotationprocessorgeneratedsourcesdirectory-property-has-been-deprecated","displayName":"The CompileOptions.annotationProcessorGeneratedSourcesDirectory property has been deprecated."}],"solutions":[[{"text":"Please use the generatedSourceOutputDirectory property instead."}]]},{"locations":[{"path":"C:\\Realive\\back\\src\\main\\java\\com\\realive\\domain\\product\\ProductImage.java","line":36,"column":21,"length":20},{"taskPath":":compileJava"}],"problem":[{"text":"Java compilation warning"}],"severity":"WARNING","problemDetails":[{"text":"C:\\Realive\\back\\src\\main\\java\\com\\realive\\domain\\product\\ProductImage.java:36: warning: @Builder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.\n    private boolean isThumbnail = false;\n                    ^"}],"contextualLabel":"@Builder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.","problemId":[{"name":"java","displayName":"Java compilation"},{"name":"compilation","displayName":"Compilation"},{"name":"compiler-warn-proc-messager","displayName":"Java compilation warning"}]},{"locations":[{"path":"C:\\Realive\\back\\src\\main\\java\\com\\realive\\domain\\seller\\Seller.java","line":51,"column":21,"length":19},{"taskPath":":compileJava"}],"problem":[{"text":"Java compilation warning"}],"severity":"WARNING","problemDetails":[{"text":"C:\\Realive\\back\\src\\main\\java\\com\\realive\\domain\\seller\\Seller.java:51: warning: @Builder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.\n    private boolean isApproved = false;\n                    ^"}],"contextualLabel":"@Builder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.","problemId":[{"name":"java","displayName":"Java compilation"},{"name":"compilation","displayName":"Compilation"},{"name":"compiler-warn-proc-messager","displayName":"Java compilation warning"}]},{"locations":[{"path":"C:\\Realive\\back\\src\\main\\java\\com\\realive\\domain\\seller\\Seller.java","line":59,"column":21,"length":16},{"taskPath":":compileJava"}],"problem":[{"text":"Java compilation warning"}],"severity":"WARNING","problemDetails":[{"text":"C:\\Realive\\back\\src\\main\\java\\com\\realive\\domain\\seller\\Seller.java:59: warning: @Builder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.\n    private boolean isActive = true;\n                    ^"}],"contextualLabel":"@Builder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.","problemId":[{"name":"java","displayName":"Java compilation"},{"name":"compilation","displayName":"Compilation"},{"name":"compiler-warn-proc-messager","displayName":"Java compilation warning"}]},{"locations":[{"path":"C:\\Realive\\back\\src\\main\\java\\com\\realive\\domain\\seller\\SellerQna.java","line":49,"column":21,"length":19},{"taskPath":":compileJava"}],"problem":[{"text":"Java compilation warning"}],"severity":"WARNING","problemDetails":[{"text":"C:\\Realive\\back\\src\\main\\java\\com\\realive\\domain\\seller\\SellerQna.java:49: warning: @Builder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.\n    private boolean isAnswered = false;\n                    ^"}],"contextualLabel":"@Builder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.","problemId":[{"name":"java","displayName":"Java compilation"},{"name":"compilation","displayName":"Compilation"},{"name":"compiler-warn-proc-messager","displayName":"Java compilation warning"}]},{"locations":[{"path":"C:\\Realive\\back\\src\\main\\java\\com\\realive\\domain\\seller\\SellerQna.java","line":56,"column":21,"length":16},{"taskPath":":compileJava"}],"problem":[{"text":"Java compilation warning"}],"severity":"WARNING","problemDetails":[{"text":"C:\\Realive\\back\\src\\main\\java\\com\\realive\\domain\\seller\\SellerQna.java:56: warning: @Builder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.\n    private boolean isActive = true;\n                    ^"}],"contextualLabel":"@Builder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.","problemId":[{"name":"java","displayName":"Java compilation"},{"name":"compilation","displayName":"Compilation"},{"name":"compiler-warn-proc-messager","displayName":"Java compilation warning"}]},{"locations":[{"path":"C:\\Realive\\back\\src\\main\\java\\com\\realive\\domain\\customer\\CartItem.java","line":47,"column":21,"length":13},{"taskPath":":compileJava"}],"problem":[{"text":"Java compilation warning"}],"severity":"WARNING","problemDetails":[{"text":"C:\\Realive\\back\\src\\main\\java\\com\\realive\\domain\\customer\\CartItem.java:47: warning: @Builder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.\n    private Integer quantity = 1;\n                    ^"}],"contextualLabel":"@Builder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.","problemId":[{"name":"java","displayName":"Java compilation"},{"name":"compilation","displayName":"Compilation"},{"name":"compiler-warn-proc-messager","displayName":"Java compilation warning"}]},{"locations":[{"path":"C:\\Realive\\back\\src\\main\\java\\com\\realive\\dto\\page\\PageRequestDTO.java","line":23,"column":17,"length":9},{"taskPath":":compileJava"}],"problem":[{"text":"Java compilation warning"}],"severity":"WARNING","problemDetails":[{"text":"C:\\Realive\\back\\src\\main\\java\\com\\realive\\dto\\page\\PageRequestDTO.java:23: warning: @Builder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.\n    private int page = 1;               // 요청한 페이지 번호 (1부터 시작, 내부 로직에서는 0-based로 변환됨)\n                ^"}],"contextualLabel":"@Builder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.","problemId":[{"name":"java","displayName":"Java compilation"},{"name":"compilation","displayName":"Compilation"},{"name":"compiler-warn-proc-messager","displayName":"Java compilation warning"}]},{"locations":[{"path":"C:\\Realive\\back\\src\\main\\java\\com\\realive\\dto\\page\\PageRequestDTO.java","line":24,"column":17,"length":10},{"taskPath":":compileJava"}],"problem":[{"text":"Java compilation warning"}],"severity":"WARNING","problemDetails":[{"text":"C:\\Realive\\back\\src\\main\\java\\com\\realive\\dto\\page\\PageRequestDTO.java:24: warning: @Builder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.\n    private int size = 10;              // 페이지당 데이터 개수 (기본값: 10)\n                ^"}],"contextualLabel":"@Builder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.","problemId":[{"name":"java","displayName":"Java compilation"},{"name":"compilation","displayName":"Compilation"},{"name":"compiler-warn-proc-messager","displayName":"Java compilation warning"}]},{"locations":[{"path":"C:\\Realive\\back\\src\\main\\java\\com\\realive\\dto\\page\\PageRequestDTO.java","line":25,"column":20,"length":19},{"taskPath":":compileJava"}],"problem":[{"text":"Java compilation warning"}],"severity":"WARNING","problemDetails":[{"text":"C:\\Realive\\back\\src\\main\\java\\com\\realive\\dto\\page\\PageRequestDTO.java:25: warning: @Builder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.\n    private String sort = \"createdAt\";  // 정렬 기준 필드명 (기본값: createdAt)\n                   ^"}],"contextualLabel":"@Builder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.","problemId":[{"name":"java","displayName":"Java compilation"},{"name":"compilation","displayName":"Compilation"},{"name":"compiler-warn-proc-messager","displayName":"Java compilation warning"}]},{"locations":[{"path":"C:\\Realive\\back\\src\\main\\java\\com\\realive\\dto\\page\\PageRequestDTO.java","line":26,"column":20,"length":19},{"taskPath":":compileJava"}],"problem":[{"text":"Java compilation warning"}],"severity":"WARNING","problemDetails":[{"text":"C:\\Realive\\back\\src\\main\\java\\com\\realive\\dto\\page\\PageRequestDTO.java:26: warning: @Builder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.\n    private String direction = \"DESC\";  // 정렬 방향 (ASC 또는 DESC, 기본값: DESC)\n                   ^"}],"contextualLabel":"@Builder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.","problemId":[{"name":"java","displayName":"Java compilation"},{"name":"compilation","displayName":"Compilation"},{"name":"compiler-warn-proc-messager","displayName":"Java compilation warning"}]},{"locations":[{"path":"C:\\Realive\\back\\src\\main\\java\\com\\realive\\domain\\customer\\CustomerQna.java","line":58,"column":21,"length":19},{"taskPath":":compileJava"}],"problem":[{"text":"Java compilation warning"}],"severity":"WARNING","problemDetails":[{"text":"C:\\Realive\\back\\src\\main\\java\\com\\realive\\domain\\customer\\CustomerQna.java:58: warning: @Builder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.\n    private boolean isAnswered = false;\n                    ^"}],"contextualLabel":"@Builder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.","problemId":[{"name":"java","displayName":"Java compilation"},{"name":"compilation","displayName":"Compilation"},{"name":"compiler-warn-proc-messager","displayName":"Java compilation warning"}]},{"locations":[{"path":"C:\\Realive\\back\\src\\main\\java\\com\\realive\\domain\\seller\\SellerDocument.java","line":44,"column":21,"length":19},{"taskPath":":compileJava"}],"problem":[{"text":"Java compilation warning"}],"severity":"WARNING","problemDetails":[{"text":"C:\\Realive\\back\\src\\main\\java\\com\\realive\\domain\\seller\\SellerDocument.java:44: warning: @Builder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.\n    private boolean isVerified = false;\n                    ^"}],"contextualLabel":"@Builder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.","problemId":[{"name":"java","displayName":"Java compilation"},{"name":"compilation","displayName":"Compilation"},{"name":"compiler-warn-proc-messager","displayName":"Java compilation warning"}]},{"locations":[{"path":"C:\\Realive\\back\\src\\main\\java\\com\\realive\\domain\\seller\\Seller.java","line":15,"column":1,"length":5},{"taskPath":":compileJava"}],"problem":[{"text":"Java compilation warning"}],"severity":"WARNING","problemDetails":[{"text":"C:\\Realive\\back\\src\\main\\java\\com\\realive\\domain\\seller\\Seller.java:15: warning: Generating equals/hashCode implementation but without a call to superclass, even though this class does not extend java.lang.Object. If this is intentional, add '@EqualsAndHashCode(callSuper=false)' to your type.\n@Data\n^"}],"contextualLabel":"Generating equals/hashCode implementation but without a call to superclass, even though this class does not extend java.lang.Object. If this is intentional, add '@EqualsAndHashCode(callSuper=false)' to your type.","problemId":[{"name":"java","displayName":"Java compilation"},{"name":"compilation","displayName":"Compilation"},{"name":"compiler-warn-proc-messager","displayName":"Java compilation warning"}]},{"locations":[{"path":"C:\\Realive\\back\\src\\main\\java\\com\\realive\\domain\\review\\SellerReviewImage.java","line":10,"column":1,"length":5},{"taskPath":":compileJava"}],"problem":[{"text":"Java compilation warning"}],"severity":"WARNING","problemDetails":[{"text":"C:\\Realive\\back\\src\\main\\java\\com\\realive\\domain\\review\\SellerReviewImage.java:10: warning: Generating equals/hashCode implementation but without a call to superclass, even though this class does not extend java.lang.Object. If this is intentional, add '@EqualsAndHashCode(callSuper=false)' to your type.\n@Data\n^"}],"contextualLabel":"Generating equals/hashCode implementation but without a call to superclass, even though this class does not extend java.lang.Object. If this is intentional, add '@EqualsAndHashCode(callSuper=false)' to your type.","problemId":[{"name":"java","displayName":"Java compilation"},{"name":"compilation","displayName":"Compilation"},{"name":"compiler-warn-proc-messager","displayName":"Java compilation warning"}]},{"locations":[{"path":"C:\\Realive\\back\\src\\main\\java\\com\\realive\\domain\\review\\SellerReview.java","line":22,"column":1,"length":5},{"taskPath":":compileJava"}],"problem":[{"text":"Java compilation warning"}],"severity":"WARNING","problemDetails":[{"text":"C:\\Realive\\back\\src\\main\\java\\com\\realive\\domain\\review\\SellerReview.java:22: warning: Generating equals/hashCode implementation but without a call to superclass, even though this class does not extend java.lang.Object. If this is intentional, add '@EqualsAndHashCode(callSuper=false)' to your type.\n@Data\n^"}],"contextualLabel":"Generating equals/hashCode implementation but without a call to superclass, even though this class does not extend java.lang.Object. If this is intentional, add '@EqualsAndHashCode(callSuper=false)' to your type.","problemId":[{"name":"java","displayName":"Java compilation"},{"name":"compilation","displayName":"Compilation"},{"name":"compiler-warn-proc-messager","displayName":"Java compilation warning"}]}],"problemsReport":{"totalProblemCount":16,"buildName":"realive","requestedTasks":"clean build","documentationLink":"https://docs.gradle.org/8.13/userguide/reporting_problems.html","documentationLinkCaption":"Problem report","summaries":[{"problemId":[{"name":"java","displayName":"Java compilation"},{"name":"compilation","displayName":"Compilation"},{"name":"compiler-warn-proc-messager","displayName":"Java compilation warning"}],"count":1}]}}
+{"diagnostics":[{"locations":[{"path":"build file 'C:\\Realive\\back\\build.gradle'","line":90}],"problem":[{"text":"The CompileOptions.annotationProcessorGeneratedSourcesDirectory property has been deprecated."}],"severity":"WARNING","problemDetails":[{"text":"This is scheduled to be removed in Gradle 9.0."}],"contextualLabel":"The CompileOptions.annotationProcessorGeneratedSourcesDirectory property has been deprecated.","documentationLink":"https://docs.gradle.org/8.13/dsl/org.gradle.api.tasks.compile.CompileOptions.html#org.gradle.api.tasks.compile.CompileOptions:annotationProcessorGeneratedSourcesDirectory","problemId":[{"name":"deprecation","displayName":"Deprecation"},{"name":"the-compileoptions-annotationprocessorgeneratedsourcesdirectory-property-has-been-deprecated","displayName":"The CompileOptions.annotationProcessorGeneratedSourcesDirectory property has been deprecated."}],"solutions":[[{"text":"Please use the generatedSourceOutputDirectory property instead."}]]},{"locations":[{"path":"C:\\Realive\\back\\src\\main\\java\\com\\realive\\domain\\product\\ProductImage.java","line":36,"column":21,"length":20},{"taskPath":":compileJava"}],"problem":[{"text":"Java compilation warning"}],"severity":"WARNING","problemDetails":[{"text":"C:\\Realive\\back\\src\\main\\java\\com\\realive\\domain\\product\\ProductImage.java:36: warning: @Builder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.\n    private boolean isThumbnail = false;\n                    ^"}],"contextualLabel":"@Builder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.","problemId":[{"name":"java","displayName":"Java compilation"},{"name":"compilation","displayName":"Compilation"},{"name":"compiler-warn-proc-messager","displayName":"Java compilation warning"}]},{"locations":[{"path":"C:\\Realive\\back\\src\\main\\java\\com\\realive\\domain\\seller\\SellerDocument.java","line":44,"column":21,"length":19},{"taskPath":":compileJava"}],"problem":[{"text":"Java compilation warning"}],"severity":"WARNING","problemDetails":[{"text":"C:\\Realive\\back\\src\\main\\java\\com\\realive\\domain\\seller\\SellerDocument.java:44: warning: @Builder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.\n    private boolean isVerified = false;\n                    ^"}],"contextualLabel":"@Builder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.","problemId":[{"name":"java","displayName":"Java compilation"},{"name":"compilation","displayName":"Compilation"},{"name":"compiler-warn-proc-messager","displayName":"Java compilation warning"}]},{"locations":[{"path":"C:\\Realive\\back\\src\\main\\java\\com\\realive\\dto\\page\\PageRequestDTO.java","line":23,"column":17,"length":9},{"taskPath":":compileJava"}],"problem":[{"text":"Java compilation warning"}],"severity":"WARNING","problemDetails":[{"text":"C:\\Realive\\back\\src\\main\\java\\com\\realive\\dto\\page\\PageRequestDTO.java:23: warning: @Builder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.\n    private int page = 1;               // 요청한 페이지 번호 (1부터 시작, 내부 로직에서는 0-based로 변환됨)\n                ^"}],"contextualLabel":"@Builder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.","problemId":[{"name":"java","displayName":"Java compilation"},{"name":"compilation","displayName":"Compilation"},{"name":"compiler-warn-proc-messager","displayName":"Java compilation warning"}]},{"locations":[{"path":"C:\\Realive\\back\\src\\main\\java\\com\\realive\\dto\\page\\PageRequestDTO.java","line":24,"column":17,"length":10},{"taskPath":":compileJava"}],"problem":[{"text":"Java compilation warning"}],"severity":"WARNING","problemDetails":[{"text":"C:\\Realive\\back\\src\\main\\java\\com\\realive\\dto\\page\\PageRequestDTO.java:24: warning: @Builder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.\n    private int size = 10;              // 페이지당 데이터 개수 (기본값: 10)\n                ^"}],"contextualLabel":"@Builder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.","problemId":[{"name":"java","displayName":"Java compilation"},{"name":"compilation","displayName":"Compilation"},{"name":"compiler-warn-proc-messager","displayName":"Java compilation warning"}]},{"locations":[{"path":"C:\\Realive\\back\\src\\main\\java\\com\\realive\\dto\\page\\PageRequestDTO.java","line":25,"column":20,"length":19},{"taskPath":":compileJava"}],"problem":[{"text":"Java compilation warning"}],"severity":"WARNING","problemDetails":[{"text":"C:\\Realive\\back\\src\\main\\java\\com\\realive\\dto\\page\\PageRequestDTO.java:25: warning: @Builder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.\n    private String sort = \"createdAt\";  // 정렬 기준 필드명 (기본값: createdAt)\n                   ^"}],"contextualLabel":"@Builder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.","problemId":[{"name":"java","displayName":"Java compilation"},{"name":"compilation","displayName":"Compilation"},{"name":"compiler-warn-proc-messager","displayName":"Java compilation warning"}]},{"locations":[{"path":"C:\\Realive\\back\\src\\main\\java\\com\\realive\\dto\\page\\PageRequestDTO.java","line":26,"column":20,"length":19},{"taskPath":":compileJava"}],"problem":[{"text":"Java compilation warning"}],"severity":"WARNING","problemDetails":[{"text":"C:\\Realive\\back\\src\\main\\java\\com\\realive\\dto\\page\\PageRequestDTO.java:26: warning: @Builder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.\n    private String direction = \"DESC\";  // 정렬 방향 (ASC 또는 DESC, 기본값: DESC)\n                   ^"}],"contextualLabel":"@Builder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.","problemId":[{"name":"java","displayName":"Java compilation"},{"name":"compilation","displayName":"Compilation"},{"name":"compiler-warn-proc-messager","displayName":"Java compilation warning"}]},{"locations":[{"path":"C:\\Realive\\back\\src\\main\\java\\com\\realive\\domain\\seller\\Seller.java","line":51,"column":21,"length":19},{"taskPath":":compileJava"}],"problem":[{"text":"Java compilation warning"}],"severity":"WARNING","problemDetails":[{"text":"C:\\Realive\\back\\src\\main\\java\\com\\realive\\domain\\seller\\Seller.java:51: warning: @Builder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.\n    private boolean isApproved = false;\n                    ^"}],"contextualLabel":"@Builder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.","problemId":[{"name":"java","displayName":"Java compilation"},{"name":"compilation","displayName":"Compilation"},{"name":"compiler-warn-proc-messager","displayName":"Java compilation warning"}]},{"locations":[{"path":"C:\\Realive\\back\\src\\main\\java\\com\\realive\\domain\\seller\\Seller.java","line":59,"column":21,"length":16},{"taskPath":":compileJava"}],"problem":[{"text":"Java compilation warning"}],"severity":"WARNING","problemDetails":[{"text":"C:\\Realive\\back\\src\\main\\java\\com\\realive\\domain\\seller\\Seller.java:59: warning: @Builder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.\n    private boolean isActive = true;\n                    ^"}],"contextualLabel":"@Builder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.","problemId":[{"name":"java","displayName":"Java compilation"},{"name":"compilation","displayName":"Compilation"},{"name":"compiler-warn-proc-messager","displayName":"Java compilation warning"}]},{"locations":[{"path":"C:\\Realive\\back\\src\\main\\java\\com\\realive\\domain\\customer\\CustomerQna.java","line":58,"column":21,"length":19},{"taskPath":":compileJava"}],"problem":[{"text":"Java compilation warning"}],"severity":"WARNING","problemDetails":[{"text":"C:\\Realive\\back\\src\\main\\java\\com\\realive\\domain\\customer\\CustomerQna.java:58: warning: @Builder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.\n    private boolean isAnswered = false;\n                    ^"}],"contextualLabel":"@Builder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.","problemId":[{"name":"java","displayName":"Java compilation"},{"name":"compilation","displayName":"Compilation"},{"name":"compiler-warn-proc-messager","displayName":"Java compilation warning"}]},{"locations":[{"path":"C:\\Realive\\back\\src\\main\\java\\com\\realive\\domain\\customer\\CartItem.java","line":47,"column":21,"length":13},{"taskPath":":compileJava"}],"problem":[{"text":"Java compilation warning"}],"severity":"WARNING","problemDetails":[{"text":"C:\\Realive\\back\\src\\main\\java\\com\\realive\\domain\\customer\\CartItem.java:47: warning: @Builder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.\n    private Integer quantity = 1;\n                    ^"}],"contextualLabel":"@Builder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.","problemId":[{"name":"java","displayName":"Java compilation"},{"name":"compilation","displayName":"Compilation"},{"name":"compiler-warn-proc-messager","displayName":"Java compilation warning"}]},{"locations":[{"path":"C:\\Realive\\back\\src\\main\\java\\com\\realive\\domain\\seller\\SellerQna.java","line":49,"column":21,"length":19},{"taskPath":":compileJava"}],"problem":[{"text":"Java compilation warning"}],"severity":"WARNING","problemDetails":[{"text":"C:\\Realive\\back\\src\\main\\java\\com\\realive\\domain\\seller\\SellerQna.java:49: warning: @Builder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.\n    private boolean isAnswered = false;\n                    ^"}],"contextualLabel":"@Builder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.","problemId":[{"name":"java","displayName":"Java compilation"},{"name":"compilation","displayName":"Compilation"},{"name":"compiler-warn-proc-messager","displayName":"Java compilation warning"}]},{"locations":[{"path":"C:\\Realive\\back\\src\\main\\java\\com\\realive\\domain\\seller\\SellerQna.java","line":56,"column":21,"length":16},{"taskPath":":compileJava"}],"problem":[{"text":"Java compilation warning"}],"severity":"WARNING","problemDetails":[{"text":"C:\\Realive\\back\\src\\main\\java\\com\\realive\\domain\\seller\\SellerQna.java:56: warning: @Builder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.\n    private boolean isActive = true;\n                    ^"}],"contextualLabel":"@Builder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.","problemId":[{"name":"java","displayName":"Java compilation"},{"name":"compilation","displayName":"Compilation"},{"name":"compiler-warn-proc-messager","displayName":"Java compilation warning"}]},{"locations":[{"path":"C:\\Realive\\back\\src\\main\\java\\com\\realive\\domain\\order\\OrderDelivery.java","line":13,"column":1,"length":5},{"taskPath":":compileJava"}],"problem":[{"text":"Java compilation warning"}],"severity":"WARNING","problemDetails":[{"text":"C:\\Realive\\back\\src\\main\\java\\com\\realive\\domain\\order\\OrderDelivery.java:13: warning: Generating equals/hashCode implementation but without a call to superclass, even though this class does not extend java.lang.Object. If this is intentional, add '@EqualsAndHashCode(callSuper=false)' to your type.\n@Data\n^"}],"contextualLabel":"Generating equals/hashCode implementation but without a call to superclass, even though this class does not extend java.lang.Object. If this is intentional, add '@EqualsAndHashCode(callSuper=false)' to your type.","problemId":[{"name":"java","displayName":"Java compilation"},{"name":"compilation","displayName":"Compilation"},{"name":"compiler-warn-proc-messager","displayName":"Java compilation warning"}]},{"locations":[{"path":"C:\\Realive\\back\\src\\main\\java\\com\\realive\\domain\\review\\SellerReviewImage.java","line":10,"column":1,"length":5},{"taskPath":":compileJava"}],"problem":[{"text":"Java compilation warning"}],"severity":"WARNING","problemDetails":[{"text":"C:\\Realive\\back\\src\\main\\java\\com\\realive\\domain\\review\\SellerReviewImage.java:10: warning: Generating equals/hashCode implementation but without a call to superclass, even though this class does not extend java.lang.Object. If this is intentional, add '@EqualsAndHashCode(callSuper=false)' to your type.\n@Data\n^"}],"contextualLabel":"Generating equals/hashCode implementation but without a call to superclass, even though this class does not extend java.lang.Object. If this is intentional, add '@EqualsAndHashCode(callSuper=false)' to your type.","problemId":[{"name":"java","displayName":"Java compilation"},{"name":"compilation","displayName":"Compilation"},{"name":"compiler-warn-proc-messager","displayName":"Java compilation warning"}]},{"locations":[{"path":"C:\\Realive\\back\\src\\main\\java\\com\\realive\\domain\\seller\\Seller.java","line":15,"column":1,"length":5},{"taskPath":":compileJava"}],"problem":[{"text":"Java compilation warning"}],"severity":"WARNING","problemDetails":[{"text":"C:\\Realive\\back\\src\\main\\java\\com\\realive\\domain\\seller\\Seller.java:15: warning: Generating equals/hashCode implementation but without a call to superclass, even though this class does not extend java.lang.Object. If this is intentional, add '@EqualsAndHashCode(callSuper=false)' to your type.\n@Data\n^"}],"contextualLabel":"Generating equals/hashCode implementation but without a call to superclass, even though this class does not extend java.lang.Object. If this is intentional, add '@EqualsAndHashCode(callSuper=false)' to your type.","problemId":[{"name":"java","displayName":"Java compilation"},{"name":"compilation","displayName":"Compilation"},{"name":"compiler-warn-proc-messager","displayName":"Java compilation warning"}]}],"problemsReport":{"totalProblemCount":16,"buildName":"realive","requestedTasks":"clean build","documentationLink":"https://docs.gradle.org/8.13/userguide/reporting_problems.html","documentationLinkCaption":"Problem report","summaries":[{"problemId":[{"name":"java","displayName":"Java compilation"},{"name":"compilation","displayName":"Compilation"},{"name":"compiler-warn-proc-messager","displayName":"Java compilation warning"}],"count":1}]}}
 // end-report-data
 );}
 </script>
diff --git a/back/src/main/java/com/realive/controller/CustomErrorController.java b/back/src/main/java/com/realive/controller/CustomErrorController.java
new file mode 100644
index 00000000..66ee3420
--- /dev/null
+++ b/back/src/main/java/com/realive/controller/CustomErrorController.java
@@ -0,0 +1,39 @@
+package com.realive.controller;
+
+import org.springframework.boot.web.servlet.error.ErrorController;
+import org.springframework.http.ResponseEntity;
+import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RestController;
+
+import com.realive.dto.error.ErrorResponse;
+
+import jakarta.servlet.RequestDispatcher;
+import jakarta.servlet.http.HttpServletRequest;
+
+// 예외 핸들링
+// 흐름정리 - 잘못된 경로 입력 시 500 상태코드 보내는 문제 해결 
+
+@RestController
+@RequestMapping("/error")
+public class CustomErrorController implements ErrorController {
+
+    @RequestMapping
+    public ResponseEntity<ErrorResponse> handleError(HttpServletRequest request) {
+        Object status = request.getAttribute(RequestDispatcher.ERROR_STATUS_CODE);
+        int statusCode = status != null ? Integer.parseInt(status.toString()) : 500;
+
+        if (statusCode == 404) {
+            return ResponseEntity.status(404)
+                    .body(new ErrorResponse(404, "NOT_FOUND", "요청하신 경로가 존재하지 않습니다."));
+        } else if (statusCode == 403) {
+            return ResponseEntity.status(403)
+                .body(new ErrorResponse(403, "FORBIDDEN", "접근이 거부되었습니다."));
+        } else if (statusCode == 405) {
+            return ResponseEntity.status(405)
+                .body(new ErrorResponse(405, "METHOD_NOT_ALLOWED", "허용되지 않은 HTTP 메서드입니다."));
+        }
+
+        return ResponseEntity.status(500)
+                .body(new ErrorResponse(500, "INTERNAL_SERVER_ERROR", "서버 오류가 발생했습니다."));
+    }
+}
diff --git a/back/src/main/java/com/realive/controller/admin/AdminAuctionController.java b/back/src/main/java/com/realive/controller/admin/AdminAuctionController.java
deleted file mode 100644
index 4e8f1555..00000000
--- a/back/src/main/java/com/realive/controller/admin/AdminAuctionController.java
+++ /dev/null
@@ -1,4 +0,0 @@
-package com.realive.controller.admin;
-
-public class AdminAuctionController {
-}
diff --git a/back/src/main/java/com/realive/controller/admin/AdminController.java b/back/src/main/java/com/realive/controller/admin/AdminController.java
deleted file mode 100644
index 75df6c7c..00000000
--- a/back/src/main/java/com/realive/controller/admin/AdminController.java
+++ /dev/null
@@ -1,66 +0,0 @@
-package com.realive.controller.admin;
-
-import java.time.Duration;
-import com.realive.domain.admin.Admin;
-import com.realive.dto.admin.AdminInfoResponseDTO;
-import com.realive.dto.admin.AdminLoginRequestDTO;
-import com.realive.dto.admin.AdminLoginResponseDTO;
-import com.realive.security.AdminPrincipal;
-import com.realive.service.admin.AdminService;
-import org.springframework.http.ResponseCookie;
-import org.springframework.http.ResponseEntity;
-import org.springframework.security.core.annotation.AuthenticationPrincipal;
-import org.springframework.web.bind.annotation.*;
-
-import jakarta.servlet.http.HttpServletResponse;
-import lombok.RequiredArgsConstructor;
-
-@RestController
-@RequestMapping("/api/admin")
-@RequiredArgsConstructor
-public class AdminController {
-
-    private final AdminService adminService;
-
-    //  관리자 로그인
-    @PostMapping("/login")
-    public ResponseEntity<AdminLoginResponseDTO> login(
-            @RequestBody AdminLoginRequestDTO reqDTO,
-            HttpServletResponse response) {
-
-        // 1. 로그인 및 토큰 발급 (서비스에서 처리)
-        AdminLoginResponseDTO resDTO = adminService.login(reqDTO);
-
-        // 2. Refresh Token을 HttpOnly 쿠키로 설정 (서비스에서 내려준 refreshToken 활용)
-        ResponseCookie refreshCookie = ResponseCookie.from("refreshToken", resDTO.getRefreshToken())
-                .httpOnly(true)
-                .secure(true)
-                .sameSite("none")
-                .path("/")
-                .maxAge(Duration.ofDays(7))
-                .build();
-
-        response.setHeader("Set-Cookie", refreshCookie.toString());
-
-        // 3. accessToken은 필요한 경우 body로 전달
-        return ResponseEntity.ok(resDTO);
-    }
-
-
-    // 관리자 정보 조회
-    @GetMapping("/me")
-    public ResponseEntity<AdminInfoResponseDTO> getMyInfo(@AuthenticationPrincipal AdminPrincipal adminPrincipal) {
-        if (adminPrincipal == null) {
-            throw new IllegalStateException("관리자 인증이 필요합니다. JWT 토큰을 확인하세요.");
-        }
-        Admin admin = adminPrincipal.getAdmin();
-        AdminInfoResponseDTO dto = new AdminInfoResponseDTO(
-                admin.getName(),
-                admin.getEmail(),
-                "관리자"
-        );
-        return ResponseEntity.ok(dto);
-    }
-
-
-}
\ No newline at end of file
diff --git a/back/src/main/java/com/realive/controller/admin/AdminProductController.java b/back/src/main/java/com/realive/controller/admin/AdminProductController.java
deleted file mode 100644
index 49044e67..00000000
--- a/back/src/main/java/com/realive/controller/admin/AdminProductController.java
+++ /dev/null
@@ -1,4 +0,0 @@
-package com.realive.controller.admin;
-
-public class AdminProductController {
-}
diff --git a/back/src/main/java/com/realive/controller/admin/AdminSellerApprovalController.java b/back/src/main/java/com/realive/controller/admin/AdminSellerApprovalController.java
deleted file mode 100644
index 4227ad84..00000000
--- a/back/src/main/java/com/realive/controller/admin/AdminSellerApprovalController.java
+++ /dev/null
@@ -1,82 +0,0 @@
-package com.realive.controller.admin;
-
-import com.realive.dto.admin.approval.PendingSellerDTO;
-import com.realive.dto.admin.approval.SellerDecisionRequestDTO; // 요청 본문용 DTO
-import com.realive.dto.seller.SellerResponseDTO;      // 처리 결과 응답용 DTO
-import com.realive.service.admin.approval.SellerApprovalService;
-import lombok.RequiredArgsConstructor;
-import lombok.extern.slf4j.Slf4j;
-import org.springframework.http.HttpStatus;
-import org.springframework.http.ResponseEntity;
-import org.springframework.web.bind.annotation.*; // @RequestBody, @PathVariable 등
-
-import java.util.List;
-import java.util.NoSuchElementException;
-
-@Slf4j
-@RestController
-@RequestMapping("/api/admin/sellers") // 컨트롤러의 기본 API 경로
-@RequiredArgsConstructor
-public class AdminSellerApprovalController {
-
-    private final SellerApprovalService sellerApprovalService;
-
-    /**
-     * 1. 승인 대기중인 업체 목록 조회 API
-     * 엔드포인트: GET /api/admin/sellers/pending
-     * 설명: isApproved == false 이고 approvedAt == null 인 판매자만 조회합니다.
-     */
-    @GetMapping("/pending")
-    public ResponseEntity<List<PendingSellerDTO>> getPendingApprovalSellers() {
-        log.info("GET /api/admin/sellers/pending - 승인 대기 목록 조회 요청");
-        List<PendingSellerDTO> pendingSellers = sellerApprovalService.getPendingApprovalSellers();
-        if (pendingSellers.isEmpty()) {
-            log.info("승인 대기 중인 판매자가 없습니다.");
-            return ResponseEntity.noContent().build(); // 204 No Content
-        }
-        return ResponseEntity.ok(pendingSellers); // 200 OK
-    }
-
-    /**
-     * 2. 업체 승인/거부 처리 API (통합 엔드포인트 - "💡 요약 및 흐름" 방식)
-     * 엔드포인트: POST /api/admin/sellers/approve
-     * 요청 본문: { "sellerId": Long, "approve": boolean }
-     * 설명: 특정 판매자를 승인 또는 거부 처리합니다. 모든 승인·거부 시점에는 approvedAt을 현재 시각으로 변경합니다.
-     */
-    @PostMapping("/approve") // 문서의 "💡 요약 및 흐름"에서 제안된 엔드포인트명
-    public ResponseEntity<?> processSellerDecision(@RequestBody SellerDecisionRequestDTO requestDto) {
-        // 실제 운영 환경에서는 @AuthenticationPrincipal 등을 통해 현재 로그인한 관리자 ID를 가져옵니다.
-        Integer mockAdminId = 0; // 실제로는 인증된 관리자 ID 사용 필요
-
-        log.info("POST /api/admin/sellers/approve - 판매자 처리 요청. SellerId: {}, ApproveAction: {}, AdminId: {}",
-                requestDto.getSellerId(), requestDto.isApprove(), mockAdminId);
-        try {
-            SellerResponseDTO resultSeller = sellerApprovalService.processSellerDecision(
-                    requestDto.getSellerId(),
-                    requestDto.isApprove(),
-                    mockAdminId
-            );
-            return ResponseEntity.ok(resultSeller); // 200 OK
-        } catch (NoSuchElementException e) {
-            log.warn("판매자 처리 실패 - ID {} 판매자를 찾을 수 없음: {}", requestDto.getSellerId(), e.getMessage());
-            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(e.getMessage()); // 404 Not Found
-        } catch (IllegalStateException e) {
-            // 서비스 로직에서 "이미 처리된 판매자" 등의 경우 IllegalStateException 발생 가능
-            log.warn("판매자 처리 실패 - ID {} 처리 불가: {}", requestDto.getSellerId(), e.getMessage());
-            return ResponseEntity.status(HttpStatus.CONFLICT).body(e.getMessage()); // 409 Conflict
-        } catch (Exception e) {
-            log.error("판매자 처리 중 알 수 없는 오류 발생 - ID {}: {}", requestDto.getSellerId(), e.getMessage(), e);
-            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("서버 내부 오류가 발생했습니다."); // 500
-        }
-    }
-
-    @GetMapping("/approved")
-    public ResponseEntity<List<SellerResponseDTO>> getApprovedSellers() {
-        List<SellerResponseDTO> sellers = sellerApprovalService.getApprovedSellers();
-        if (sellers.isEmpty()) {
-            return ResponseEntity.noContent().build();
-        }
-        return ResponseEntity.ok(sellers);
-    }
-
-}
diff --git a/back/src/main/java/com/realive/controller/admin/StatController.java b/back/src/main/java/com/realive/controller/admin/StatController.java
deleted file mode 100644
index 6b824b63..00000000
--- a/back/src/main/java/com/realive/controller/admin/StatController.java
+++ /dev/null
@@ -1,344 +0,0 @@
-package com.realive.controller.admin; // 또는 com.realive.controller.stats 등 적절한 패키지
-
-import com.realive.dto.common.ApiResponse; // ApiResponse DTO import
-import com.realive.dto.logs.salessum.CategorySalesSummaryDTO;
-import com.realive.dto.logs.salessum.DailySalesSummaryDTO;
-import com.realive.dto.logs.salessum.MonthlySalesLogDetailListDTO;
-import com.realive.dto.logs.salessum.MonthlySalesSummaryDTO;
-import com.realive.dto.logs.salessum.SalesLogDetailListDTO;
-import com.realive.service.admin.logs.StatService;
-import io.swagger.v3.oas.annotations.Operation;
-import io.swagger.v3.oas.annotations.Parameter;
-import io.swagger.v3.oas.annotations.media.Content;
-import io.swagger.v3.oas.annotations.media.Schema;
-import io.swagger.v3.oas.annotations.responses.ApiResponses;
-import io.swagger.v3.oas.annotations.tags.Tag;
-import lombok.RequiredArgsConstructor;
-import lombok.extern.slf4j.Slf4j;
-import org.springframework.format.annotation.DateTimeFormat;
-import org.springframework.http.HttpStatus;
-import org.springframework.http.ResponseEntity;
-import org.springframework.web.bind.annotation.*;
-
-import java.time.LocalDate;
-import java.time.YearMonth;
-import java.util.List;
-import java.util.Map;
-
-@Slf4j
-@RestController
-@RequestMapping("/api/admin/stats")
-@RequiredArgsConstructor
-@Tag(name = "Admin: Statistics", description = "관리자 통계 관련 API")
-public class StatController {
-
-    private final StatService statService;
-
-    // --- 기존 엔드포인트들 (getDashboardStats, 일별/월별 요약 및 상세, 카테고리별 요약) ---
-    // 예시:
-    @Operation(summary = "관리자 대시보드 통계 조회", description = "특정 날짜를 기준으로 대시보드에 필요한 통합 통계 정보를 조회합니다.")
-    @ApiResponses(value = {
-            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "200", description = "조회 성공",
-                    content = @Content(mediaType = "application/json", schema = @Schema(implementation = ApiResponse.class))),
-            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "204", description = "데이터 없음", content = @Content),
-            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "500", description = "서버 내부 오류",
-                    content = @Content(mediaType = "application/json", schema = @Schema(implementation = ApiResponse.class)))
-    })
-    @GetMapping("/dashboard")
-    public ResponseEntity<ApiResponse<Map<String, Object>>> getDashboardStats(
-            @Parameter(description = "조회할 날짜 (YYYY-MM-DD)", example = "2025-05-27", required = true)
-            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate date) {
-        log.info("GET /api/admin/stats/dashboard 요청 수신 - date: {}", date);
-        try {
-            Map<String, Object> dashboardStats = statService.getDashboardStats(date);
-            if (dashboardStats == null || dashboardStats.isEmpty()) {
-                return ResponseEntity.status(HttpStatus.NO_CONTENT).body(ApiResponse.success("데이터가 없습니다.", null));
-            }
-            return ResponseEntity.ok(ApiResponse.success(dashboardStats));
-        } catch (Exception e) {
-            log.error("대시보드 통계 조회 중 오류 발생 - date: {}", date, e);
-            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
-                    .body(ApiResponse.error(HttpStatus.INTERNAL_SERVER_ERROR.value(), "서버 내부 오류가 발생했습니다."));
-        }
-    }
-
-    @Operation(summary = "일별 판매 요약 통계 조회", description = "특정 날짜의 총 판매 건수, 금액, 수량 등을 조회합니다.")
-    @ApiResponses(value = {
-            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "200", description = "조회 성공",
-                    content = @Content(mediaType = "application/json", schema = @Schema(implementation = ApiResponse.class))),
-            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "404", description = "데이터 없음",
-                    content = @Content(mediaType = "application/json", schema = @Schema(implementation = ApiResponse.class))),
-            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "500", description = "서버 내부 오류",
-                    content = @Content(mediaType = "application/json", schema = @Schema(implementation = ApiResponse.class)))
-    })
-    @GetMapping("/daily-summary")
-    public ResponseEntity<ApiResponse<DailySalesSummaryDTO>> getDailySalesSummary(
-            @Parameter(description = "조회할 날짜 (YYYY-MM-DD)", example = "2025-05-27", required = true)
-            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate date) {
-        log.info("GET /api/admin/stats/daily-summary 요청 수신 - date: {}", date);
-        try {
-            DailySalesSummaryDTO summary = statService.getDailySalesSummary(date);
-            if (summary == null) {
-                return ResponseEntity.status(HttpStatus.NOT_FOUND)
-                        .body(ApiResponse.error(HttpStatus.NOT_FOUND.value(), "해당 날짜의 판매 요약 데이터가 없습니다."));
-            }
-            return ResponseEntity.ok(ApiResponse.success(summary));
-        } catch (Exception e) {
-            log.error("일별 판매 요약 조회 중 오류 발생 - date: {}", date, e);
-            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
-                    .body(ApiResponse.error(HttpStatus.INTERNAL_SERVER_ERROR.value(), "서버 내부 오류가 발생했습니다."));
-        }
-    }
-
-    @Operation(summary = "일별 상세 판매 로그 조회", description = "특정 날짜의 모든 판매 로그 상세 내역을 조회합니다.")
-    @ApiResponses(value = {
-            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "200", description = "조회 성공",
-                    content = @Content(mediaType = "application/json", schema = @Schema(implementation = ApiResponse.class))),
-            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "204", description = "데이터 없음", content = @Content),
-            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "500", description = "서버 내부 오류",
-                    content = @Content(mediaType = "application/json", schema = @Schema(implementation = ApiResponse.class)))
-    })
-    @GetMapping("/daily-details")
-    public ResponseEntity<ApiResponse<SalesLogDetailListDTO>> getDailySalesLogDetails(
-            @Parameter(description = "조회할 날짜 (YYYY-MM-DD)", example = "2025-05-27", required = true)
-            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate date) {
-        log.info("GET /api/admin/stats/daily-details 요청 수신 - date: {}", date);
-        try {
-            SalesLogDetailListDTO details = statService.getDailySalesLogDetails(date);
-            if (details == null || (details.getSalesLogs() != null && details.getSalesLogs().isEmpty())) {
-                return ResponseEntity.status(HttpStatus.NO_CONTENT).body(ApiResponse.success("해당 날짜의 판매 상세 내역이 없습니다.", null));
-            }
-            return ResponseEntity.ok(ApiResponse.success(details));
-        } catch (Exception e) {
-            log.error("일별 상세 판매 로그 조회 중 오류 발생 - date: {}", date, e);
-            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
-                    .body(ApiResponse.error(HttpStatus.INTERNAL_SERVER_ERROR.value(), "서버 내부 오류가 발생했습니다."));
-        }
-    }
-
-    @Operation(summary = "월별 판매 요약 통계 조회", description = "특정 연월의 총 판매 건수, 금액, 수량 등을 조회합니다.")
-    @ApiResponses(value = {
-            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "200", description = "조회 성공",
-                    content = @Content(mediaType = "application/json", schema = @Schema(implementation = ApiResponse.class))),
-            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "404", description = "데이터 없음",
-                    content = @Content(mediaType = "application/json", schema = @Schema(implementation = ApiResponse.class))),
-            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "500", description = "서버 내부 오류",
-                    content = @Content(mediaType = "application/json", schema = @Schema(implementation = ApiResponse.class)))
-    })
-    @GetMapping("/monthly-summary")
-    public ResponseEntity<ApiResponse<MonthlySalesSummaryDTO>> getMonthlySalesSummary(
-            @Parameter(description = "조회할 연월 (YYYY-MM)", example = "2025-05", required = true)
-            @RequestParam @DateTimeFormat(pattern = "yyyy-MM") YearMonth yearMonth) {
-        log.info("GET /api/admin/stats/monthly-summary 요청 수신 - yearMonth: {}", yearMonth);
-        try {
-            MonthlySalesSummaryDTO summary = statService.getMonthlySalesSummary(yearMonth);
-            if (summary == null) {
-                return ResponseEntity.status(HttpStatus.NOT_FOUND)
-                        .body(ApiResponse.error(HttpStatus.NOT_FOUND.value(), "해당 연월의 판매 요약 데이터가 없습니다."));
-            }
-            return ResponseEntity.ok(ApiResponse.success(summary));
-        } catch (Exception e) {
-            log.error("월별 판매 요약 조회 중 오류 발생 - yearMonth: {}", yearMonth, e);
-            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
-                    .body(ApiResponse.error(HttpStatus.INTERNAL_SERVER_ERROR.value(), "서버 내부 오류가 발생했습니다."));
-        }
-    }
-
-    @Operation(summary = "월별 상세 판매 로그 조회", description = "특정 연월의 모든 판매 로그 상세 내역을 조회합니다.")
-    @ApiResponses(value = {
-            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "200", description = "조회 성공",
-                    content = @Content(mediaType = "application/json", schema = @Schema(implementation = ApiResponse.class))),
-            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "204", description = "데이터 없음", content = @Content),
-            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "500", description = "서버 내부 오류",
-                    content = @Content(mediaType = "application/json", schema = @Schema(implementation = ApiResponse.class)))
-    })
-    @GetMapping("/monthly-details")
-    public ResponseEntity<ApiResponse<MonthlySalesLogDetailListDTO>> getMonthlySalesLogDetails(
-            @Parameter(description = "조회할 연월 (YYYY-MM)", example = "2025-05", required = true)
-            @RequestParam @DateTimeFormat(pattern = "yyyy-MM") YearMonth yearMonth) {
-        log.info("GET /api/admin/stats/monthly-details 요청 수신 - yearMonth: {}", yearMonth);
-        try {
-            MonthlySalesLogDetailListDTO details = statService.getMonthlySalesLogDetails(yearMonth);
-            if (details == null || (details.getSalesLogs() != null && details.getSalesLogs().isEmpty())) {
-                return ResponseEntity.status(HttpStatus.NO_CONTENT).body(ApiResponse.success("해당 연월의 판매 상세 내역이 없습니다.", null));
-            }
-            return ResponseEntity.ok(ApiResponse.success(details));
-        } catch (Exception e) {
-            log.error("월별 상세 판매 로그 조회 중 오류 발생 - yearMonth: {}", yearMonth, e);
-            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
-                    .body(ApiResponse.error(HttpStatus.INTERNAL_SERVER_ERROR.value(), "서버 내부 오류가 발생했습니다."));
-        }
-    }
-
-    @Operation(summary = "카테고리별 판매 요약 조회", description = "특정 기간 동안 플랫폼 전체의 카테고리별 판매 건수 및 금액을 조회합니다.")
-    @ApiResponses(value = {
-            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "200", description = "조회 성공",
-                    content = @Content(mediaType = "application/json", schema = @Schema(implementation = ApiResponse.class))),
-            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "204", description = "데이터 없음", content = @Content),
-            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "500", description = "서버 내부 오류",
-                    content = @Content(mediaType = "application/json", schema = @Schema(implementation = ApiResponse.class)))
-    })
-    @GetMapping("/category-summary")
-    public ResponseEntity<ApiResponse<List<CategorySalesSummaryDTO>>> getPlatformCategorySalesSummary(
-            @Parameter(description = "조회 시작일 (YYYY-MM-DD)", example = "2025-05-01", required = true)
-            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate startDate,
-            @Parameter(description = "조회 종료일 (YYYY-MM-DD)", example = "2025-05-27", required = true)
-            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate endDate) {
-        log.info("GET /api/admin/stats/category-summary 요청 수신 - startDate: {}, endDate: {}", startDate, endDate);
-        try {
-            List<CategorySalesSummaryDTO> summary = statService.getPlatformCategorySalesSummary(startDate, endDate);
-            if (summary == null || summary.isEmpty()) {
-                return ResponseEntity.status(HttpStatus.NO_CONTENT).body(ApiResponse.success("해당 기간의 카테고리별 판매 요약 데이터가 없습니다.", null));
-            }
-            return ResponseEntity.ok(ApiResponse.success(summary));
-        } catch (Exception e) {
-            log.error("카테고리별 판매 요약 조회 중 오류 발생 - 기간: {} ~ {}", startDate, endDate, e);
-            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
-                    .body(ApiResponse.error(HttpStatus.INTERNAL_SERVER_ERROR.value(), "서버 내부 오류가 발생했습니다."));
-        }
-    }
-
-    // --- 주석 처리되었던 엔드포인트들 구현 ---
-
-    @Operation(summary = "특정 월의 일별 판매 요약 리스트 조회", description = "선택한 연월에 해당하는 모든 날짜의 일별 판매 요약 정보를 리스트로 조회합니다.")
-    @ApiResponses(value = {
-            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "200", description = "조회 성공",
-                    content = @Content(mediaType = "application/json", schema = @Schema(implementation = ApiResponse.class))), // ApiResponse<List<DailySalesSummaryDTO>>
-            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "204", description = "데이터 없음", content = @Content),
-            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "500", description = "서버 내부 오류",
-                    content = @Content(mediaType = "application/json", schema = @Schema(implementation = ApiResponse.class)))
-    })
-    @GetMapping("/daily-summaries-in-month")
-    public ResponseEntity<ApiResponse<List<DailySalesSummaryDTO>>> getDailySummariesInMonth(
-            @Parameter(description = "조회할 연월 (YYYY-MM)", example = "2025-05", required = true)
-            @RequestParam @DateTimeFormat(pattern = "yyyy-MM") YearMonth yearMonth) {
-        log.info("GET /api/admin/stats/daily-summaries-in-month 요청 수신 - yearMonth: {}", yearMonth);
-        try {
-            List<DailySalesSummaryDTO> summaries = statService.getDailySummariesInMonth(yearMonth);
-            if (summaries == null || summaries.isEmpty()) {
-                return ResponseEntity.status(HttpStatus.NO_CONTENT).body(ApiResponse.success("해당 연월의 일별 판매 요약 데이터가 없습니다.", null));
-            }
-            return ResponseEntity.ok(ApiResponse.success(summaries));
-        } catch (Exception e) {
-            log.error("특정 월의 일별 판매 요약 리스트 조회 중 오류 발생 - yearMonth: {}", yearMonth, e);
-            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
-                    .body(ApiResponse.error(HttpStatus.INTERNAL_SERVER_ERROR.value(), "서버 내부 오류가 발생했습니다."));
-        }
-    }
-
-    @Operation(summary = "특정 판매자의 일별 판매 요약 조회", description = "특정 판매자의 특정 날짜에 대한 판매 요약 정보를 조회합니다.")
-    @ApiResponses(value = {
-            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "200", description = "조회 성공",
-                    content = @Content(mediaType = "application/json", schema = @Schema(implementation = ApiResponse.class))), // ApiResponse<DailySalesSummaryDTO>
-            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "404", description = "데이터 없음",
-                    content = @Content(mediaType = "application/json", schema = @Schema(implementation = ApiResponse.class))),
-            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "500", description = "서버 내부 오류",
-                    content = @Content(mediaType = "application/json", schema = @Schema(implementation = ApiResponse.class)))
-    })
-    @GetMapping("/seller/{sellerId}/daily-summary")
-    public ResponseEntity<ApiResponse<DailySalesSummaryDTO>> getSellerDailySalesSummary(
-            @Parameter(description = "조회할 판매자의 ID", example = "1", required = true) @PathVariable Integer sellerId,
-            @Parameter(description = "조회할 날짜 (YYYY-MM-DD)", example = "2025-05-27", required = true)
-            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate date) {
-        log.info("GET /api/admin/stats/seller/{}/daily-summary 요청 수신 - sellerId: {}, date: {}", sellerId, date);
-        try {
-            DailySalesSummaryDTO summary = statService.getSellerDailySalesSummary(sellerId, date);
-            if (summary == null) {
-                return ResponseEntity.status(HttpStatus.NOT_FOUND)
-                        .body(ApiResponse.error(HttpStatus.NOT_FOUND.value(), "해당 판매자 또는 날짜의 판매 요약 데이터가 없습니다."));
-            }
-            return ResponseEntity.ok(ApiResponse.success(summary));
-        } catch (Exception e) {
-            log.error("판매자 일별 판매 요약 조회 중 오류 발생 - sellerId: {}, date: {}", sellerId, date, e);
-            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
-                    .body(ApiResponse.error(HttpStatus.INTERNAL_SERVER_ERROR.value(), "서버 내부 오류가 발생했습니다."));
-        }
-    }
-
-    @Operation(summary = "특정 판매자의 월별 판매 요약 조회", description = "특정 판매자의 특정 연월에 대한 판매 요약 정보를 조회합니다.")
-    @ApiResponses(value = {
-            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "200", description = "조회 성공",
-                    content = @Content(mediaType = "application/json", schema = @Schema(implementation = ApiResponse.class))), // ApiResponse<MonthlySalesSummaryDTO>
-            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "404", description = "데이터 없음",
-                    content = @Content(mediaType = "application/json", schema = @Schema(implementation = ApiResponse.class))),
-            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "500", description = "서버 내부 오류",
-                    content = @Content(mediaType = "application/json", schema = @Schema(implementation = ApiResponse.class)))
-    })
-    @GetMapping("/seller/{sellerId}/monthly-summary")
-    public ResponseEntity<ApiResponse<MonthlySalesSummaryDTO>> getSellerMonthlySalesSummary(
-            @Parameter(description = "조회할 판매자의 ID", example = "1", required = true) @PathVariable Integer sellerId,
-            @Parameter(description = "조회할 연월 (YYYY-MM)", example = "2025-05", required = true)
-            @RequestParam @DateTimeFormat(pattern = "yyyy-MM") YearMonth yearMonth) {
-        log.info("GET /api/admin/stats/seller/{}/monthly-summary 요청 수신 - sellerId: {}, yearMonth: {}", sellerId, yearMonth);
-        try {
-            MonthlySalesSummaryDTO summary = statService.getSellerMonthlySalesSummary(sellerId, yearMonth);
-            if (summary == null) {
-                return ResponseEntity.status(HttpStatus.NOT_FOUND)
-                        .body(ApiResponse.error(HttpStatus.NOT_FOUND.value(), "해당 판매자 또는 연월의 판매 요약 데이터가 없습니다."));
-            }
-            return ResponseEntity.ok(ApiResponse.success(summary));
-        } catch (Exception e) {
-            log.error("판매자 월별 판매 요약 조회 중 오류 발생 - sellerId: {}, yearMonth: {}", sellerId, yearMonth, e);
-            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
-                    .body(ApiResponse.error(HttpStatus.INTERNAL_SERVER_ERROR.value(), "서버 내부 오류가 발생했습니다."));
-        }
-    }
-
-    @Operation(summary = "특정 상품의 일별 판매 요약 조회", description = "특정 상품의 특정 날짜에 대한 판매 요약 정보를 조회합니다.")
-    @ApiResponses(value = {
-            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "200", description = "조회 성공",
-                    content = @Content(mediaType = "application/json", schema = @Schema(implementation = ApiResponse.class))), // ApiResponse<DailySalesSummaryDTO>
-            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "404", description = "데이터 없음",
-                    content = @Content(mediaType = "application/json", schema = @Schema(implementation = ApiResponse.class))),
-            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "500", description = "서버 내부 오류",
-                    content = @Content(mediaType = "application/json", schema = @Schema(implementation = ApiResponse.class)))
-    })
-    @GetMapping("/product/{productId}/daily-summary")
-    public ResponseEntity<ApiResponse<DailySalesSummaryDTO>> getProductDailySalesSummary(
-            @Parameter(description = "조회할 상품의 ID", example = "101", required = true) @PathVariable Integer productId,
-            @Parameter(description = "조회할 날짜 (YYYY-MM-DD)", example = "2025-05-27", required = true)
-            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate date) {
-        log.info("GET /api/admin/stats/product/{}/daily-summary 요청 수신 - productId: {}, date: {}", productId, date);
-        try {
-            DailySalesSummaryDTO summary = statService.getProductDailySalesSummary(productId, date);
-            if (summary == null) {
-                return ResponseEntity.status(HttpStatus.NOT_FOUND)
-                        .body(ApiResponse.error(HttpStatus.NOT_FOUND.value(), "해당 상품 또는 날짜의 판매 요약 데이터가 없습니다."));
-            }
-            return ResponseEntity.ok(ApiResponse.success(summary));
-        } catch (Exception e) {
-            log.error("상품 일별 판매 요약 조회 중 오류 발생 - productId: {}, date: {}", productId, date, e);
-            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
-                    .body(ApiResponse.error(HttpStatus.INTERNAL_SERVER_ERROR.value(), "서버 내부 오류가 발생했습니다."));
-        }
-    }
-
-    @Operation(summary = "특정 상품의 월별 판매 요약 조회", description = "특정 상품의 특정 연월에 대한 판매 요약 정보를 조회합니다.")
-    @ApiResponses(value = {
-            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "200", description = "조회 성공",
-                    content = @Content(mediaType = "application/json", schema = @Schema(implementation = ApiResponse.class))), // ApiResponse<MonthlySalesSummaryDTO>
-            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "404", description = "데이터 없음",
-                    content = @Content(mediaType = "application/json", schema = @Schema(implementation = ApiResponse.class))),
-            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "500", description = "서버 내부 오류",
-                    content = @Content(mediaType = "application/json", schema = @Schema(implementation = ApiResponse.class)))
-    })
-    @GetMapping("/product/{productId}/monthly-summary")
-    public ResponseEntity<ApiResponse<MonthlySalesSummaryDTO>> getProductMonthlySalesSummary(
-            @Parameter(description = "조회할 상품의 ID", example = "101", required = true) @PathVariable Integer productId,
-            @Parameter(description = "조회할 연월 (YYYY-MM)", example = "2025-05", required = true)
-            @RequestParam @DateTimeFormat(pattern = "yyyy-MM") YearMonth yearMonth) {
-        log.info("GET /api/admin/stats/product/{}/monthly-summary 요청 수신 - productId: {}, yearMonth: {}", productId, yearMonth);
-        try {
-            MonthlySalesSummaryDTO summary = statService.getProductMonthlySalesSummary(productId, yearMonth);
-            if (summary == null) {
-                return ResponseEntity.status(HttpStatus.NOT_FOUND)
-                        .body(ApiResponse.error(HttpStatus.NOT_FOUND.value(), "해당 상품 또는 연월의 판매 요약 데이터가 없습니다."));
-            }
-            return ResponseEntity.ok(ApiResponse.success(summary));
-        } catch (Exception e) {
-            log.error("상품 월별 판매 요약 조회 중 오류 발생 - productId: {}, yearMonth: {}", productId, yearMonth, e);
-            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
-                    .body(ApiResponse.error(HttpStatus.INTERNAL_SERVER_ERROR.value(), "서버 내부 오류가 발생했습니다."));
-        }
-    }
-}
diff --git a/back/src/main/java/com/realive/controller/auction/AuctionController.java b/back/src/main/java/com/realive/controller/auction/AuctionController.java
deleted file mode 100644
index a85f6006..00000000
--- a/back/src/main/java/com/realive/controller/auction/AuctionController.java
+++ /dev/null
@@ -1,185 +0,0 @@
-package com.realive.controller.auction;
-
-// import com.realive.domain.seller.Seller; // 이 시나리오에서는 Seller를 직접 받지 않을 수 있음
-import com.realive.dto.auction.AuctionCreateRequestDTO;
-import com.realive.dto.auction.AuctionResponseDTO;
-import com.realive.dto.common.ApiResponse;
-import com.realive.security.AdminPrincipal; // 관리자 정보를 담는 Principal 클래스 (실제 경로로 수정)
-import com.realive.service.admin.auction.AuctionService; // 패키지명 일치 확인 (service.admin.auction.AuctionService)
-import jakarta.validation.Valid;
-import lombok.RequiredArgsConstructor;
-import lombok.extern.slf4j.Slf4j;
-import org.springframework.data.domain.Page;
-import org.springframework.data.domain.Pageable;
-import org.springframework.data.web.PageableDefault;
-import org.springframework.http.HttpStatus;
-import org.springframework.http.ResponseEntity;
-import org.springframework.security.access.AccessDeniedException;
-import org.springframework.security.core.annotation.AuthenticationPrincipal;
-import org.springframework.web.bind.annotation.*;
-
-import java.util.NoSuchElementException;
-import java.util.Optional;
-
-@Slf4j
-@RestController
-@RequestMapping("/api/admin/auctions") // 기본 경로를 관리자용으로 명확히 함
-@RequiredArgsConstructor
-public class AuctionController {
-
-    private final AuctionService auctionService;
-
-    /**
-     * (관리자에 의해) 새로운 경매를 등록합니다.
-     */
-    @PostMapping
-    public ResponseEntity<ApiResponse<AuctionResponseDTO>> registerAuction(
-            @Valid @RequestBody AuctionCreateRequestDTO requestDto,
-            @AuthenticationPrincipal AdminPrincipal adminPrincipal // 인증된 관리자 정보 주입
-    ) {
-        log.info("POST /api/admin/auctions - 관리자 경매 등록 요청 시작. DTO: {}, AdminId: {}",
-                requestDto, (adminPrincipal != null ? adminPrincipal.getAdmin().getId() : "null"));
-
-        if (adminPrincipal == null) {
-            return ResponseEntity.status(HttpStatus.UNAUTHORIZED)
-                    .body(ApiResponse.error(HttpStatus.UNAUTHORIZED.value(), "관리자 로그인이 필요합니다."));
-        }
-        // Admin 엔티티의 ID가 Integer라고 가정하고 Long으로 변환. 실제 타입에 맞출 것.
-        Long adminUserId = Long.valueOf(adminPrincipal.getAdmin().getId());
-
-        try {
-            // AuctionService.registerAuction은 이제 요청한 사용자의 ID (여기서는 관리자 ID)를 받음.
-            // 서비스 내부에서 이 관리자가 경매를 생성할 권한이 있는지,
-            // 또는 requestDto에 포함된 productId의 원래 판매자 정보를 활용하는지 등의 로직이 필요할 수 있음.
-            AuctionResponseDTO registeredAuction = auctionService.registerAuction(requestDto, adminUserId);
-            return ResponseEntity.status(HttpStatus.CREATED)
-                    .body(ApiResponse.success("경매가 성공적으로 등록되었습니다.", registeredAuction));
-        } catch (NoSuchElementException e) {
-            return ResponseEntity.status(HttpStatus.NOT_FOUND)
-                    .body(ApiResponse.error(HttpStatus.NOT_FOUND.value(), e.getMessage()));
-        } catch (IllegalStateException | IllegalArgumentException e) {
-            return ResponseEntity.status(HttpStatus.BAD_REQUEST)
-                    .body(ApiResponse.error(HttpStatus.BAD_REQUEST.value(), e.getMessage()));
-        } catch (AccessDeniedException e) { // 서비스에서 권한 검증 실패 시
-            return ResponseEntity.status(HttpStatus.FORBIDDEN)
-                    .body(ApiResponse.error(HttpStatus.FORBIDDEN.value(), e.getMessage()));
-        } catch (Exception e) {
-            log.error("관리자 경매 등록 중 알 수 없는 서버 내부 오류 발생. AdminId: {}", adminUserId, e);
-            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
-                    .body(ApiResponse.error(HttpStatus.INTERNAL_SERVER_ERROR.value(), "경매 등록 중 서버 내부 오류가 발생했습니다."));
-        }
-    }
-
-    /**
-     * (관리자가) 현재 진행 중인 경매 목록을 페이징하여 조회합니다.
-     */
-    @GetMapping
-    public ResponseEntity<ApiResponse<Page<AuctionResponseDTO>>> getActiveAuctions(
-            @PageableDefault(size = 10, sort = "endTime,asc") Pageable pageable,
-            @RequestParam(required = false) String category,
-            @RequestParam(required = false) String status,
-            @AuthenticationPrincipal AdminPrincipal adminPrincipal // 관리자만 접근 가능하도록
-    ) {
-        log.info("GET /api/admin/auctions - 관리자 진행 중 경매 목록 조회. AdminId: {}",
-                (adminPrincipal != null ? adminPrincipal.getAdmin().getId() : "null"));
-        if (adminPrincipal == null) {
-            return ResponseEntity.status(HttpStatus.UNAUTHORIZED)
-                    .body(ApiResponse.error(HttpStatus.UNAUTHORIZED.value(), "관리자 로그인이 필요합니다."));
-        }
-        try {
-            Page<AuctionResponseDTO> activeAuctions = auctionService.getActiveAuctions(pageable, category, status);
-            if (activeAuctions.isEmpty()) {
-                return ResponseEntity.status(HttpStatus.OK)
-                        .body(ApiResponse.success("진행 중인 경매가 없습니다.", activeAuctions));
-            }
-            return ResponseEntity.ok(ApiResponse.success(activeAuctions));
-        } catch (Exception e) {
-            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
-                    .body(ApiResponse.error(HttpStatus.INTERNAL_SERVER_ERROR.value(), "경매 목록 조회 중 서버 내부 오류가 발생했습니다."));
-        }
-    }
-
-    /**
-     * (관리자가) 특정 경매의 상세 정보를 조회합니다.
-     */
-    @GetMapping("/{auctionId}")
-    public ResponseEntity<ApiResponse<AuctionResponseDTO>> getAuctionDetails(
-            @PathVariable Integer auctionId,
-            @AuthenticationPrincipal AdminPrincipal adminPrincipal // 관리자만 접근 가능하도록
-    ) {
-        log.info("GET /api/admin/auctions/{} - 관리자 경매 상세 정보 조회. AdminId: {}",
-                auctionId, (adminPrincipal != null ? adminPrincipal.getAdmin().getId() : "null"));
-        if (adminPrincipal == null) {
-            return ResponseEntity.status(HttpStatus.UNAUTHORIZED)
-                    .body(ApiResponse.error(HttpStatus.UNAUTHORIZED.value(), "관리자 로그인이 필요합니다."));
-        }
-        try {
-            AuctionResponseDTO auctionDetails = auctionService.getAuctionDetails(auctionId);
-            return ResponseEntity.ok(ApiResponse.success(auctionDetails));
-        } catch (NoSuchElementException e) {
-            return ResponseEntity.status(HttpStatus.NOT_FOUND)
-                    .body(ApiResponse.error(HttpStatus.NOT_FOUND.value(), e.getMessage()));
-        } catch (Exception e) {
-            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
-                    .body(ApiResponse.error(HttpStatus.INTERNAL_SERVER_ERROR.value(), "경매 상세 정보 조회 중 서버 내부 오류가 발생했습니다."));
-        }
-    }
-
-    /**
-     * (관리자가) 특정 판매자가 등록한 경매 목록을 페이징하여 조회합니다.
-     */
-    @GetMapping("/seller/{sellerId}")
-    public ResponseEntity<ApiResponse<Page<AuctionResponseDTO>>> getAuctionsBySeller(
-            @PathVariable Long sellerId, // 조회 대상 판매자 ID
-            @PageableDefault(size = 10, sort = "createdAt,desc") Pageable pageable,
-            @AuthenticationPrincipal AdminPrincipal adminPrincipal // 이 API를 호출하는 주체는 관리자
-    ) {
-        log.info("GET /api/admin/auctions/seller/{} - 관리자가 특정 판매자 경매 목록 조회. AdminId: {}",
-                sellerId, (adminPrincipal != null ? adminPrincipal.getAdmin().getId() : "null"));
-        if (adminPrincipal == null) {
-            return ResponseEntity.status(HttpStatus.UNAUTHORIZED)
-                    .body(ApiResponse.error(HttpStatus.UNAUTHORIZED.value(), "관리자 로그인이 필요합니다."));
-        }
-        try {
-            Page<AuctionResponseDTO> sellerAuctions = auctionService.getAuctionsBySeller(sellerId, pageable);
-            if (sellerAuctions.isEmpty()) {
-                return ResponseEntity.status(HttpStatus.OK)
-                        .body(ApiResponse.success("해당 판매자가 등록한 경매가 없습니다.", sellerAuctions));
-            }
-            return ResponseEntity.ok(ApiResponse.success(sellerAuctions));
-        } catch (Exception e) {
-            log.error("관리자가 판매자(ID:{}) 경매 목록 조회 중 오류 발생: {}", sellerId, e.getMessage(), e);
-            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
-                    .body(ApiResponse.error(HttpStatus.INTERNAL_SERVER_ERROR.value(), "판매자 경매 목록 조회 중 오류가 발생했습니다."));
-        }
-    }
-
-    /**
-     * (관리자가) 특정 상품 ID에 대해 현재 진행 중인 경매를 조회합니다.
-     */
-    @GetMapping("/product/{productId}/current")
-    public ResponseEntity<ApiResponse<AuctionResponseDTO>> getCurrentAuctionForProduct(
-            @PathVariable Integer productId,
-            @AuthenticationPrincipal AdminPrincipal adminPrincipal // 관리자만 접근 가능하도록
-    ) {
-        log.info("GET /api/admin/auctions/product/{}/current - 관리자가 특정 상품의 현재 경매 조회. AdminId: {}",
-                productId, (adminPrincipal != null ? adminPrincipal.getAdmin().getId() : "null"));
-        if (adminPrincipal == null) {
-            return ResponseEntity.status(HttpStatus.UNAUTHORIZED)
-                    .body(ApiResponse.error(HttpStatus.UNAUTHORIZED.value(), "관리자 로그인이 필요합니다."));
-        }
-        try {
-            Optional<AuctionResponseDTO> currentAuctionOpt = auctionService.getCurrentAuctionForProduct(productId);
-            if (currentAuctionOpt.isPresent()) {
-                return ResponseEntity.ok(ApiResponse.success(currentAuctionOpt.get()));
-            } else {
-                return ResponseEntity.status(HttpStatus.NOT_FOUND)
-                        .body(ApiResponse.success("해당 상품에 대해 진행 중인 경매가 없습니다.", null));
-            }
-        } catch (Exception e) {
-            log.error("관리자가 상품(ID:{})의 현재 경매 조회 중 오류 발생: {}", productId, e.getMessage(), e);
-            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
-                    .body(ApiResponse.error(HttpStatus.INTERNAL_SERVER_ERROR.value(), "상품의 현재 경매 조회 중 오류가 발생했습니다."));
-        }
-    }
-}
diff --git a/back/src/main/java/com/realive/controller/auction/BidController.java b/back/src/main/java/com/realive/controller/auction/BidController.java
deleted file mode 100644
index a02d7069..00000000
--- a/back/src/main/java/com/realive/controller/auction/BidController.java
+++ /dev/null
@@ -1,103 +0,0 @@
-package com.realive.controller.auction;
-
-import com.realive.dto.bid.BidRequestDTO;
-import com.realive.dto.bid.BidResponseDTO;
-import com.realive.dto.common.ApiResponse;
-import com.realive.service.admin.auction.BidService;
-import jakarta.validation.Valid;
-import lombok.RequiredArgsConstructor;
-import lombok.extern.slf4j.Slf4j;
-import org.springframework.data.domain.Page;
-import org.springframework.data.domain.Pageable;
-import org.springframework.data.web.PageableDefault;
-import org.springframework.http.HttpStatus;
-import org.springframework.http.ResponseEntity;
-import org.springframework.security.access.AccessDeniedException;
-import org.springframework.security.core.annotation.AuthenticationPrincipal;
-// import com.realive.security.UserDetailsImpl;
-import org.springframework.web.bind.annotation.*;
-
-import java.util.NoSuchElementException;
-
-@Slf4j
-@RestController
-@RequestMapping("/api/bids")
-@RequiredArgsConstructor
-public class BidController {
-
-    private final BidService bidService;
-
-    @PostMapping
-    public ResponseEntity<ApiResponse<BidResponseDTO>> placeBid(
-            @Valid @RequestBody BidRequestDTO requestDto,
-            @AuthenticationPrincipal(expression = "id") Long customerId
-    ) {
-        log.info("POST /api/bids - 입찰 요청: {} (고객ID: {})", requestDto, customerId);
-        try {
-            BidResponseDTO placedBid = bidService.placeBid(requestDto, customerId);
-            return ResponseEntity.status(HttpStatus.CREATED)
-                    .body(ApiResponse.success("입찰이 성공적으로 등록되었습니다.", placedBid));
-        } catch (NoSuchElementException e) {
-            log.warn("입찰 실패 - 관련 리소스 없음: {}", e.getMessage());
-            return ResponseEntity.status(HttpStatus.NOT_FOUND)
-                    .body(ApiResponse.error(HttpStatus.NOT_FOUND.value(), e.getMessage()));
-        } catch (IllegalArgumentException | IllegalStateException e) {
-            log.warn("입찰 실패 - 잘못된 요청 또는 상태: {}", e.getMessage());
-            return ResponseEntity.status(HttpStatus.BAD_REQUEST)
-                    .body(ApiResponse.error(HttpStatus.BAD_REQUEST.value(), e.getMessage()));
-        } catch (AccessDeniedException e) {
-            log.warn("입찰 실패 - 권한 없음: {}", e.getMessage());
-            return ResponseEntity.status(HttpStatus.FORBIDDEN)
-                    .body(ApiResponse.error(HttpStatus.FORBIDDEN.value(), e.getMessage()));
-        } catch (Exception e) {
-            log.error("입찰 중 알 수 없는 오류 발생 - 요청: {}", requestDto, e); // 로깅 시 예외 객체 e도 함께 전달
-            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
-                    .body(ApiResponse.error(HttpStatus.INTERNAL_SERVER_ERROR.value(), "입찰 중 오류가 발생했습니다.")); // 수정됨
-        }
-    }
-
-    @GetMapping("/auction/{auctionId}")
-    public ResponseEntity<ApiResponse<Page<BidResponseDTO>>> getBidsForAuction(
-            @PathVariable Integer auctionId,
-            @PageableDefault(size = 20, sort = "bidTime,desc") Pageable pageable
-    ) {
-        log.info("GET /api/bids/auction/{} - 특정 경매 입찰 내역 조회 요청", auctionId);
-        try {
-            Page<BidResponseDTO> bids = bidService.getBidsForAuction(auctionId, pageable);
-            if (bids.isEmpty()) {
-                return ResponseEntity.status(HttpStatus.OK) // 204 No Content 대신 200 OK와 빈 데이터로 응답할 수도 있음
-                        .body(ApiResponse.success("해당 경매에 대한 입찰 내역이 없습니다.", bids));
-            }
-            return ResponseEntity.ok(ApiResponse.success(bids));
-        } catch (NoSuchElementException e) {
-            log.warn("경매(ID:{}) 입찰 내역 조회 실패: {}", auctionId, e.getMessage());
-            return ResponseEntity.status(HttpStatus.NOT_FOUND)
-                    .body(ApiResponse.error(HttpStatus.NOT_FOUND.value(), e.getMessage()));
-        } catch (Exception e) {
-            log.error("특정 경매 입찰 내역 조회 중 알 수 없는 오류 발생 - AuctionId {}: {}", auctionId, e.getMessage(), e);
-            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
-                    .body(ApiResponse.error(HttpStatus.INTERNAL_SERVER_ERROR.value(), "입찰 내역 조회 중 오류가 발생했습니다.")); // 수정됨
-        }
-    }
-
-    @GetMapping("/customer/{customerId}")
-    public ResponseEntity<ApiResponse<Page<BidResponseDTO>>> getBidsByCustomer(
-            @PathVariable Long customerId,
-            @PageableDefault(size = 20, sort = "bidTime,desc") Pageable pageable
-            /* @AuthenticationPrincipal UserDetailsImpl userDetails */
-    ) {
-        log.info("GET /api/bids/customer/{} - 특정 고객 입찰 내역 조회 요청", customerId);
-        try {
-            Page<BidResponseDTO> bids = bidService.getBidsByCustomer(customerId, pageable);
-            if (bids.isEmpty()) {
-                return ResponseEntity.status(HttpStatus.OK) // 204 No Content 대신 200 OK와 빈 데이터로 응답할 수도 있음
-                        .body(ApiResponse.success("해당 고객의 입찰 내역이 없습니다.", bids));
-            }
-            return ResponseEntity.ok(ApiResponse.success(bids));
-        } catch (Exception e) {
-            log.error("특정 고객 입찰 내역 조회 중 알 수 없는 오류 발생 - CustomerId {}: {}", customerId, e.getMessage(), e);
-            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
-                    .body(ApiResponse.error(HttpStatus.INTERNAL_SERVER_ERROR.value(), "입찰 내역 조회 중 오류가 발생했습니다.")); // 수정됨
-        }
-    }
-}
diff --git a/back/src/main/java/com/realive/controller/auth/RefreshController.java b/back/src/main/java/com/realive/controller/auth/RefreshController.java
deleted file mode 100644
index 63ef70de..00000000
--- a/back/src/main/java/com/realive/controller/auth/RefreshController.java
+++ /dev/null
@@ -1,83 +0,0 @@
-package com.realive.controller.auth;
-
-import org.springframework.web.bind.annotation.RequestMapping;
-import org.springframework.web.bind.annotation.RestController;
-
-import com.realive.domain.seller.Seller;
-import com.realive.dto.seller.SellerLoginResponseDTO;
-import com.realive.exception.UnauthorizedException;
-import com.realive.repository.seller.SellerRepository;
-import com.realive.security.JwtUtil;
-
-import jakarta.servlet.http.Cookie;
-import jakarta.servlet.http.HttpServletRequest;
-import lombok.RequiredArgsConstructor;
-
-import org.springframework.http.ResponseEntity;
-import org.springframework.web.bind.annotation.PostMapping;
-/**
- * RefreshController
- * - 클라이언트가 전달한 Refresh Token으로 새로운 Access Token을 발급해주는 컨트롤러
- */
-@RestController
-@RequestMapping("/api/auth")
-@RequiredArgsConstructor
-public class RefreshController {
-
-    private final JwtUtil jwtUtil;
-    private final SellerRepository sellerRepository;
-
-    /**
-     * Refresh Token으로 새로운 Access Token 발급
-     *
-     * @param request HTTP 요청 (쿠키에서 refreshToken을 추출)
-     * @return 새로운 Access Token과 사용자 정보가 담긴 응답 DTO
-     */
-    @PostMapping("/refresh")
-    public ResponseEntity<SellerLoginResponseDTO> refreshAcessToken(HttpServletRequest request) {
-        // 쿠키에서 refreshToken 추출
-        String refreshToken = extractRefreshTokenFromCookie(request);
-
-        // 토큰 유효성 검증
-        if (refreshToken == null || !jwtUtil.validateToken(refreshToken)) {
-            throw new UnauthorizedException("리프레시 토큰이 유효하지 않습니다.");
-        }
-
-        // 토큰에서 사용자 ID 추출
-        Long sellerId = jwtUtil.getUserIdFromToken(refreshToken);
-
-        // 사용자 조회
-        Seller seller = sellerRepository.findById(sellerId)
-                .orElseThrow(() -> new UnauthorizedException("판매자 정보를 찾을 수 없습니다"));
-
-        // 새로운 Access Token 생성
-        String newAccessToken = jwtUtil.generateAccessToken(seller);
-
-        // 응답 DTO 생성
-        SellerLoginResponseDTO dto = SellerLoginResponseDTO.builder()
-                .accessToken(newAccessToken)
-                .email(seller.getEmail())
-                .name(seller.getName())
-                .build();
-
-        return ResponseEntity.ok(dto);
-    }
-
-    /**
-     * HTTP 요청의 쿠키에서 refreshToken을 추출
-     *
-     * @param request HTTP 요청
-     * @return refreshToken 문자열 (없으면 null 반환)
-     */
-    private String extractRefreshTokenFromCookie(HttpServletRequest request){
-        if (request.getCookies() == null) return null;
-
-        for(Cookie cookie : request.getCookies()) {
-            if (cookie.getName().equals("refreshToken")) {
-                return cookie.getValue();
-            }
-        }
-        return null;
-    }
-}
-
diff --git a/back/src/main/java/com/realive/controller/customer/MemberController.java b/back/src/main/java/com/realive/controller/customer/MemberController.java
index 7d94d829..fc8922f0 100644
--- a/back/src/main/java/com/realive/controller/customer/MemberController.java
+++ b/back/src/main/java/com/realive/controller/customer/MemberController.java
@@ -1,6 +1,5 @@
 package com.realive.controller.customer;
 
-import org.springframework.http.HttpStatus;
 import org.springframework.http.ResponseEntity;
 import org.springframework.security.core.Authentication;
 import org.springframework.security.core.annotation.AuthenticationPrincipal;
@@ -13,9 +12,12 @@ import org.springframework.web.bind.annotation.RestController;
 
 import com.realive.dto.customer.member.MemberJoinDTO;
 import com.realive.dto.customer.member.MemberLoginDTO;
+import com.realive.dto.customer.member.MemberModifyDTO;
 import com.realive.dto.customer.member.MemberReadDTO;
+import com.realive.exception.UnauthorizedException;
 import com.realive.service.customer.MemberService;
 
+import jakarta.validation.Valid;
 import lombok.RequiredArgsConstructor;
 import lombok.extern.log4j.Log4j2;
 
@@ -29,10 +31,10 @@ public class MemberController {
 
     private final MemberService memberService;
 
-    // 임시회원: 소셜 로그인 후 임시 회원 회원으로 전환
+    // 임시회원: 소셜 로그인 후 임시회원으로 전회원을 회원으로 전환
     @PutMapping("/update-info")
     public ResponseEntity<?> updateTemporaryUserInfo(
-            @RequestBody MemberJoinDTO request,
+            @RequestBody @Valid MemberJoinDTO request,
             Authentication authentication) {
 
         log.info("updateTemporaryUserInfo 호출됨");
@@ -41,19 +43,13 @@ public class MemberController {
         // 로그인 사용자 이메일 가져오기
         String currentEmail = authentication.getName();
 
-        // 이메일이 요청과 다르면 권한 문제일 수 있음 (보안 검증)
+         // 권한 검증: 본인만 수정 가능
         if (!currentEmail.equals(request.getEmail())) {
-            return ResponseEntity.status(HttpStatus.FORBIDDEN)
-                .body("본인의 정보만 수정할 수 있습니다.");
-        }
-
-        try {
-            memberService.updateTemporaryUserInfo(request, currentEmail);
-            return ResponseEntity.ok("회원정보가 정상적으로 수정되었습니다.");
-        } catch (Exception e) {
-            return ResponseEntity.status(HttpStatus.BAD_REQUEST)
-                .body("회원정보 수정 중 오류가 발생했습니다.");
+            throw new UnauthorizedException("본인의 정보만 수정할 수 있습니다.");
         }
+        
+        memberService.updateTemporaryUserInfo(request, currentEmail);
+        return ResponseEntity.ok("회원정보가 정상적으로 수정되었습니다.");
     }
 
     // 회원정보조회
@@ -67,7 +63,7 @@ public class MemberController {
     // 회원정보수정
     @PutMapping("/me")
     public ResponseEntity<?> updateMyInfo(@AuthenticationPrincipal MemberLoginDTO loginDTO,
-                                          @RequestBody MemberReadDTO updateDTO) {
+                                          @RequestBody @Valid MemberModifyDTO updateDTO) {
         memberService.updateMember(loginDTO.getEmail(), updateDTO);
         return ResponseEntity.ok().build();
     }
diff --git a/back/src/main/java/com/realive/controller/customer/QnaController.java b/back/src/main/java/com/realive/controller/customer/QnaController.java
index 62ca5522..68fd510b 100644
--- a/back/src/main/java/com/realive/controller/customer/QnaController.java
+++ b/back/src/main/java/com/realive/controller/customer/QnaController.java
@@ -14,10 +14,10 @@ import org.springframework.web.bind.annotation.RestController;
 import org.springframework.web.bind.annotation.GetMapping;
 
 import com.realive.dto.customer.qna.CustomerQnaRequestDTO;
-import com.realive.dto.customer.qna.QnaListDTO;
 import com.realive.service.customer.CustomerQnaService;
 import com.realive.service.customer.CustomerService;
 
+import jakarta.validation.Valid;
 import lombok.RequiredArgsConstructor;
 import lombok.extern.log4j.Log4j2;
 
@@ -35,7 +35,7 @@ public class QnaController{
     // 고객 상품 문의하기 (상품 요약 정보 포함)
     @PostMapping
     public ResponseEntity<?> customerQna(Authentication authentication,
-                                            @RequestBody CustomerQnaRequestDTO requestDTO) {
+                                            @RequestBody @Valid CustomerQnaRequestDTO requestDTO) {
         String email = authentication.getName();
         Long customerId = customerService.findIdByEmail(email);
         requestDTO.setCustomerId(customerId);
@@ -67,15 +67,5 @@ public class QnaController{
         
         return ResponseEntity.ok(detail);
     }
-
-    // 상품 Q&A 목록 조회
-    @GetMapping("/{productId}")
-    public ResponseEntity<List<QnaListDTO>> getProductQnaList(@PathVariable("productId") Long productId, 
-                                                    Authentication authentication){
-
-        List<QnaListDTO> qnaLists = customerQnaService.listProductQnaWith(productId);
-        return ResponseEntity.ok(qnaLists); 
-
-    }
  
 }
diff --git a/back/src/main/java/com/realive/controller/order/OrderController.java b/back/src/main/java/com/realive/controller/order/OrderController.java
deleted file mode 100644
index 8e6bc1d9..00000000
--- a/back/src/main/java/com/realive/controller/order/OrderController.java
+++ /dev/null
@@ -1,129 +0,0 @@
-package com.realive.controller.order;
-
-import com.realive.dto.order.*;
-import com.realive.service.order.OrderService;
-import lombok.RequiredArgsConstructor;
-import lombok.extern.log4j.Log4j2;
-import org.springframework.data.domain.Page;
-import org.springframework.data.domain.Pageable;
-import org.springframework.data.domain.Sort;
-import org.springframework.data.web.PageableDefault;
-import org.springframework.http.HttpStatus;
-import org.springframework.http.ResponseEntity;
-import org.springframework.web.bind.annotation.*;
-
-import java.util.NoSuchElementException;
-
-// JWT/OAuth2를 통한 사용자 인증이 구현되어 있다면,
-// @AuthenticationPrincipal 또는 SecurityContextHolder를 통해 customerId를 가져올 수 있습니다.
-
-
-@RestController
-@RequestMapping("/api/orders")
-@RequiredArgsConstructor
-@Log4j2
-public class OrderController {
-
-    private final OrderService orderService;
-
-    /**
-     * 주문 생성 및 결제 처리 (통합)
-     * POST /api/orders/pay
-     * @param payRequestDTO 결제 및 주문 생성 요청 DTO
-     * @return 생성된 주문의 ID (Long)
-     */
-    @PostMapping("/payment")
-    public ResponseEntity<Long> processPayment(@RequestBody PayRequestDTO payRequestDTO) {
-        log.info("결제 및 주문 생성 요청 수신: {}", payRequestDTO);
-        Long orderId = orderService.processPayment(payRequestDTO);
-        log.info("주문이 성공적으로 생성되었습니다. 주문 ID: {}", orderId);
-        return new ResponseEntity<>(orderId, HttpStatus.CREATED); // 201 Created
-    }
-
-    /**
-     * 특정 주문 상세 조회
-     * GET /api/orders/{orderId}?customerId={customerId} (또는 인증 정보 사용)
-     * @param orderId 조회할 주문 ID
-     * @param customerId 주문 소유자 고객 ID (인증 정보에서 가져오는 것이 권장됨)
-     * @return OrderResponseDTO
-     */
-    @GetMapping("/{orderId}")
-    public ResponseEntity<OrderResponseDTO> getOrder(@PathVariable Long orderId,
-                                                     @RequestParam Long customerId) { // 실제 앱에서는 @AuthenticationPrincipal CustomerDetails customerrId 등을 사용
-        log.info("주문 상세 조회 요청 수신: 주문 ID {}, 고객 ID {}", orderId, customerId);
-        OrderResponseDTO order = orderService.getOrder(orderId, customerId);
-        return new ResponseEntity<>(order, HttpStatus.OK); // 200 OK
-    }
-
-    /**
-     * 주문 목록 조회 (페이징 지원)
-     * GET /api/orders?page=0&size=10&sort=orderedAt,desc
-     * @param pageable 페이징 정보 (페이지 번호, 페이지 크기, 정렬 기준)
-     * @return Page<OrderResponseDTO>
-     */
-    @GetMapping
-    public ResponseEntity<Page<OrderResponseDTO>> getOrderList(
-            @PageableDefault(sort = "orderedAt", direction = Sort.Direction.DESC) Pageable pageable) {
-        log.info("주문 목록 조회 요청 수신: 페이지 {}, 크기 {}, 정렬 {}", pageable.getPageNumber(), pageable.getPageSize(), pageable.getSort());
-        Page<OrderResponseDTO> orderList = orderService.getOrderList(pageable);
-        return new ResponseEntity<>(orderList, HttpStatus.OK); // 200 OK
-    }
-
-    /**
-     * 주문 취소
-     * POST /api/orders/cancel
-     * @param orderCancelRequestDTO 취소할 주문 정보 (orderId, customerId, reason)
-     * @return 응답 없음 (204 No Content)
-     */
-    @PostMapping("/cancel")
-    public ResponseEntity<Void> cancelOrder(@RequestBody OrderCancelRequestDTO orderCancelRequestDTO) {
-        log.info("주문 취소 요청 수신: {}", orderCancelRequestDTO);
-        orderService.cancelOrder(orderCancelRequestDTO);
-        log.info("주문 취소 처리 완료: 주문 ID {}", orderCancelRequestDTO.getOrderId());
-        return new ResponseEntity<>(HttpStatus.NO_CONTENT); // 204 No Content
-    }
-
-    /**
-     * 구매 확정
-     * POST /api/orders/confirm
-     * @param orderConfirmRequestDTO 구매 확정할 주문 정보 (orderId, customerId)
-     * @return 응답 없음 (204 No Content)
-     */
-    @PostMapping("/confirm")
-    public ResponseEntity<Void> confirmOrder(@RequestBody OrderConfirmRequestDTO orderConfirmRequestDTO) {
-        log.info("구매 확정 요청 수신: {}", orderConfirmRequestDTO);
-        orderService.confirmOrder(orderConfirmRequestDTO);
-        log.info("구매 확정 처리 완료: 주문 ID {}", orderConfirmRequestDTO.getOrderId());
-        return new ResponseEntity<>(HttpStatus.NO_CONTENT); // 204 No Content
-    }
-
-    /**
-     * 주문 삭제
-     * DELETE /api/orders
-     * @param orderDeleteRequestDTO 삭제할 주문 정보 (orderId, customerId)
-     * @return 응답 없음 (204 No Content)
-     */
-    @DeleteMapping
-    public ResponseEntity<Void> deleteOrder(@RequestBody OrderDeleteRequestDTO orderDeleteRequestDTO) {
-        log.info("주문 삭제 요청 수신: {}", orderDeleteRequestDTO);
-        orderService.deleteOrder(orderDeleteRequestDTO);
-        log.info("주문 삭제 처리 완료: 주문 ID {}", orderDeleteRequestDTO.getOrderId());
-        return new ResponseEntity<>(HttpStatus.NO_CONTENT); // 204 No Content
-    }
-
-    // 예외 처리 (선택 사항이지만 권장)
-    // @ControllerAdvice 또는 각 Controller 내부에 @ExceptionHandler를 사용하여 예외를 처리할 수 있습니다.
-    @ExceptionHandler({IllegalArgumentException.class, NoSuchElementException.class, IllegalStateException.class})
-    public ResponseEntity<String> handleOrderExceptions(RuntimeException ex) {
-        log.error("주문 처리 중 예외 발생: {}", ex.getMessage());
-        // 각 예외 타입에 따라 다른 HTTP 상태 코드를 반환할 수 있습니다.
-        if (ex instanceof IllegalArgumentException) {
-            return new ResponseEntity<>(ex.getMessage(), HttpStatus.BAD_REQUEST); // 400 Bad Request
-        } else if (ex instanceof NoSuchElementException) {
-            return new ResponseEntity<>(ex.getMessage(), HttpStatus.NOT_FOUND); // 404 Not Found
-        } else if (ex instanceof IllegalStateException) {
-            return new ResponseEntity<>(ex.getMessage(), HttpStatus.CONFLICT); // 409 Conflict (비즈니스 로직 위반)
-        }
-        return new ResponseEntity<>("알 수 없는 서버 오류가 발생했습니다.", HttpStatus.INTERNAL_SERVER_ERROR); // 500 Internal Server Error
-    }
-}
\ No newline at end of file
diff --git a/back/src/main/java/com/realive/controller/product/ProductController.java b/back/src/main/java/com/realive/controller/product/ProductController.java
deleted file mode 100644
index 93f0999f..00000000
--- a/back/src/main/java/com/realive/controller/product/ProductController.java
+++ /dev/null
@@ -1,76 +0,0 @@
-package com.realive.controller.product;
-
-import com.realive.dto.product.ProductRequestDTO;
-import com.realive.dto.product.ProductResponseDTO;
-import com.realive.dto.product.ProductSearchCondition;
-import com.realive.domain.seller.Seller;
-import com.realive.dto.page.PageResponseDTO;
-import com.realive.dto.product.ProductListDTO;
-import com.realive.service.product.ProductService;
-import jakarta.validation.Valid;
-import lombok.RequiredArgsConstructor;
-import org.springframework.http.ResponseEntity;
-import org.springframework.security.core.Authentication;
-import org.springframework.security.core.context.SecurityContextHolder;
-import org.springframework.web.bind.annotation.*;
-import org.springframework.http.MediaType;
-
-@RestController
-@RequiredArgsConstructor
-@RequestMapping("/api/seller/products")
-public class ProductController {
-
-    private final ProductService productService;
-
-    // 🔽 상품 등록
-    @PostMapping(consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
-    public ResponseEntity<Long> createProduct(@Valid @ModelAttribute ProductRequestDTO dto) {
-        Seller seller = (Seller) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
-        Long sellerId = seller.getId();
-
-        Long id = productService.createProduct(dto, sellerId);
-        return ResponseEntity.ok(id);
-    }
-
-    // 🔽 상품 수정
-    @PutMapping(value = "/{id}", consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
-    public ResponseEntity<Void> updateProduct(@PathVariable Long id, @ModelAttribute ProductRequestDTO dto) {
-        Seller seller = (Seller) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
-        Long sellerId = seller.getId();
-
-        productService.updateProduct(id, dto, sellerId);
-        return ResponseEntity.ok().build();
-    }
-
-    // 🔽 상품 삭제
-    @DeleteMapping("/{id}")
-    public ResponseEntity<Void> deleteProduct(@PathVariable Long id) {
-        Seller seller = (Seller) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
-        Long sellerId = seller.getId();
-
-        productService.deleteProduct(id, sellerId);
-        return ResponseEntity.ok().build();
-    }
-
-    // 🔽 상품 목록 조회 (판매자 전용)
-    @GetMapping
-    public ResponseEntity<PageResponseDTO<ProductListDTO>> getMyProducts(
-            @ModelAttribute ProductSearchCondition condition) {
-        
-        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
-        String email = auth.getName();
-
-        PageResponseDTO<ProductListDTO> response = productService.getProductsBySeller(email, condition);
-
-        return ResponseEntity.ok(response);
-    }
-
-    // 🔽 단일 상품 상세 조회 (공개 API 가능)
-    @GetMapping("/{id}")
-    public ResponseEntity<ProductResponseDTO> getProductDetail(@PathVariable Long id) {
-        ProductResponseDTO dto = productService.getProductDetail(id);
-        return ResponseEntity.ok(dto);
-    }
-
-    
-}
\ No newline at end of file
diff --git a/back/src/main/java/com/realive/controller/public_api/LoginController.java b/back/src/main/java/com/realive/controller/public_api/LoginController.java
index a9b8b18f..9f2ffbfe 100644
--- a/back/src/main/java/com/realive/controller/public_api/LoginController.java
+++ b/back/src/main/java/com/realive/controller/public_api/LoginController.java
@@ -19,6 +19,7 @@ import com.realive.security.customer.JwtResponse;
 import com.realive.security.customer.JwtTokenProvider;
 import com.realive.service.customer.MemberService;
 
+import jakarta.validation.Valid;
 import lombok.RequiredArgsConstructor;
 import lombok.extern.log4j.Log4j2;
 
@@ -37,7 +38,7 @@ public class LoginController {
     
     // 일반 로그인
     @PostMapping("/login")
-    public ResponseEntity<?> login(@RequestBody MemberLoginDTO dto) {
+    public ResponseEntity<?> login(@RequestBody @Valid MemberLoginDTO dto) {
         Authentication authentication = authenticationManager.authenticate(
             new UsernamePasswordAuthenticationToken(dto.getUsername(), dto.getPassword())
         );
@@ -49,21 +50,13 @@ public class LoginController {
 
     // 일반 회원가입
     @PostMapping("/join")
-    public ResponseEntity<?> registerMember(@RequestBody MemberJoinDTO dto) {
-        try {
-            String token = memberService.register(dto);
-            // 가입 직후 자동 로그인용 JWT 토큰을 반환할 수도 있고, 단순 메시지를 줄 수도 있습니다.
-            return ResponseEntity
-                    .status(HttpStatus.CREATED)
-                    .body(Map.of(
-                        "message", "회원가입 성공",
-                        "token", token
-                    ));
-        } catch (IllegalArgumentException e) {
-            return ResponseEntity
-                    .status(HttpStatus.BAD_REQUEST)
-                    .body(Map.of("error", e.getMessage()));
-        }
+    public ResponseEntity<?> registerMember(@RequestBody @Valid MemberJoinDTO dto) {
+        String token = memberService.register(dto);
+        return ResponseEntity.status(HttpStatus.CREATED)
+                .body(Map.of(
+                    "message", "회원가입 성공",
+                    "token", token
+                ));
     }
 
 }
diff --git a/back/src/main/java/com/realive/controller/public_api/ProductViewController.java b/back/src/main/java/com/realive/controller/public_api/ProductViewController.java
index da34912c..e38e9841 100644
--- a/back/src/main/java/com/realive/controller/public_api/ProductViewController.java
+++ b/back/src/main/java/com/realive/controller/public_api/ProductViewController.java
@@ -1,5 +1,7 @@
 package com.realive.controller.public_api;
 
+import java.util.List;
+
 import org.springframework.http.ResponseEntity;
 import org.springframework.web.bind.annotation.GetMapping;
 import org.springframework.web.bind.annotation.ModelAttribute;
@@ -8,10 +10,12 @@ import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RequestParam;
 import org.springframework.web.bind.annotation.RestController;
 
+import com.realive.dto.customer.qna.QnaListDTO;
 import com.realive.dto.page.PageRequestDTO;
 import com.realive.dto.page.PageResponseDTO;
 import com.realive.dto.product.ProductListDTO;
 import com.realive.dto.product.ProductResponseDTO;
+import com.realive.service.customer.CustomerQnaService;
 import com.realive.service.customer.ProductViewService;
 
 import lombok.RequiredArgsConstructor;
@@ -26,6 +30,7 @@ import lombok.extern.log4j.Log4j2;
 public class ProductViewController {
 
     private final ProductViewService productViewService;
+    private final CustomerQnaService customerQnaService;
 
     // 상품 목록 조회 with 검색
     @GetMapping
@@ -42,8 +47,18 @@ public class ProductViewController {
     // 상품 상세 조회
     @GetMapping("/{id}")
     public ResponseEntity<ProductResponseDTO> getProductDetail(@PathVariable("id") Long id) {
+        
         ProductResponseDTO productDetail = productViewService.getProductDetail(id);
         return ResponseEntity.ok(productDetail);
     }
+
+    // 상품 Q&A 목록 조회
+    @GetMapping("/qna/{productId}")
+    public ResponseEntity<List<QnaListDTO>> getProductQnaList(@PathVariable("productId") Long productId){
+
+        List<QnaListDTO> qnaLists = customerQnaService.listProductQnaWith(productId);
+        return ResponseEntity.ok(qnaLists); 
+
+    }
     
 }
diff --git a/back/src/main/java/com/realive/controller/review/ReviewController.java b/back/src/main/java/com/realive/controller/review/ReviewController.java
deleted file mode 100644
index 005dbc42..00000000
--- a/back/src/main/java/com/realive/controller/review/ReviewController.java
+++ /dev/null
@@ -1,81 +0,0 @@
-package com.realive.controller.review;
-
-import com.realive.dto.review.*;
-import com.realive.service.review.crud.ReviewCRUDService;
-import com.realive.service.review.view.ReviewViewService;
-import jakarta.validation.Valid;
-import jakarta.validation.groups.ConvertGroup;
-import lombok.RequiredArgsConstructor;
-import lombok.extern.log4j.Log4j2;
-import org.springframework.data.domain.Page;
-import org.springframework.data.domain.Pageable;
-import org.springframework.http.ResponseEntity;
-import org.springframework.web.bind.annotation.*;
-
-@RestController
-@RequestMapping("/api/reviews")
-@Log4j2
-@RequiredArgsConstructor
-public class ReviewController {
-
-    private final ReviewCRUDService reviewCRUDService;
-    private final ReviewViewService reviewViewService;
-
-    // 리뷰 생성
-    @PostMapping
-    public ResponseEntity<ReviewResponseDTO> createReview(
-            @Valid @ConvertGroup(to = ReviewCreateRequestDTO.CreateValidation.class) @RequestBody ReviewCreateRequestDTO requestDTO
-    ) {
-        // customerId를 요청 DTO에서 직접 가져와 사용합니다. (현재 시스템 제약사항 고려)
-        ReviewResponseDTO response = reviewCRUDService.createReview(requestDTO, requestDTO.getCustomerId());
-        return ResponseEntity.ok(response);
-    }
-
-    // 리뷰 수정
-    @PutMapping("/{reviewId}")
-    public ResponseEntity<ReviewResponseDTO> updateReview(
-            @PathVariable Long reviewId,
-            @Valid @RequestBody ReviewUpdateRequestDTO requestDTO
-    ) {
-        // customerId를 요청 DTO에서 직접 가져와 사용합니다. (현재 시스템 제약사항 고려)
-        ReviewResponseDTO response = reviewCRUDService.updateReview(reviewId, requestDTO, requestDTO.getCustomerId());
-        return ResponseEntity.ok(response);
-    }
-
-    // 리뷰 삭제
-    @DeleteMapping("/{reviewId}")
-    public ResponseEntity<Void> deleteReview(
-            @PathVariable Long reviewId,
-            @RequestParam Long customerId // customerId를 쿼리 파라미터로 받습니다. (현재 시스템 제약사항 고려)
-    ) {
-        reviewCRUDService.deleteReview(reviewId, customerId);
-        return ResponseEntity.noContent().build();
-    }
-
-
-    // 판매자의 판매품 리뷰 리스트 조회 (경로 변경 및 반환 타입 변경)
-    // 기존 /{sellerId} 경로가 상세 조회와 중복되므로, 더 명확한 경로로 변경합니다.
-    @GetMapping("/seller/{sellerId}")
-    public ResponseEntity<ReviewListResponseDTO> getReviews(@PathVariable Long sellerId, Pageable pageable) {
-        // ReviewViewService에서 반환하는 ReviewListResponseDTO 타입과 일치시킵니다.
-        ReviewListResponseDTO result = reviewViewService.getReviewList(sellerId, pageable);
-        return ResponseEntity.ok(result);
-    }
-
-    // 리뷰 상세 조회 (경로 유지)
-    // 이 경로는 단일 리뷰 ID를 통해 상세 정보를 조회합니다.
-    @GetMapping("/{id}")
-    public ResponseEntity<ReviewResponseDTO> getReviewDetail(@PathVariable Long id) {
-        ReviewResponseDTO result = reviewViewService.getReviewDetail(id);
-        return ResponseEntity.ok(result);
-    }
-
-    // 내가 작성한 리뷰 조회 (반환 타입 변경)
-    // ReviewViewService에서 Page<MyReviewResponseDTO>를 반환하도록 변경했으므로, 이에 맞춥니다.
-    @GetMapping("/my")
-    public ResponseEntity<Page<MyReviewResponseDTO>> getMyReviews(@RequestParam Long customerId, Pageable pageable) {
-        log.info("Fetching my reviews for customerId: {}", customerId);
-        Page<MyReviewResponseDTO> result = reviewViewService.getMyReviewList(customerId, pageable);
-        return ResponseEntity.ok(result);
-    }
-}
\ No newline at end of file
diff --git a/back/src/main/java/com/realive/controller/seller/OrderDeliveryController.java b/back/src/main/java/com/realive/controller/seller/OrderDeliveryController.java
deleted file mode 100644
index 83db4373..00000000
--- a/back/src/main/java/com/realive/controller/seller/OrderDeliveryController.java
+++ /dev/null
@@ -1,61 +0,0 @@
-// package com.realive.controller.seller;
-
-// import com.realive.domain.seller.Seller;
-// import com.realive.dto.order.DeliveryStatusUpdateDTO;
-// import com.realive.dto.order.OrderDeliveryResponseDTO;
-// import com.realive.service.order.OrderDeliveryService;
-// import lombok.RequiredArgsConstructor;
-
-// import java.util.List;
-
-// import org.springframework.http.ResponseEntity;
-// import org.springframework.security.core.context.SecurityContextHolder;
-// import org.springframework.web.bind.annotation.*;
-
-
-// @RestController
-// @RequiredArgsConstructor
-// @RequestMapping("/api/seller/orders")
-// public class OrderDeliveryController {
-
-//     private final OrderDeliveryService orderDeliveryService;
-
-//     //리스트 조회
-//     @GetMapping
-//     public ResponseEntity<List<OrderDeliveryResponseDTO>> getDeliveriesBySeller() {
-//     // 🔐 로그인한 판매자 정보 가져오기
-//     Seller seller = (Seller) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
-//     Long sellerId = seller.getId();
-
-//     // 📦 서비스 호출
-//     List<OrderDeliveryResponseDTO> result = orderDeliveryService.getDeliveriesBySeller(sellerId);
-//     return ResponseEntity.ok(result);
-// }
-
-//     // PATCH /api/seller/orders/{orderId}/delivery
-//     @PatchMapping("/{orderId}/delivery")
-//     public ResponseEntity<Void> updateDeliveryStatus(
-//             @PathVariable Long orderId,
-//             @RequestBody DeliveryStatusUpdateDTO dto) {
-
-//         // ✅ 현재 로그인한 판매자 꺼내기
-//         Seller seller = (Seller) SecurityContextHolder.getContext()
-//                 .getAuthentication().getPrincipal();
-//         Long sellerId = seller.getId();
-
-//         // ✅ sellerId 포함해서 서비스 호출
-//         orderDeliveryService.updateDeliveryStatus(sellerId, orderId, dto);
-
-//         return ResponseEntity.ok().build();
-//     }
-//     // 배송 단건 조회 컨트롤러
-//     @GetMapping("/{orderId}/delivery")
-//     public ResponseEntity<OrderDeliveryResponseDTO> getDeliveryByOrderId(@PathVariable Long orderId) {
-
-//         Seller seller = (Seller) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
-//         OrderDeliveryResponseDTO result = orderDeliveryService.getDeliveryByOrderId(seller.getId(), orderId);
-
-//         return ResponseEntity.ok(result);
-//     }
-    
-// }
diff --git a/back/src/main/java/com/realive/controller/seller/SellerController.java b/back/src/main/java/com/realive/controller/seller/SellerController.java
deleted file mode 100644
index 8a769e3b..00000000
--- a/back/src/main/java/com/realive/controller/seller/SellerController.java
+++ /dev/null
@@ -1,113 +0,0 @@
-package com.realive.controller.seller;
-
-import java.time.Duration;
-
-
-import org.springframework.http.ResponseCookie;
-import org.springframework.http.ResponseEntity;
-import org.springframework.security.core.Authentication;
-import org.springframework.security.core.context.SecurityContextHolder;
-import org.springframework.web.bind.annotation.RequestBody;
-import org.springframework.web.bind.annotation.RequestMapping;
-import org.springframework.web.bind.annotation.RequestPart;
-import org.springframework.web.bind.annotation.RestController;
-import org.springframework.web.multipart.MultipartFile;
-
-import com.realive.domain.seller.Seller;
-import com.realive.dto.seller.SellerLoginRequestDTO;
-import com.realive.dto.seller.SellerLoginResponseDTO;
-import com.realive.dto.seller.SellerResponseDTO;
-import com.realive.dto.seller.SellerSignupDTO;
-import com.realive.dto.seller.SellerUpdateDTO;
-import com.realive.security.JwtUtil;
-import com.realive.service.seller.SellerService;
-
-import jakarta.servlet.http.HttpServletResponse;
-import jakarta.validation.Valid;
-import lombok.RequiredArgsConstructor;
-
-import org.springframework.web.bind.annotation.PostMapping;
-import org.springframework.web.bind.annotation.GetMapping;
-import org.springframework.web.bind.annotation.PutMapping;
-
-
-
-@RestController
-@RequestMapping("/api/seller")
-@RequiredArgsConstructor
-public class SellerController {
-
-    private final SellerService sellerService;
-    private final JwtUtil jwtUtil;
-   
-    
- // 🔐 로그인 (토큰 발급)
-    @PostMapping("/login")
-    public ResponseEntity<SellerLoginResponseDTO> login(@RequestBody SellerLoginRequestDTO reqdto, HttpServletResponse response) {
-        SellerLoginResponseDTO resdto = sellerService.login(reqdto);
-       
-        Seller seller = sellerService.getByEmail(reqdto.getEmail());
-        String refreshToken = jwtUtil.generateRefreshToken(seller);
-
-        ResponseCookie refreshCookie = ResponseCookie.from("refreshToken", refreshToken)
-                .httpOnly(true)
-                .secure(true)
-                .sameSite("none")
-                .path("/")
-                .maxAge(Duration.ofDays(7))
-                .build();
-        
-        response.setHeader("Set-Cookie", refreshCookie.toString());
-        
-        return ResponseEntity.ok(resdto);
-    }
-    //로그아웃(토큰덮어쓰기)
-    @PostMapping("/logout")
-    public ResponseEntity<Void> logout(HttpServletResponse response) {
-        
-        ResponseCookie deleteCookie = ResponseCookie.from("refreshToken","")
-                .httpOnly(true)
-                .secure(true)
-                .sameSite("None")
-                .path("/")
-                .maxAge(0)
-                .build();
-        
-        response.setHeader("Set-Cookie", deleteCookie.toString());
-        
-        return ResponseEntity.noContent().build();
-    }
-    
-
-    // 📝 회원가입
-    @PostMapping("/signup")
-    public ResponseEntity<Void> signup(
-            @RequestPart @Valid SellerSignupDTO dto,
-            @RequestPart MultipartFile businessLicense,
-            @RequestPart MultipartFile bankAccountCopy) {
-
-        sellerService.registerSeller(dto, businessLicense, bankAccountCopy);
-        return ResponseEntity.ok().build();
-    }
-
-    // 🔄 판매자 정보 수정
-    @PutMapping("/me")
-    public ResponseEntity<Void> updateSeller(
-            @RequestBody @Valid SellerUpdateDTO dto) {
-        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
-        String email = auth.getName();
-
-        sellerService.updateSeller(email, dto);
-        return ResponseEntity.ok().build();
-    }
-
-    // 🙋‍♀️ 마이페이지 조회 (판매자 정보 )
-    @GetMapping("/me")
-    public ResponseEntity<SellerResponseDTO> getMyInfo() {
-        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
-        String email = auth.getName();
-
-        SellerResponseDTO dto = sellerService.getMyInfo(email);
-        return ResponseEntity.ok(dto);
-    }
-}
diff --git a/back/src/main/java/com/realive/controller/seller/SellerQnaController.java b/back/src/main/java/com/realive/controller/seller/SellerQnaController.java
deleted file mode 100644
index 819fbf87..00000000
--- a/back/src/main/java/com/realive/controller/seller/SellerQnaController.java
+++ /dev/null
@@ -1,41 +0,0 @@
-package com.realive.controller.seller;
-
-
-import com.realive.dto.seller.SellerQnaAnswerRequestDTO;
-import com.realive.dto.seller.SellerQnaResponseDTO;
-import com.realive.service.seller.SellerQnaService;
-import lombok.RequiredArgsConstructor;
-import org.springframework.data.domain.*;
-import org.springframework.data.web.PageableDefault;
-import org.springframework.http.ResponseEntity;
-import org.springframework.security.core.context.SecurityContextHolder;
-import org.springframework.web.bind.annotation.*;
-
-@RestController
-@RequiredArgsConstructor
-@RequestMapping("/api/seller/qna")
-public class SellerQnaController {
-
-    private final SellerQnaService sellerQnaService;
-
-    // QnA 목록 조회
-    @GetMapping
-    public ResponseEntity<Page<SellerQnaResponseDTO>> getQnaList(
-            @PageableDefault(size = 10, sort = "createdAt", direction = Sort.Direction.DESC) Pageable pageable) {
-
-        String email = SecurityContextHolder.getContext().getAuthentication().getName();
-        Page<SellerQnaResponseDTO> qnaList = sellerQnaService.getQnaListByEmail(email, pageable);
-        return ResponseEntity.ok(qnaList);
-    }
-
-    // QnA 답변 작성/수정
-    @PatchMapping("/{qnaId}/answer")
-    public ResponseEntity<Void> answerQna(
-            @PathVariable Long qnaId,
-            @RequestBody SellerQnaAnswerRequestDTO dto) {
-
-        String email = SecurityContextHolder.getContext().getAuthentication().getName();
-        sellerQnaService.answerQnaByEmail(email, qnaId, dto);
-        return ResponseEntity.ok().build();
-    }
-}
\ No newline at end of file
diff --git a/back/src/main/java/com/realive/dto/customer/member/MemberJoinDTO.java b/back/src/main/java/com/realive/dto/customer/member/MemberJoinDTO.java
index 23e3f1b0..80e45bb7 100644
--- a/back/src/main/java/com/realive/dto/customer/member/MemberJoinDTO.java
+++ b/back/src/main/java/com/realive/dto/customer/member/MemberJoinDTO.java
@@ -2,29 +2,42 @@ package com.realive.dto.customer.member;
 
 import java.time.LocalDate;
 import com.realive.domain.customer.Gender;
+
+import jakarta.validation.constraints.Email;
+import jakarta.validation.constraints.NotBlank;
+import jakarta.validation.constraints.NotNull;
+import jakarta.validation.constraints.Pattern;
 import lombok.Data;
-import lombok.Setter;
 
 // [Customer] 회원가입DTO
 
 @Data
-@Setter
 public class MemberJoinDTO {
 
+    @NotBlank(message = "이메일을 입력해주세요.")
+    @Email(message = "이메일 형식을 확인해주세요.")
     private String email;
 
+    @NotBlank(message = "비밀번호를 입력해주세요.")
+    @Pattern(
+        regexp = "^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$",
+        message = "비밀번호는 영문자와 숫자를 포함하여 8자 이상이어야 합니다."
+    )
     private String password;
 
+    @NotBlank(message = "이름을 입력해주세요.")
     private String name;
 
+    @NotBlank(message = "핸드폰 번호를 입력해주세요.")
     private String phone;
 
+    @NotBlank(message = "주소를 입력해주세요.")
     private String address;
 
+    @NotNull(message = "생일을 입력해주세요.")
     private LocalDate birth;
 
+    @NotNull(message = "성별을 입력해주세요.")
     private Gender gender; 
 
-    private LocalDate created; // 가입일자
-    
 }
diff --git a/back/src/main/java/com/realive/dto/customer/member/MemberLoginDTO.java b/back/src/main/java/com/realive/dto/customer/member/MemberLoginDTO.java
index 61111cf2..8af683b6 100644
--- a/back/src/main/java/com/realive/dto/customer/member/MemberLoginDTO.java
+++ b/back/src/main/java/com/realive/dto/customer/member/MemberLoginDTO.java
@@ -10,6 +10,8 @@ import org.springframework.security.oauth2.core.user.OAuth2User;
 
 import com.realive.domain.customer.SignupMethod;
 
+import jakarta.validation.constraints.NotBlank;
+
 import java.util.*;
 
 // [Customer] 로그인DTO
@@ -17,10 +19,15 @@ import java.util.*;
 @Data
 public class MemberLoginDTO implements UserDetails, OAuth2User {
 
+    @NotBlank(message = "이메일을 입력해주세요.")
     private String email;
+
+    @NotBlank(message = "비밀번호를 입력해주세요.")
     @ToString.Exclude
     private String password;
+
     private SignupMethod signupMethod; 
+    
     // OAuth2 attributes (nullable)
     private Map<String, Object> attributes;
 
diff --git a/back/src/main/java/com/realive/dto/customer/member/MemberModifyDTO.java b/back/src/main/java/com/realive/dto/customer/member/MemberModifyDTO.java
index 19e9522f..95109251 100644
--- a/back/src/main/java/com/realive/dto/customer/member/MemberModifyDTO.java
+++ b/back/src/main/java/com/realive/dto/customer/member/MemberModifyDTO.java
@@ -2,23 +2,30 @@ package com.realive.dto.customer.member;
 
 import java.time.LocalDate;
 
+import jakarta.validation.constraints.Email;
+import jakarta.validation.constraints.NotBlank;
+import jakarta.validation.constraints.NotNull;
 import lombok.Data;
 
 // [Customer] 회원정보 수정DTO 
 
 @Data
 public class MemberModifyDTO {
-    
-    private Long id;
 
+    @NotBlank(message = "이름을 입력해주세요.")
     private String name;
 
+    @NotBlank(message = "이메일을 입력해주세요.")
+    @Email(message = "이메일 형식을 확인해주세요.")
     private String email;
 
+    @NotBlank(message = "핸드폰 번호를 입력해주세요.")
     private String phone;
 
+    @NotBlank(message = "주소를 입력해주세요.")
     private String address;
 
+    @NotNull(message = "생일을 입력해주세요.")
     private LocalDate birth;
     
 }
diff --git a/back/src/main/java/com/realive/dto/customer/qna/CustomerQnaRequestDTO.java b/back/src/main/java/com/realive/dto/customer/qna/CustomerQnaRequestDTO.java
index ee3057ce..044e63ed 100644
--- a/back/src/main/java/com/realive/dto/customer/qna/CustomerQnaRequestDTO.java
+++ b/back/src/main/java/com/realive/dto/customer/qna/CustomerQnaRequestDTO.java
@@ -1,5 +1,7 @@
 package com.realive.dto.customer.qna;
 
+import jakarta.validation.constraints.NotBlank;
+import jakarta.validation.constraints.Size;
 import lombok.AllArgsConstructor;
 import lombok.Builder;
 import lombok.Data;
@@ -14,9 +16,16 @@ import lombok.NoArgsConstructor;
 
 public class CustomerQnaRequestDTO {
 
+    @NotBlank(message = "제목은 비어 있을 수 없습니다.")
+    @Size(max = 100, message = "제목은 최대 100자까지 입력할 수 있습니다.")
     private String title;
+
+    @NotBlank(message = "내용은 비어 있을 수 없습니다.")
+    @Size(max = 1000, message = "제목은 최대 1000자까지 입력할 수 있습니다.")
     private String content;
+
     private Long productId;
+    
     private Long customerId;
 
 }
diff --git a/back/src/main/java/com/realive/dto/error/ErrorResponse.java b/back/src/main/java/com/realive/dto/error/ErrorResponse.java
index b0df60e3..aa1e710b 100644
--- a/back/src/main/java/com/realive/dto/error/ErrorResponse.java
+++ b/back/src/main/java/com/realive/dto/error/ErrorResponse.java
@@ -1,5 +1,7 @@
 package com.realive.dto.error;
 
+import java.util.Map;
+
 import lombok.AllArgsConstructor;
 import lombok.Builder;
 import lombok.Getter;
@@ -25,4 +27,7 @@ public class ErrorResponse {
 
     /** 에러 메시지 (예: "Invalid request", "User not found" 등) */
     private String message;
+
+    
+
 }
\ No newline at end of file
diff --git a/back/src/main/java/com/realive/exception/DuplicateEmailException.java b/back/src/main/java/com/realive/exception/DuplicateEmailException.java
new file mode 100644
index 00000000..f7856424
--- /dev/null
+++ b/back/src/main/java/com/realive/exception/DuplicateEmailException.java
@@ -0,0 +1,10 @@
+package com.realive.exception;
+
+// 커스텀 예외처리: 이메일 중복
+
+public class DuplicateEmailException extends RuntimeException {
+    
+    public DuplicateEmailException(String message) {
+        super(message);
+    }
+}
diff --git a/back/src/main/java/com/realive/exception/GlobalExceptionHandler.java b/back/src/main/java/com/realive/exception/GlobalExceptionHandler.java
index 6d7f6e30..0496082c 100644
--- a/back/src/main/java/com/realive/exception/GlobalExceptionHandler.java
+++ b/back/src/main/java/com/realive/exception/GlobalExceptionHandler.java
@@ -1,17 +1,24 @@
 package com.realive.exception;
 
+import java.util.stream.Collectors;
+
+import org.springframework.context.support.DefaultMessageSourceResolvable;
 import org.springframework.http.HttpStatus;
 import org.springframework.http.ResponseEntity;
+import org.springframework.web.bind.MethodArgumentNotValidException;
 import org.springframework.web.bind.annotation.ExceptionHandler;
 import org.springframework.web.bind.annotation.RestControllerAdvice;
 
 import com.realive.dto.error.ErrorResponse;
 
+import jakarta.persistence.EntityNotFoundException;
+
 @RestControllerAdvice
 public class GlobalExceptionHandler {
 
 
-    //인풋 에러 처리하는 코드
+    // 인풋 에러 처리하는 코드
+    // HTTP 400 (Bad Request) 
     @ExceptionHandler(IllegalArgumentException.class)
     public ResponseEntity<ErrorResponse> handleIllegalArgument(IllegalArgumentException e){
         return ResponseEntity
@@ -23,6 +30,8 @@ public class GlobalExceptionHandler {
                 .build());
     }
 
+    // 인증되지 않은 요청
+    // HTTP 401
     @ExceptionHandler(UnauthorizedException.class)
     public ResponseEntity<ErrorResponse> handleUnauthorized(UnauthorizedException e) {
         return ResponseEntity
@@ -35,7 +44,8 @@ public class GlobalExceptionHandler {
     }
 
 
-    //서버 에러 처리하는 코드
+    // 서버 에러 처리하는 코드
+    // HTTP 500 
     @ExceptionHandler(Exception.class)
     public ResponseEntity<ErrorResponse> handleGeneralException(Exception e){
         return ResponseEntity
@@ -46,7 +56,43 @@ public class GlobalExceptionHandler {
                 .message("서버 오류가 발생했습니다")
                 .build());
     }
+
+    // 엔티티를 못 찾았을 때 던지는 EntityNotFoundException을 처리
+    // HTTP 404 (Not Found)
+    @ExceptionHandler(EntityNotFoundException.class)
+    public ResponseEntity<ErrorResponse> handleNotFound(EntityNotFoundException e) {
+        return ResponseEntity.status(HttpStatus.NOT_FOUND)
+            .body(ErrorResponse.builder()
+                .status(404)
+                .code("NOT_FOUND")
+                .message(e.getMessage())
+                .build());
+    }
+
+    // 이메일 중복(커스텀)
+    // HTTP 400 (Bad Request)
+    @ExceptionHandler(DuplicateEmailException.class)
+    public ResponseEntity<ErrorResponse> handleDuplicateEmail(DuplicateEmailException e) {
+        return ResponseEntity.status(HttpStatus.BAD_REQUEST)
+            .body(ErrorResponse.builder()
+                .status(400)
+                .code("EMAIL_DUPLICATE")
+                .message(e.getMessage())
+                .build());
+    }
+
+    // 유효성 검사 처리용
+    @ExceptionHandler(MethodArgumentNotValidException.class)
+    public ResponseEntity<ErrorResponse> handleValidationExceptions(MethodArgumentNotValidException ex) {
+        String errorMessage = ex.getBindingResult().getAllErrors().stream()
+                                .map(DefaultMessageSourceResolvable::getDefaultMessage)
+                                .collect(Collectors.joining(", "));
+        return ResponseEntity.badRequest()
+                .body(ErrorResponse.builder()
+                    .status(HttpStatus.BAD_REQUEST.value())
+                    .code("VALIDATION_FAILED")
+                    .message(errorMessage)
+                    .build());
+    }
             
-                
-    
 }
diff --git a/back/src/main/java/com/realive/repository/order/OrderDeliveryRepository.java b/back/src/main/java/com/realive/repository/order/OrderDeliveryRepository.java
deleted file mode 100644
index 4671077c..00000000
--- a/back/src/main/java/com/realive/repository/order/OrderDeliveryRepository.java
+++ /dev/null
@@ -1,18 +0,0 @@
-package com.realive.repository.order;
-
-import com.realive.domain.order.Order;
-import com.realive.domain.order.OrderDelivery;
-import org.springframework.data.jpa.repository.JpaRepository;
-import org.springframework.data.jpa.repository.Query;
-import org.springframework.stereotype.Repository;
-
-import java.util.List;
-import java.util.Optional;
-
-@Repository
-public interface OrderDeliveryRepository extends JpaRepository<OrderDelivery, Long> {
-    Optional<OrderDelivery> findByOrder(Order order);
-
-    @Query("SELECT od FROM OrderDelivery od JOIN FETCH od.order WHERE od.order IN :orders")
-    List<OrderDelivery> findByOrderIn(List<Order> orders);
-}
\ No newline at end of file
diff --git a/back/src/main/java/com/realive/repository/order/OrderItemRepository.java b/back/src/main/java/com/realive/repository/order/OrderItemRepository.java
deleted file mode 100644
index e83aa82b..00000000
--- a/back/src/main/java/com/realive/repository/order/OrderItemRepository.java
+++ /dev/null
@@ -1,18 +0,0 @@
-package com.realive.repository.order;
-
-import com.realive.domain.order.OrderItem;
-import org.springframework.data.jpa.repository.JpaRepository;
-import org.springframework.data.jpa.repository.Query;
-import org.springframework.stereotype.Repository;
-
-import java.util.List;
-
-@Repository
-public interface OrderItemRepository extends JpaRepository<OrderItem, Long> {
-   //단일 주문 id로 주문 상품 전체 조회 + product 정보 포함
-    @Query("SELECT oi FROM OrderItem oi JOIN FETCH oi.product WHERE oi.order.id = :orderId")
-    List<OrderItem> findByOrderId(Long orderId);
-    // 다수 주문 id로 주문 상품 전체 조회 + product 정보 포함S
-    @Query("SELECT oi FROM OrderItem oi JOIN FETCH oi.product WHERE oi.order.id IN :orderIds")
-    List<OrderItem> findByOrderIdIn(List<Long> orderIds);
-}
\ No newline at end of file
diff --git a/back/src/main/java/com/realive/repository/order/OrderRepository.java b/back/src/main/java/com/realive/repository/order/OrderRepository.java
deleted file mode 100644
index 2173f2b2..00000000
--- a/back/src/main/java/com/realive/repository/order/OrderRepository.java
+++ /dev/null
@@ -1,19 +0,0 @@
-package com.realive.repository.order;
-
-import com.realive.domain.order.Order;
-import org.springframework.data.domain.Page;
-import org.springframework.data.domain.Pageable;
-import org.springframework.data.jpa.repository.JpaRepository;
-import org.springframework.data.jpa.repository.Query;
-import org.springframework.stereotype.Repository;
-
-import java.util.Optional;
-
-@Repository
-public interface OrderRepository extends JpaRepository<Order, Long> {
-    Optional<Order> findByCustomer_IdAndId(Long customerId, Long id);
-
-    @Query(value = "SELECT o FROM Order o JOIN FETCH o.customer ORDER BY o.OrderedAt DESC",
-            countQuery = "SELECT count(o) FROM Order o")
-    Page<Order> findAllOrders(Pageable pageable);
-}
\ No newline at end of file
diff --git a/back/src/main/java/com/realive/repository/order/SellerOrderDeliveryRepository.java b/back/src/main/java/com/realive/repository/order/SellerOrderDeliveryRepository.java
deleted file mode 100644
index 32eef2aa..00000000
--- a/back/src/main/java/com/realive/repository/order/SellerOrderDeliveryRepository.java
+++ /dev/null
@@ -1,22 +0,0 @@
-package com.realive.repository.order;
-
-import com.realive.domain.order.OrderDelivery;
-import org.springframework.data.jpa.repository.JpaRepository;
-import org.springframework.data.jpa.repository.Query;
-import org.springframework.data.repository.query.Param;
-
-import java.util.List;
-import java.util.Optional;
-
-public interface SellerOrderDeliveryRepository extends JpaRepository<OrderDelivery, Long> {
-
-    // ✅ 주문 ID를 기준으로 배송 정보를 조회
-    Optional<OrderDelivery> findByOrderId(Long orderId);
-
-    // ✅ 판매자 기준 배송 목록 (이미 있는 메서드)
-    @Query("SELECT d FROM OrderDelivery d " +
-            "JOIN d.order o " +
-            "JOIN o.product p " +
-            "WHERE p.seller.id = :sellerId")
-    List<OrderDelivery> findAllBySellerId(@Param("sellerId") Long sellerId);
-}
\ No newline at end of file
diff --git a/back/src/main/java/com/realive/repository/order/SellerOrderRepository.java b/back/src/main/java/com/realive/repository/order/SellerOrderRepository.java
deleted file mode 100644
index 2d14efe3..00000000
--- a/back/src/main/java/com/realive/repository/order/SellerOrderRepository.java
+++ /dev/null
@@ -1,31 +0,0 @@
-package com.realive.repository.order;
-
-import com.realive.domain.order.Order;
-import com.realive.domain.product.Product;
-import org.springframework.data.domain.Page;
-import org.springframework.data.domain.Pageable;
-import org.springframework.data.jpa.repository.JpaRepository;
-import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
-import org.springframework.data.jpa.repository.Query;
-import org.springframework.data.repository.query.Param;
-import org.springframework.stereotype.Repository;
-
-import java.util.List;
-
-@Repository
-public interface SellerOrderRepository extends JpaRepository<Order, Long>, JpaSpecificationExecutor<Order> {
-
-    Page<Order> findByProductId(Long productId, Pageable pageable);
-
-    long countByProductId(Long productId);
-
-    @Query("SELECT o FROM Order o WHERE o.product.seller.id = :sellerId")
-    Page<Order> findByProductSellerId(@Param("sellerId") Long sellerId, Pageable pageable);
-
-    @Query("SELECT COUNT(o.id) FROM Order o WHERE o.product.seller.id = :sellerId")
-    long countByProductSellerId(@Param("sellerId") Long sellerId);
-
-    @Query("SELECT o.product FROM Order o GROUP BY o.product.id ORDER BY COUNT(o.product.id) DESC")
-    List<Product> findTopOrderedProducts(Pageable pageable);
-
-}
\ No newline at end of file
diff --git a/back/src/main/java/com/realive/repository/seller/SellerDocumentRepository.java b/back/src/main/java/com/realive/repository/seller/SellerDocumentRepository.java
deleted file mode 100644
index 4b89ad93..00000000
--- a/back/src/main/java/com/realive/repository/seller/SellerDocumentRepository.java
+++ /dev/null
@@ -1,24 +0,0 @@
-package com.realive.repository.seller;
-
-import org.springframework.data.jpa.repository.JpaRepository;
-
-import com.realive.domain.common.enums.SellerFileType;
-import com.realive.domain.seller.SellerDocument;
-
-/**
- * SellerDocumentRepository
- * - 판매자 서류(SellerDocument) 관련 JPA Repository 인터페이스
- * - 기본적인 CRUD 기능 제공
- * - 판매자의 특정 파일 유형 존재 여부 확인 메서드 포함
- */
-public interface SellerDocumentRepository extends JpaRepository<SellerDocument, Long> {
-
-    /**
-     * 특정 판매자의 특정 파일 유형이 존재하는지 확인
-     *
-     * @param sellerId  판매자 ID
-     * @param fileType  파일 유형 (예: 사업자등록증, 통장사본 등)
-     * @return          해당 조합의 데이터 존재 여부
-     */
-    boolean existsBySellerIdAndFileType(Long sellerId, SellerFileType fileType);
-}
\ No newline at end of file
diff --git a/back/src/main/java/com/realive/repository/seller/SellerQnaRepository.java b/back/src/main/java/com/realive/repository/seller/SellerQnaRepository.java
deleted file mode 100644
index e6827f7d..00000000
--- a/back/src/main/java/com/realive/repository/seller/SellerQnaRepository.java
+++ /dev/null
@@ -1,21 +0,0 @@
-package com.realive.repository.seller;
-
-import com.realive.domain.seller.SellerQna;
-import org.springframework.data.domain.Page;
-import org.springframework.data.domain.Pageable;
-import org.springframework.data.jpa.repository.JpaRepository;
-
-public interface SellerQnaRepository extends JpaRepository<SellerQna, Long> {
-
-    /**
-     * 삭제되지 않은 QnA만 조회 (isActive = true)
-     * - 판매자 마이페이지 등에서 사용
-     */
-    Page<SellerQna> findBySellerIdAndIsActiveTrue(Long sellerId, Pageable pageable);
-
-    /**
-     * 삭제 여부와 관계없이 전체 QnA 조회 (관리자 등)
-     * - 필요 시 유지 가능
-     */
-    Page<SellerQna> findBySellerId(Long sellerId, Pageable pageable);
-}
\ No newline at end of file
diff --git a/back/src/main/java/com/realive/repository/seller/SellerRepository.java b/back/src/main/java/com/realive/repository/seller/SellerRepository.java
deleted file mode 100644
index 294df2da..00000000
--- a/back/src/main/java/com/realive/repository/seller/SellerRepository.java
+++ /dev/null
@@ -1,19 +0,0 @@
-package com.realive.repository.seller;
-
-import java.util.List;
-import java.util.Optional;
-
-import org.springframework.data.jpa.repository.JpaRepository;
-
-import com.realive.domain.seller.Seller;
-import com.realive.repository.common.EmailLookupRepository;
-
-public interface SellerRepository extends JpaRepository<Seller,Long>, EmailLookupRepository<Seller> {
-
-    boolean existsByEmail(String email); //email 중복검사
-    boolean existsByName(String name); //이름 중복검사
-    Optional<Seller> findByEmailAndIsActiveTrue(String email); //로그인용(소프트삭제)
-    Optional<Seller> findByEmail(String email);
-    List<Seller> findByIsApprovedTrueAndIsActiveTrue(); // 승인된 업체 조회
-
-}
\ No newline at end of file
diff --git a/back/src/main/java/com/realive/security/AdminDetailsService.java b/back/src/main/java/com/realive/security/AdminDetailsService.java
deleted file mode 100644
index f9c53242..00000000
--- a/back/src/main/java/com/realive/security/AdminDetailsService.java
+++ /dev/null
@@ -1,24 +0,0 @@
-package com.realive.security;
-
-import com.realive.domain.admin.Admin;
-import com.realive.repository.admin.AdminRepository;
-import lombok.RequiredArgsConstructor;
-import org.springframework.security.core.userdetails.UserDetails;
-import org.springframework.security.core.userdetails.UserDetailsService;
-import org.springframework.security.core.userdetails.UsernameNotFoundException;
-import org.springframework.stereotype.Service;
-
-
-@Service
-@RequiredArgsConstructor
-public class AdminDetailsService implements UserDetailsService {
-
-    private final AdminRepository adminRepository;
-
-    @Override
-    public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {
-        Admin admin = adminRepository.findByEmail(email)
-                .orElseThrow(() -> new UsernameNotFoundException("관리자를 찾을 수 없습니다: " + email));
-        return new AdminPrincipal(admin);
-    }
-}
\ No newline at end of file
diff --git a/back/src/main/java/com/realive/security/AdminJwtAuthenticationFilter.java b/back/src/main/java/com/realive/security/AdminJwtAuthenticationFilter.java
deleted file mode 100644
index 64fc4181..00000000
--- a/back/src/main/java/com/realive/security/AdminJwtAuthenticationFilter.java
+++ /dev/null
@@ -1,64 +0,0 @@
-package com.realive.security;
-
-import com.realive.domain.admin.Admin;
-import com.realive.service.admin.AdminService;
-import jakarta.servlet.FilterChain;
-import jakarta.servlet.ServletException;
-import jakarta.servlet.http.HttpServletRequest;
-import jakarta.servlet.http.HttpServletResponse;
-import lombok.RequiredArgsConstructor;
-import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
-import org.springframework.security.core.authority.SimpleGrantedAuthority;
-import org.springframework.security.core.context.SecurityContextHolder;
-import org.springframework.web.filter.OncePerRequestFilter;
-
-import java.io.IOException;
-import java.util.List;
-
-@RequiredArgsConstructor
-public class AdminJwtAuthenticationFilter extends OncePerRequestFilter {
-
-    private final JwtUtil jwtUtil;
-    private final AdminService adminService;
-
-    @Override
-    protected void doFilterInternal(HttpServletRequest request,
-                                    HttpServletResponse response,
-                                    FilterChain filterChain)
-            throws ServletException, IOException {
-
-        String authHeader = request.getHeader("Authorization");
-
-        if (authHeader != null && authHeader.startsWith("Bearer ")) {
-            String token = authHeader.substring(7);
-
-            if (jwtUtil.validateToken(token)) {
-                String email = jwtUtil.getEmailFromToken(token);
-
-                // 반드시 Admin 엔티티를 가져와서 AdminPrincipal 생성
-                Admin adminEntity = adminService.findAdminEntityByEmail(email).orElse(null);
-
-                if (adminEntity != null) {
-                    AdminPrincipal adminPrincipal = new AdminPrincipal(adminEntity);
-
-                    UsernamePasswordAuthenticationToken auth =
-                            new UsernamePasswordAuthenticationToken(
-                                    adminPrincipal,
-                                    null,
-                                    List.of(new SimpleGrantedAuthority("ROLE_ADMIN"))
-                            );
-                    SecurityContextHolder.getContext().setAuthentication(auth);
-                }
-            }
-        }
-
-        filterChain.doFilter(request, response);
-    }
-
-    @Override
-    protected boolean shouldNotFilter(HttpServletRequest request) {
-        // /api/admin으로 시작하지 않으면 필터 동작 안 함
-        return !request.getRequestURI().startsWith("/api/admin");
-    }
-
-}
\ No newline at end of file
diff --git a/back/src/main/java/com/realive/security/AdminPrincipal.java b/back/src/main/java/com/realive/security/AdminPrincipal.java
deleted file mode 100644
index aef206ec..00000000
--- a/back/src/main/java/com/realive/security/AdminPrincipal.java
+++ /dev/null
@@ -1,47 +0,0 @@
-package com.realive.security;
-
-import com.realive.domain.admin.Admin;
-import lombok.RequiredArgsConstructor;
-import org.springframework.security.core.GrantedAuthority;
-import org.springframework.security.core.authority.SimpleGrantedAuthority;
-import org.springframework.security.core.userdetails.UserDetails;
-
-import java.util.Collection;
-import java.util.List;
-
-@RequiredArgsConstructor
-public class AdminPrincipal implements UserDetails {
-
-    private final Admin admin;
-
-    @Override
-    public Collection<? extends GrantedAuthority> getAuthorities() {
-        return List.of(new SimpleGrantedAuthority("ROLE_ADMIN"));
-    }
-
-    @Override
-    public String getPassword() {
-        return admin.getPassword();
-    }
-
-    @Override
-    public String getUsername() {
-        return admin.getEmail();
-    }
-
-    @Override
-    public boolean isAccountNonExpired() { return true; }
-
-    @Override
-    public boolean isAccountNonLocked() { return true; }
-
-    @Override
-    public boolean isCredentialsNonExpired() { return true; }
-
-    @Override
-    public boolean isEnabled() { return true; }
-
-    public Admin getAdmin() {
-        return this.admin;
-    }
-}
\ No newline at end of file
diff --git a/back/src/main/java/com/realive/security/JwtAuthenticationFilter.java b/back/src/main/java/com/realive/security/JwtAuthenticationFilter.java
deleted file mode 100644
index 8f5ac1d2..00000000
--- a/back/src/main/java/com/realive/security/JwtAuthenticationFilter.java
+++ /dev/null
@@ -1,71 +0,0 @@
-package com.realive.security;
-
-import java.io.IOException;
-
-import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
-import org.springframework.security.core.context.SecurityContextHolder;
-import org.springframework.stereotype.Component;
-import org.springframework.web.filter.OncePerRequestFilter;
-
-import com.realive.domain.seller.Seller;
-import com.realive.repository.seller.SellerRepository;
-
-import io.jsonwebtoken.Claims;
-import jakarta.servlet.FilterChain;
-import jakarta.servlet.ServletException;
-import jakarta.servlet.http.HttpServletRequest;
-import jakarta.servlet.http.HttpServletResponse;
-import lombok.RequiredArgsConstructor;
-
-/**
- * JwtAuthenticationFilter
- * - 매 요청마다 실행되는 JWT 인증 필터
- * - 요청 헤더에서 JWT 토큰을 추출하고 유효성을 검증
- * - 유효한 경우, 인증 정보를 Spring Security Context에 등록
- */
-@Component
-@RequiredArgsConstructor
-public class JwtAuthenticationFilter extends OncePerRequestFilter {
-
-    private final JwtUtil jwtUtil; // JWT 유틸리티 클래스
-    private final SellerRepository sellerRepository; // 판매자 정보 조회용 리포지토리
-
-    @Override
-    protected void doFilterInternal(HttpServletRequest request,
-                                    HttpServletResponse response,
-                                    FilterChain filterChain)
-            throws ServletException, IOException {
-
-        // 1. 요청 헤더에서 Authorization 정보 추출
-        String authHeader = request.getHeader("Authorization");
-
-        // 2. "Bearer "로 시작하는 경우에만 처리
-        if (authHeader != null && authHeader.startsWith("Bearer ")) {
-            String token = authHeader.substring(7); // "Bearer " 제거한 JWT 토큰
-
-            // 3. JWT 유효성 검증
-            if (jwtUtil.validateToken(token)) {
-                Claims claims = jwtUtil.getClaims(token); // 토큰에서 클레임 추출
-                Long sellerId = claims.get("id", Long.class); // seller ID 추출
-
-                // 4. 데이터베이스에서 판매자 조회
-                Seller seller = sellerRepository.findById(sellerId)
-                        .orElse(null);
-
-                // 5. 판매자가 존재하면 인증 객체 생성 및 등록
-                if (seller != null) {
-                    UsernamePasswordAuthenticationToken authentication =
-                            new UsernamePasswordAuthenticationToken(
-                                    seller, null, null); // 권한은 null 처리
-
-                    // SecurityContext에 인증 정보 설정
-                    SecurityContextHolder.getContext()
-                            .setAuthentication(authentication);
-                }
-            }
-        }
-
-        // 6. 다음 필터 체인으로 전달
-        filterChain.doFilter(request, response);
-    }
-}
\ No newline at end of file
diff --git a/back/src/main/java/com/realive/security/JwtUtil.java b/back/src/main/java/com/realive/security/JwtUtil.java
deleted file mode 100644
index 92663ceb..00000000
--- a/back/src/main/java/com/realive/security/JwtUtil.java
+++ /dev/null
@@ -1,138 +0,0 @@
-package com.realive.security;
-
-import java.security.Key;
-import java.util.Date;
-
-import org.springframework.beans.factory.annotation.Value;
-import org.springframework.stereotype.Component;
-
-import com.realive.domain.seller.Seller;
-import com.realive.domain.admin.Admin;
-
-import io.jsonwebtoken.*;
-import io.jsonwebtoken.security.Keys;
-import jakarta.annotation.PostConstruct;
-import jakarta.servlet.http.HttpServletRequest;
-
-@Component
-public class JwtUtil {
-
-    public static final String BEARER_PREFIX = "Bearer ";             // 인증 헤더 접두사
-    public static final String SUBJECT_SELLER = "seller";             // 판매자 액세스 토큰 subject
-    public static final String SUBJECT_SELLER_REFRESH = "seller_refresh"; // 판매자 리프레시 토큰 subject
-    public static final String SUBJECT_ADMIN = "admin";               // 관리자 액세스 토큰 subject
-    public static final String SUBJECT_ADMIN_REFRESH = "admin_refresh";   // 관리자 리프레시 토큰 subject
-
-    @Value("${jwt.secret}")
-    private String secretKey;
-
-    @Value("${jwt.expiration}")
-    private long expiration;
-
-    private Key key;
-
-    @PostConstruct
-    public void init() {
-        this.key = Keys.hmacShaKeyFor(secretKey.getBytes());
-    }
-
-    /**
-     * JWT 토큰 생성
-     *
-     * @param subject  토큰 주제 (판매자/관리자 구분용)
-     * @param id       사용자 식별자
-     * @param email    이메일 (액세스 토큰에만 포함)
-     * @param duration 토큰 만료 기간 (밀리초)
-     * @return 생성된 JWT 토큰 문자열
-     */
-    private String generateToken(String subject, Long id, String email, long duration) {
-        JwtBuilder builder = Jwts.builder()
-                .setSubject(subject)
-                .claim("id", id)
-                .setIssuedAt(new Date())
-                .setExpiration(new Date(System.currentTimeMillis() + duration));
-
-        if (email != null) {
-            builder.claim("email", email);
-        }
-
-        return builder
-                .signWith(key, SignatureAlgorithm.HS256)
-                .compact();
-    }
-
-    // 판매자 access 토큰 생성
-    public String generateAccessToken(Seller seller) {
-        return generateToken(SUBJECT_SELLER, seller.getId(), seller.getEmail(), expiration);
-    }
-
-    // 판매자 refresh 토큰 생성
-    public String generateRefreshToken(Seller seller) {
-        long refreshDuration = expiration * 24 * 7;  // 7일간 유효
-        return generateToken(SUBJECT_SELLER_REFRESH, seller.getId(), null, refreshDuration);
-    }
-
-
-    // 관리자 access 토큰 생성
-    public String generateAccessToken(Admin admin) {
-        return generateToken(SUBJECT_ADMIN, Long.valueOf(admin.getId()), admin.getEmail(), expiration);
-    }
-
-    // 관리자 refresh 토큰 생성
-    public String generateRefreshToken(Admin admin) {
-        long refreshDuration = expiration * 24 * 7;  // 7일간 유효
-        return generateToken(SUBJECT_ADMIN_REFRESH, Long.valueOf(admin.getId()), null, refreshDuration);
-    }
-
-    // 토큰 검증
-    public boolean validateToken(String token) {
-        try {
-            Jwts.parserBuilder()
-                    .setSigningKey(key)
-                    .build()
-                    .parseClaimsJws(token);
-            return true;
-        } catch (JwtException | IllegalArgumentException e) {
-            return false;
-        }
-    }
-
-    // 토큰에서 claims 추출
-    public Claims getClaims(String token) {
-        try {
-            return Jwts.parserBuilder()
-                    .setSigningKey(key)
-                    .build()
-                    .parseClaimsJws(token)
-                    .getBody();
-        } catch (ExpiredJwtException e) {
-            // 만료된 토큰도 클레임은 꺼낼 수 있음
-            return e.getClaims();
-        }
-    }
-
-    // 토큰 만료 여부
-    public boolean isTokenExpired(String token) {
-        Date expirationDate = getClaims(token).getExpiration();
-        return expirationDate.before(new Date());
-    }
-
-    // 토큰에서 id 추출
-    public Long getUserIdFromToken(String token) {
-        return getClaims(token).get("id", Long.class);
-    }
-    // 토큰에서 email 추출
-    public String getEmailFromToken(String token) {
-        return getClaims(token).get("email", String.class);
-    }
-
-
-    // HTTP 요청 헤더에서 토큰 추출
-    public String resolveToken(HttpServletRequest request) {
-        String bearer = request.getHeader("Authorization");
-        if (bearer != null && bearer.startsWith(BEARER_PREFIX)) {
-            return bearer.substring(BEARER_PREFIX.length());
-        }
-        return null;
-    }
-}
diff --git a/back/src/main/java/com/realive/service/admin/AdminService.java b/back/src/main/java/com/realive/service/admin/AdminService.java
deleted file mode 100644
index 6bfb5374..00000000
--- a/back/src/main/java/com/realive/service/admin/AdminService.java
+++ /dev/null
@@ -1,17 +0,0 @@
-package com.realive.service.admin;
-
-import com.realive.domain.admin.Admin;
-import com.realive.dto.admin.*;
-import java.util.Optional;
-
-public interface AdminService {
-
-    AdminLoginResponseDTO login(AdminLoginRequestDTO loginRequestDto);
-
-    AdminLoginResponseDTO getMyInfo(Integer adminId);
-
-    Optional<AdminReadDTO> findByEmail(String email);
-
-    Optional<Admin> findAdminEntityByEmail(String email);
-
-}
diff --git a/back/src/main/java/com/realive/service/admin/AdminServiceImpl.java b/back/src/main/java/com/realive/service/admin/AdminServiceImpl.java
deleted file mode 100644
index 40bd6fd3..00000000
--- a/back/src/main/java/com/realive/service/admin/AdminServiceImpl.java
+++ /dev/null
@@ -1,96 +0,0 @@
-package com.realive.service.admin;
-
-import com.realive.domain.admin.Admin;
-import com.realive.dto.admin.AdminLoginRequestDTO;
-import com.realive.dto.admin.AdminLoginResponseDTO;
-import com.realive.dto.admin.AdminReadDTO;
-import com.realive.exception.UnauthorizedException;
-import com.realive.repository.admin.AdminRepository;
-import com.realive.security.JwtUtil;
-import lombok.RequiredArgsConstructor;
-import org.springframework.security.crypto.password.PasswordEncoder;
-import org.springframework.stereotype.Service;
-import org.springframework.transaction.annotation.Transactional;
-
-import java.util.Optional;
-
-@Service
-@RequiredArgsConstructor
-public class AdminServiceImpl implements AdminService {
-
-    private final AdminRepository adminRepository;
-    private final PasswordEncoder passwordEncoder;
-    private final JwtUtil jwtUtil; // Admin용 토큰 생성 메소드가 있는 JwtUtil 주입
-
-    @Override
-    @Transactional(readOnly = true)
-    public AdminLoginResponseDTO login(AdminLoginRequestDTO loginRequestDto) {
-        if (loginRequestDto.getEmail() == null || loginRequestDto.getEmail().trim().isEmpty() ||
-                loginRequestDto.getPassword() == null || loginRequestDto.getPassword().isEmpty()) {
-            throw new IllegalArgumentException("이메일과 비밀번호를 모두 입력해주세요.");
-        }
-
-        Admin admin = adminRepository.findByEmail(loginRequestDto.getEmail())
-                .orElseThrow(() -> new UnauthorizedException("사용자를 찾을 수 없거나 인증 정보가 잘못되었습니다."));
-
-        if (!passwordEncoder.matches(loginRequestDto.getPassword(), admin.getPassword())) {
-            throw new UnauthorizedException("비밀번호가 일치하지 않습니다.");
-        }
-
-        // Admin 객체를 위한 토큰 생성 메소드 호출
-        String accessToken = jwtUtil.generateAccessToken(admin);
-        String refreshToken = jwtUtil.generateRefreshToken(admin);
-
-        return AdminLoginResponseDTO.builder()
-                .accessToken(accessToken)
-                .refreshToken(refreshToken)
-                .name(admin.getName())
-                .message("로그인 성공")
-                .build();
-    }
-
-    @Override
-    @Transactional(readOnly = true)
-    public AdminLoginResponseDTO getMyInfo(Integer adminId) {
-        if (adminId == null) {
-            throw new IllegalArgumentException("관리자 ID가 유효하지 않습니다.");
-        }
-        Admin admin = adminRepository.findById(adminId)
-                .orElseThrow(() -> new UnauthorizedException("사용자를 찾을 수 없습니다."));
-
-        return AdminLoginResponseDTO.builder()
-                .accessToken(null) // 마이페이지 조회 시 토큰 재발급 필요 없으면 null
-                .refreshToken(null)
-                .name(admin.getName())
-                .message("관리자 정보 조회 성공")
-                .build();
-    }
-
-    @Override
-    @Transactional(readOnly = true)
-    public Optional<AdminReadDTO> findByEmail(String email) {
-        if (email == null || email.trim().isEmpty()) {
-            throw new IllegalArgumentException("이메일이 유효하지 않습니다.");
-        }
-        return adminRepository.findByEmail(email)
-                .map(this::convertToReadDTO);
-    }
-
-    @Override
-    @Transactional(readOnly = true)
-    public Optional<Admin> findAdminEntityByEmail(String email) {
-        if (email == null || email.trim().isEmpty()) {
-            return Optional.empty();
-        }
-        return adminRepository.findByEmail(email);
-    }
-
-    private AdminReadDTO convertToReadDTO(Admin admin) {
-        return AdminReadDTO.builder()
-                .id(admin.getId())
-                .email(admin.getEmail())
-                .name(admin.getName())
-                .createdAt(admin.getCreatedAt())
-                .build();
-    }
-}
\ No newline at end of file
diff --git a/back/src/main/java/com/realive/service/admin/approval/SellerApprovalService.java b/back/src/main/java/com/realive/service/admin/approval/SellerApprovalService.java
deleted file mode 100644
index 46265f62..00000000
--- a/back/src/main/java/com/realive/service/admin/approval/SellerApprovalService.java
+++ /dev/null
@@ -1,34 +0,0 @@
-package com.realive.service.admin.approval;
-
-
-import com.realive.dto.admin.approval.PendingSellerDTO; // 새로 만든 DTO 사용
-import com.realive.dto.seller.SellerResponseDTO; // 승인/거부 결과 응답용 (또는 PendingSellerDTO 재활용 가능)
-
-import java.util.List;
-
-public interface SellerApprovalService {
-
-    /**
-     * 승인 대기 중인 판매자 목록을 조회합니다.
-     * (isApproved == false AND approvedAt == null)
-     */
-    List<PendingSellerDTO> getPendingApprovalSellers();
-
-    /**
-     * 관리자가 판매자에 대해 승인 또는 거부 처리를 합니다.
-     *
-     * @param sellerId 처리할 판매자의 ID
-     * @param approve  true이면 승인, false이면 거부
-     * @param approvingAdminId 처리한 관리자의 ID (로깅용)
-     * @return 처리 결과 (승인/거부된 판매자 정보 DTO)
-     * @throws java.util.NoSuchElementException 해당 sellerId의 판매자가 없을 경우
-     * @throws IllegalStateException 이미 처리된(approvedAt이 null이 아닌) 판매자를 다시 처리하려 할 경우 등
-     */
-    SellerResponseDTO processSellerDecision(Long sellerId, boolean approve, Integer approvingAdminId);
-    // 반환 타입을 SellerResponseDTO로 할지, 아니면 PendingSellerDTO와 유사한 '처리 결과 DTO'를 새로 만들지 고민 필요.
-    // 여기서는 SellerResponseDTO를 재활용하여 isApproved 상태를 명확히 보여주는 것으로 가정.
-
-    // 승인된 전체 판매자 리스트
-    List<SellerResponseDTO> getApprovedSellers();
-
-}
diff --git a/back/src/main/java/com/realive/service/admin/auction/AuctionService.java b/back/src/main/java/com/realive/service/admin/auction/AuctionService.java
deleted file mode 100644
index 77fd96da..00000000
--- a/back/src/main/java/com/realive/service/admin/auction/AuctionService.java
+++ /dev/null
@@ -1,52 +0,0 @@
-package com.realive.service.admin.auction;
-
-import com.realive.dto.auction.AuctionCreateRequestDTO;
-import com.realive.dto.auction.AuctionResponseDTO;
-import org.springframework.data.domain.Page;
-import org.springframework.data.domain.Pageable;
-import java.util.NoSuchElementException;
-import java.util.Optional;
-
-public interface AuctionService {
-
-    /**
-     * (관리자에 의해) 새로운 경매를 등록합니다.
-     *
-     * @param requestDto 경매 생성 요청 정보를 담은 DTO
-     * @param adminUserId 경매를 등록하는 관리자의 ID (인증된 관리자로부터 가져옴)
-     * @return 등록된 경매 정보를 담은 DTO
-     * @throws NoSuchElementException 상품을 찾을 수 없을 경우
-     * @throws IllegalStateException 이미 해당 상품으로 진행 중인 경매가 있거나, 상품 상태가 부적절할 경우
-     * @throws org.springframework.security.access.AccessDeniedException 관리자가 해당 작업을 수행할 권한이 없을 경우
-     */
-    AuctionResponseDTO registerAuction(AuctionCreateRequestDTO requestDto, Long adminUserId); // 파라미터명 변경: sellerUserId -> adminUserId
-
-    /**
-     * (관리자가) 현재 진행 중인 경매 목록을 페이징하여 조회합니다.
-     * (이하 주석 동일)
-     */
-    Page<AuctionResponseDTO> getActiveAuctions(Pageable pageable, String categoryFilter, String statusFilter);
-
-    /**
-     * (관리자가) 특정 경매의 상세 정보를 조회합니다.
-     * (이하 주석 동일)
-     */
-    AuctionResponseDTO getAuctionDetails(Integer auctionId);
-
-    /**
-     * (관리자가) 특정 판매자가 등록한 경매 목록을 페이징하여 조회합니다.
-     * @param sellerId 조회 대상 판매자 ID
-     * @param pageable 페이징 정보
-     * @return 해당 판매자의 경매 목록 Page 객체
-     */
-    Page<AuctionResponseDTO> getAuctionsBySeller(Long sellerId, Pageable pageable);
-
-    /**
-     * (관리자가) 특정 상품 ID에 대해 현재 진행 중인 경매를 조회합니다.
-     * (상품 하나당 하나의 활성 경매만 있다고 가정)
-     * @param productId 상품 ID
-     * @return 진행 중인 경매 정보 Optional 객체
-     */
-    Optional<AuctionResponseDTO> getCurrentAuctionForProduct(Integer productId);
-
-}
diff --git a/back/src/main/java/com/realive/service/admin/auction/BidService.java b/back/src/main/java/com/realive/service/admin/auction/BidService.java
deleted file mode 100644
index ffe02527..00000000
--- a/back/src/main/java/com/realive/service/admin/auction/BidService.java
+++ /dev/null
@@ -1,41 +0,0 @@
-package com.realive.service.admin.auction;
-
-
-import com.realive.dto.bid.BidRequestDTO;
-import com.realive.dto.bid.BidResponseDTO;
-import org.springframework.data.domain.Page;
-import org.springframework.data.domain.Pageable;
-import java.util.NoSuchElementException;
-
-public interface BidService {
-
-    /**
-     * 새로운 입찰을 등록합니다.
-     *
-     * @param requestDto 입찰 요청 정보를 담은 DTO
-     * @param customerId 입찰하는 고객의 ID (인증된 사용자로부터 가져옴)
-     * @return 등록된 입찰 정보를 담은 DTO
-     * @throws NoSuchElementException 경매 또는 고객 정보를 찾을 수 없을 경우
-     * @throws IllegalStateException 경매가 진행 중이 아니거나, 입찰 가격이 유효하지 않을 경우
-     */
-    BidResponseDTO placeBid(BidRequestDTO requestDto, Long customerId);
-
-    /**
-     * 특정 경매의 모든 입찰 내역을 조회합니다. (페이징 가능)
-     *
-     * @param auctionId 입찰 내역을 조회할 경매 ID
-     * @param pageable 페이징 정보
-     * @return 해당 경매의 입찰 내역 Page 객체
-     */
-    Page<BidResponseDTO> getBidsForAuction(Integer auctionId, Pageable pageable);
-
-    /**
-     * 특정 고객의 모든 입찰 내역을 조회합니다. (페이징 가능)
-     *
-     * @param customerId 입찰 내역을 조회할 고객 ID
-     * @param pageable 페이징 정보
-     * @return 해당 고객의 입찰 내역 Page 객체
-     */
-    Page<BidResponseDTO> getBidsByCustomer(Long customerId, Pageable pageable);
-
-}
diff --git a/back/src/main/java/com/realive/service/admin/logs/StatService.java b/back/src/main/java/com/realive/service/admin/logs/StatService.java
deleted file mode 100644
index 017ead66..00000000
--- a/back/src/main/java/com/realive/service/admin/logs/StatService.java
+++ /dev/null
@@ -1,43 +0,0 @@
-package com.realive.service.admin.logs;
-
-import com.realive.dto.logs.salessum.CategorySalesSummaryDTO;
-import com.realive.dto.logs.salessum.DailySalesSummaryDTO;
-import com.realive.dto.logs.salessum.MonthlySalesLogDetailListDTO;
-import com.realive.dto.logs.salessum.MonthlySalesSummaryDTO;
-import com.realive.dto.logs.salessum.SalesLogDetailListDTO;
-
-import java.time.LocalDate;
-import java.time.YearMonth;
-import java.util.List;
-import java.util.Map;
-
-public interface StatService {
-    // 일별 통계
-    DailySalesSummaryDTO getDailySalesSummary(LocalDate date);
-    SalesLogDetailListDTO getDailySalesLogDetails(LocalDate date);
-
-    // 월별 통계
-    MonthlySalesSummaryDTO getMonthlySalesSummary(YearMonth yearMonth);
-    MonthlySalesLogDetailListDTO getMonthlySalesLogDetails(YearMonth yearMonth);
-    List<DailySalesSummaryDTO> getDailySummariesInMonth(YearMonth yearMonth);
-
-    // 판매자별 통계
-    DailySalesSummaryDTO getSellerDailySalesSummary(Integer sellerId, LocalDate date);
-    MonthlySalesSummaryDTO getSellerMonthlySalesSummary(Integer sellerId, YearMonth yearMonth);
-
-    // 상품별 통계
-    DailySalesSummaryDTO getProductDailySalesSummary(Integer productId, LocalDate date);
-    MonthlySalesSummaryDTO getProductMonthlySalesSummary(Integer productId, YearMonth yearMonth);
-
-    // 대시보드용 통합 통계
-    Map<String, Object> getDashboardStats(LocalDate date);
-
-
-    /**
-     * 특정 기간 동안의 플랫폼 전체 카테고리별 판매 요약을 조회합니다.
-     * @param startDate 조회 시작일
-     * @param endDate 조회 종료일
-     * @return 카테고리별 판매 요약 DTO 리스트
-     */
-    List<CategorySalesSummaryDTO> getPlatformCategorySalesSummary(LocalDate startDate, LocalDate endDate);
-}
\ No newline at end of file
diff --git a/back/src/main/java/com/realive/service/admin/logs/StatServiceImpl.java b/back/src/main/java/com/realive/service/admin/logs/StatServiceImpl.java
deleted file mode 100644
index 8f09fbd2..00000000
--- a/back/src/main/java/com/realive/service/admin/logs/StatServiceImpl.java
+++ /dev/null
@@ -1,356 +0,0 @@
-package com.realive.service.admin.logs;
-
-import com.realive.domain.logs.CommissionLog;
-import com.realive.domain.logs.PayoutLog;
-import com.realive.domain.logs.PenaltyLog;
-import com.realive.domain.logs.SalesLog;
-// import com.realive.domain.product.Product; // ProductRepository를 사용하므로 Product 엔티티도 필요할 수 있음
-import com.realive.domain.seller.Seller;
-import com.realive.dto.logs.AdminDashboardDTO;
-import com.realive.dto.logs.CommissionLogDTO;
-import com.realive.dto.logs.PayoutLogDTO;
-import com.realive.dto.logs.PenaltyLogDTO;
-import com.realive.dto.logs.ProductLogDTO;
-import com.realive.dto.logs.SalesLogDTO;
-import com.realive.dto.logs.SalesWithCommissionDTO;
-import com.realive.dto.logs.salessum.DailySalesSummaryDTO;
-import com.realive.dto.logs.salessum.MonthlySalesLogDetailListDTO;
-import com.realive.dto.logs.salessum.MonthlySalesSummaryDTO;
-import com.realive.dto.logs.salessum.SalesLogDetailListDTO;
-import com.realive.dto.logs.salessum.CategorySalesSummaryDTO;
-import com.realive.repository.admin.approval.ApprovalRepository;
-import com.realive.repository.logs.CommissionLogRepository;
-import com.realive.repository.logs.PayoutLogRepository;
-import com.realive.repository.logs.PenaltyLogRepository;
-import com.realive.repository.logs.SalesLogRepository;
-import com.realive.repository.product.ProductRepository;
-import com.realive.repository.seller.SellerRepository; // SellerRepository 주입
-// import com.realive.repository.user.UserRepository;
-import lombok.RequiredArgsConstructor;
-import lombok.extern.slf4j.Slf4j;
-import org.springframework.stereotype.Service;
-import org.springframework.transaction.annotation.Transactional;
-
-import java.time.LocalDate;
-import java.time.LocalDateTime;
-import java.time.LocalTime;
-import java.time.YearMonth;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.Optional;
-import java.util.stream.Collectors;
-import java.util.Collections;
-
-@Slf4j
-@Service
-@RequiredArgsConstructor
-@Transactional(readOnly = true)
-public class StatServiceImpl implements StatService {
-
-    private final ApprovalRepository approvalRepository;
-    private final SalesLogRepository salesLogRepository;
-    private final PenaltyLogRepository penaltyLogRepository;
-    private final ProductRepository productRepository;
-    private final PayoutLogRepository payoutLogRepository;
-    private final CommissionLogRepository commissionLogRepository;
-    private final SellerRepository sellerRepository; // SellerRepository 주입
-    // private final UserRepository userRepository;
-
-    // 일별 통계
-    @Override
-    public DailySalesSummaryDTO getDailySalesSummary(LocalDate date) {
-        log.info("getDailySalesSummary 호출됨 - 날짜: {}", date);
-
-        Integer salesCount = salesLogRepository.countBySoldAt(date);
-        Integer salesAmount = salesLogRepository.sumTotalPriceByDate(date);
-        Integer quantitySum = salesLogRepository.sumQuantityByDate(date);
-
-        int totalSalesCount = (salesCount != null) ? salesCount : 0;
-        int totalSalesAmount = (salesAmount != null) ? salesAmount : 0;
-        int totalQuantity = (quantitySum != null) ? quantitySum : 0;
-
-        return DailySalesSummaryDTO.builder()
-                .date(date)
-                .totalSalesCount(totalSalesCount)
-                .totalSalesAmount(totalSalesAmount)
-                .totalQuantity(totalQuantity)
-                .build();
-    }
-
-    @Override
-    public SalesLogDetailListDTO getDailySalesLogDetails(LocalDate date) {
-        log.info("getDailySalesLogDetails 호출됨 - 날짜: {}", date);
-        List<SalesLog> salesLogEntities = salesLogRepository.findBySoldAt(date);
-        List<SalesLogDTO> salesLogDTOs = salesLogEntities.stream()
-                .map(SalesLogDTO::fromEntity)
-                .collect(Collectors.toList());
-        return SalesLogDetailListDTO.builder()
-                .date(date)
-                .salesLogs(salesLogDTOs)
-                .build();
-    }
-
-    // 월별 통계
-    @Override
-    public MonthlySalesSummaryDTO getMonthlySalesSummary(YearMonth yearMonth) {
-        log.info("getMonthlySalesSummary 호출됨 - 연월: {}", yearMonth);
-        LocalDate startDate = yearMonth.atDay(1);
-        LocalDate endDate = yearMonth.atEndOfMonth();
-
-        Integer salesAmount = salesLogRepository.sumTotalPriceBySoldAtBetween(startDate, endDate);
-        Long orderCountFromRepo = salesLogRepository.countDistinctOrdersBySoldAtBetween(startDate, endDate);
-        Integer quantitySum = salesLogRepository.sumQuantityBySoldAtBetween(startDate, endDate);
-
-        int totalSalesAmount = (salesAmount != null) ? salesAmount : 0;
-        int totalSalesCount = (orderCountFromRepo != null) ? orderCountFromRepo.intValue() : 0;
-        int totalQuantity = (quantitySum != null) ? quantitySum : 0;
-
-        return MonthlySalesSummaryDTO.builder()
-                .month(yearMonth)
-                .totalSalesCount(totalSalesCount)
-                .totalSalesAmount(totalSalesAmount)
-                .totalQuantity(totalQuantity)
-                .build();
-    }
-
-    @Override
-    public MonthlySalesLogDetailListDTO getMonthlySalesLogDetails(YearMonth yearMonth) {
-        log.info("getMonthlySalesLogDetails 호출됨 - 연월: {}", yearMonth);
-        LocalDate startDate = yearMonth.atDay(1);
-        LocalDate endDate = yearMonth.atEndOfMonth();
-        List<SalesLog> salesLogEntities = salesLogRepository.findBySoldAtBetween(startDate, endDate);
-        List<SalesLogDTO> salesLogDTOs = salesLogEntities.stream()
-                .map(SalesLogDTO::fromEntity)
-                .collect(Collectors.toList());
-        return MonthlySalesLogDetailListDTO.builder()
-                .month(yearMonth)
-                .salesLogs(salesLogDTOs)
-                .build();
-    }
-
-    @Override
-    public List<DailySalesSummaryDTO> getDailySummariesInMonth(YearMonth yearMonth) {
-        log.info("getDailySummariesInMonth 호출됨 (for 루프 사용) - 연월: {}", yearMonth);
-        List<DailySalesSummaryDTO> dailySummaries = new ArrayList<>();
-        int daysInMonth = yearMonth.lengthOfMonth();
-
-        for (int day = 1; day <= daysInMonth; day++) {
-            LocalDate currentDate = yearMonth.atDay(day);
-            DailySalesSummaryDTO dailySalesSummary = getDailySalesSummary(currentDate);
-            if (dailySalesSummary != null) {
-                dailySummaries.add(dailySalesSummary);
-            } else {
-                log.warn("{} 날짜의 DailySalesSummary가 null이므로 기본값(0)으로 처리된 DTO를 추가합니다.", currentDate);
-                dailySummaries.add(DailySalesSummaryDTO.builder()
-                        .date(currentDate)
-                        .totalSalesCount(0)
-                        .totalSalesAmount(0)
-                        .totalQuantity(0)
-                        .build());
-            }
-        }
-        return dailySummaries;
-    }
-
-    // 판매자별 통계
-    @Override
-    public DailySalesSummaryDTO getSellerDailySalesSummary(Integer sellerId, LocalDate date) {
-        log.info("getSellerDailySalesSummary 호출됨 - 판매자ID: {}, 날짜: {}", sellerId, date);
-        Integer salesCount = salesLogRepository.countBySellerIdAndSoldAt(sellerId, date);
-        Integer salesAmount = salesLogRepository.sumTotalPriceBySellerIdAndSoldAt(sellerId, date);
-        Integer quantitySum = salesLogRepository.sumQuantityBySellerIdAndSoldAt(sellerId, date);
-
-        int totalSalesCount = (salesCount != null) ? salesCount : 0;
-        int totalSalesAmount = (salesAmount != null) ? salesAmount : 0;
-        int totalQuantity = (quantitySum != null) ? quantitySum : 0;
-
-        return DailySalesSummaryDTO.builder()
-                .date(date)
-                .totalSalesCount(totalSalesCount)
-                .totalSalesAmount(totalSalesAmount)
-                .totalQuantity(totalQuantity)
-                .build();
-    }
-
-    @Override
-    public MonthlySalesSummaryDTO getSellerMonthlySalesSummary(Integer sellerId, YearMonth yearMonth) {
-        log.info("getSellerMonthlySalesSummary 호출됨 - 판매자ID: {}, 연월: {}", sellerId, yearMonth);
-        LocalDate startDate = yearMonth.atDay(1);
-        LocalDate endDate = yearMonth.atEndOfMonth();
-
-        Integer salesAmount = salesLogRepository.sumTotalPriceBySellerIdAndSoldAtBetween(sellerId, startDate, endDate);
-        Long orderCountFromRepo = salesLogRepository.countDistinctOrdersBySellerIdAndSoldAtBetween(sellerId, startDate, endDate);
-        Integer quantitySum = salesLogRepository.sumQuantityBySellerIdAndSoldAtBetween(sellerId, startDate, endDate);
-
-        int totalSalesAmount = (salesAmount != null) ? salesAmount : 0;
-        int totalSalesCount = (orderCountFromRepo != null) ? orderCountFromRepo.intValue() : 0;
-        int totalQuantity = (quantitySum != null) ? quantitySum : 0;
-
-        return MonthlySalesSummaryDTO.builder()
-                .month(yearMonth)
-                .totalSalesCount(totalSalesCount)
-                .totalSalesAmount(totalSalesAmount)
-                .totalQuantity(totalQuantity)
-                .build();
-    }
-
-    // 상품별 통계
-    @Override
-    public DailySalesSummaryDTO getProductDailySalesSummary(Integer productId, LocalDate date) {
-        log.info("getProductDailySalesSummary 호출됨 - 상품ID: {}, 날짜: {}", productId, date);
-        Integer salesAmount = salesLogRepository.sumTotalPriceByProductIdAndSoldAtBetween(productId, date, date);
-        Integer quantitySum = salesLogRepository.sumQuantityByProductIdAndSoldAtBetween(productId, date, date);
-        Integer salesCount = salesLogRepository.countByProductIdAndSoldAt(productId, date);
-
-        int totalSalesAmount = (salesAmount != null) ? salesAmount : 0;
-        int totalQuantity = (quantitySum != null) ? quantitySum : 0;
-        int totalSalesCount = (salesCount != null) ? salesCount : 0;
-
-        return DailySalesSummaryDTO.builder()
-                .date(date)
-                .totalSalesCount(totalSalesCount)
-                .totalSalesAmount(totalSalesAmount)
-                .totalQuantity(totalQuantity)
-                .build();
-    }
-
-    @Override
-    public MonthlySalesSummaryDTO getProductMonthlySalesSummary(Integer productId, YearMonth yearMonth) {
-        log.info("getProductMonthlySalesSummary 호출됨 - 상품ID: {}, 연월: {}", productId, yearMonth);
-        LocalDate startDate = yearMonth.atDay(1);
-        LocalDate endDate = yearMonth.atEndOfMonth();
-
-        Integer salesAmount = salesLogRepository.sumTotalPriceByProductIdAndSoldAtBetween(productId, startDate, endDate);
-        Integer quantitySum = salesLogRepository.sumQuantityByProductIdAndSoldAtBetween(productId, startDate, endDate);
-        Integer salesCount = salesLogRepository.countByProductIdAndSoldAtBetween(productId, startDate, endDate);
-
-        int totalSalesAmount = (salesAmount != null) ? salesAmount : 0;
-        int totalQuantity = (quantitySum != null) ? quantitySum : 0;
-        int totalSalesCount = (salesCount != null) ? salesCount : 0;
-
-        return MonthlySalesSummaryDTO.builder()
-                .month(yearMonth)
-                .totalSalesCount(totalSalesCount)
-                .totalSalesAmount(totalSalesAmount)
-                .totalQuantity(totalQuantity)
-                .build();
-    }
-
-
-    // 대시보드용 통합 통계
-    @Override
-    public Map<String, Object> getDashboardStats(LocalDate date) {
-        log.info("관리자 대시보드 통합 통계 조회 (Map 반환) - 날짜: {}", date);
-        Map<String, Object> dashboardData = new HashMap<>();
-
-        // 1. 승인 대기 중인 판매자 수 계산
-        List<Seller> pendingSellers = approvalRepository.findByIsApprovedFalseAndApprovedAtIsNull();
-        int pendingSellerCount = pendingSellers.size();
-        log.debug("승인 대기 중인 판매자 수: {}", pendingSellerCount);
-
-        // 2. 상품 요약 정보 (총 상품 수, 오늘 등록 상품 수)
-        long totalProductsCount = 0L;
-        long newProductsTodayCount = 0L;
-        if (productRepository != null) {
-            totalProductsCount = productRepository.count();
-            LocalDateTime startOfDayForProduct = date.atStartOfDay();
-            LocalDateTime tomorrowStartOfDay = date.plusDays(1).atStartOfDay();
-            newProductsTodayCount = productRepository.countByCreatedAtBetween(startOfDayForProduct, tomorrowStartOfDay);
-        }
-
-        // 3. ProductLogDTO의 salesWithCommissions 채우기
-        List<SalesWithCommissionDTO> salesWithCommissionsData = new ArrayList<>();
-        if (salesLogRepository != null && commissionLogRepository != null) {
-            // N+1 문제 가능성 있음. 실제 운영시에는 최적화된 쿼리 권장.
-            List<SalesLog> dailySalesLogs = salesLogRepository.findBySoldAt(date);
-            for (SalesLog sale : dailySalesLogs) {
-                SalesLogDTO salesLogDTO = SalesLogDTO.fromEntity(sale);
-                Optional<CommissionLog> commissionOpt = commissionLogRepository.findBySalesLogId(sale.getId());
-                CommissionLogDTO commissionLogDTO = commissionOpt.map(CommissionLogDTO::fromEntity).orElse(null);
-
-                salesWithCommissionsData.add(SalesWithCommissionDTO.builder()
-                        .salesLog(salesLogDTO)
-                        .commissionLog(commissionLogDTO)
-                        .build());
-            }
-            log.debug("{}일자 판매(수수료 포함) 로그 {}건 처리", date, salesWithCommissionsData.size());
-        } else {
-            log.warn("salesWithCommissionsData 생성을 위한 리포지토리 중 일부가 null입니다.");
-        }
-
-        // 4. ProductLogDTO의 payoutLogs 채우기
-        List<PayoutLogDTO> payoutLogDataList = new ArrayList<>();
-        if (payoutLogRepository != null) {
-            LocalDateTime startOfDayForPayout = date.atStartOfDay();
-            LocalDateTime endOfDayForPayout = date.atTime(LocalTime.MAX);
-            List<PayoutLog> payoutEntities = payoutLogRepository.findByProcessedAtBetween(startOfDayForPayout, endOfDayForPayout);
-            payoutLogDataList = payoutEntities.stream()
-                    .map(PayoutLogDTO::fromEntity)
-                    .collect(Collectors.toList());
-            log.debug("{}일자 정산 로그 {}건 처리", date, payoutLogDataList.size());
-        } else {
-            log.warn("payoutLogDataList 생성을 위한 PayoutLogRepository가 null입니다.");
-        }
-
-        ProductLogDTO productLogData = ProductLogDTO.builder()
-                .salesWithCommissions(salesWithCommissionsData)
-                .payoutLogs(payoutLogDataList)
-                .build();
-
-        // 5. List<PenaltyLogDTO> 데이터 생성 또는 조회
-        List<PenaltyLogDTO> penaltyLogDTOList;
-        if (penaltyLogRepository != null) {
-            LocalDateTime startOfDayForPenalty = date.atStartOfDay();
-            LocalDateTime endOfDayForPenalty = date.atTime(LocalTime.MAX);
-            List<PenaltyLog> penaltyEntities = penaltyLogRepository.findByCreatedAtBetween(startOfDayForPenalty, endOfDayForPenalty);
-            penaltyLogDTOList = penaltyEntities.stream()
-                    .map(PenaltyLogDTO::fromEntity)
-                    .collect(Collectors.toList());
-            log.debug("{}일자 패널티 로그 {}건 조회", date, penaltyLogDTOList.size());
-        } else {
-            penaltyLogDTOList = Collections.emptyList();
-        }
-
-        // 6. AdminDashboardDTO 객체 생성
-        AdminDashboardDTO adminViewData = AdminDashboardDTO.builder()
-                .productLog(productLogData)
-                .penaltyLogs(penaltyLogDTOList)
-                .pendingSellerCount(pendingSellerCount)
-                .build();
-
-        // 7. Map에 데이터 담기
-        dashboardData.put("adminViewData", adminViewData);
-        dashboardData.put("totalProducts", totalProductsCount);
-        dashboardData.put("newProductsToday", newProductsTodayCount);
-        // TODO: 필요시 더 많은 요약 통계 (예: 오늘 총 판매액 등)를 Map에 직접 추가할 수 있음
-        // dashboardData.put("todayTotalSalesAmount", getDailySalesSummary(date).getTotalSalesAmount());
-
-        log.info("대시보드 데이터 구성 완료: {}", dashboardData.keySet());
-        return dashboardData;
-
-
-    }
-
-    /**
-     * 특정 기간 동안의 플랫폼 전체 카테고리별 판매 요약을 조회합니다.
-     * (StatService 인터페이스에 선언된 메소드의 구현)
-     * @param startDate 조회 시작일
-     * @param endDate 조회 종료일
-     * @return 카테고리별 판매 요약 DTO 리스트
-     */
-    @Override // 인터페이스 메소드를 구현함을 명시
-    public List<CategorySalesSummaryDTO> getPlatformCategorySalesSummary(LocalDate startDate, LocalDate endDate) {
-        log.info("플랫폼 전체 카테고리별 판매 요약 조회 요청 - 기간: {} ~ {}", startDate, endDate);
-        if (salesLogRepository != null) {
-            // SalesLogRepository에 해당 기간의 카테고리별 집계 쿼리 메소드가 있다고 가정
-            // (이전 답변에서 findCategorySalesSummaryBetween 메소드를 정의했었습니다)
-            return salesLogRepository.findCategorySalesSummaryBetween(startDate, endDate);
-        } else {
-            log.warn("SalesLogRepository가 주입되지 않았습니다. 카테고리별 판매 요약에 대해 빈 리스트를 반환합니다.");
-            return Collections.emptyList(); // SalesLogRepository가 null인 경우 빈 리스트 반환
-        }
-    }
-}
diff --git a/back/src/main/java/com/realive/service/customer/CustomerQnaService.java b/back/src/main/java/com/realive/service/customer/CustomerQnaService.java
index a4b422b3..9d42ddfd 100644
--- a/back/src/main/java/com/realive/service/customer/CustomerQnaService.java
+++ b/back/src/main/java/com/realive/service/customer/CustomerQnaService.java
@@ -22,6 +22,7 @@ import com.realive.repository.customer.CustomerRepository;
 import com.realive.repository.customer.productview.ProductListRepository;
 import com.realive.repository.customer.productview.ProductViewRepository;
 
+import jakarta.persistence.EntityNotFoundException;
 import lombok.RequiredArgsConstructor;
 
 // [Customer] Q&A Service
@@ -40,10 +41,10 @@ public class CustomerQnaService {
     public Map<String, Object> createQnaWithProductSummary(CustomerQnaRequestDTO requestDTO) {
         
         Product product = ProductViewRepository.findById(requestDTO.getProductId())
-                .orElseThrow(() -> new NoSuchElementException("상품을 찾을 수 없습니다. ID=" + requestDTO.getProductId()));
+                .orElseThrow(() -> new EntityNotFoundException("상품을 찾을 수 없습니다. ID=" + requestDTO.getProductId()));
 
         Customer customer = customerRepository.findActiveUserById(requestDTO.getCustomerId())
-                .orElseThrow(() -> new NoSuchElementException("고객을 찾을 수 없습니다. ID=" + requestDTO.getCustomerId()));
+                .orElseThrow(() -> new EntityNotFoundException("고객을 찾을 수 없습니다. ID=" + requestDTO.getCustomerId()));
 
         Seller seller = product.getSeller();
 
@@ -63,7 +64,7 @@ public class CustomerQnaService {
                 .getWishlistedProducts(List.of(product.getId()))
                 .stream()
                 .findFirst()
-                .orElseThrow(() -> new NoSuchElementException("상품 요약 정보를 찾을 수 없습니다."));
+                .orElseThrow(() -> new EntityNotFoundException("상품 요약 정보를 찾을 수 없습니다."));
 
         return Map.of(
             "qnaId", saved.getId(),
@@ -96,7 +97,7 @@ public class CustomerQnaService {
                     .build();
 
             result.put("qna", qnaDto);
-            result.put("productSummary", productMap.get(qna.getProduct().getId()));
+            result.put("productSummary", productMap.getOrDefault(qna.getProduct().getId(), null));
 
             return result;
         }).collect(Collectors.toList());
@@ -108,7 +109,7 @@ public class CustomerQnaService {
     public Map<String, Object> detailQnaWithProductSummary(Long id, Long customerId) {
 
         CustomerQna qna = customerQnaRepository.findByIdAndCustomerId(id, customerId)
-                .orElseThrow(() -> new NoSuchElementException("문의 정보를 찾을 수 없습니다. ID=" + id));
+                .orElseThrow(() -> new EntityNotFoundException("문의 정보를 찾을 수 없습니다. ID=" + id));
         
         Product product = qna.getProduct();
         
@@ -116,7 +117,7 @@ public class CustomerQnaService {
                 .getWishlistedProducts(List.of(product.getId()))
                 .stream()
                 .findFirst()
-                .orElseThrow(() -> new NoSuchElementException("상품 요약 정보를 찾을 수 없습니다."));
+                .orElseThrow(() -> new EntityNotFoundException("상품 요약 정보를 찾을 수 없습니다."));
 
         QnaDetailDTO qnaDetail = QnaDetailDTO.builder()
             .id(qna.getId())
diff --git a/back/src/main/java/com/realive/service/customer/CustomerService.java b/back/src/main/java/com/realive/service/customer/CustomerService.java
index e7980a80..aba1597a 100644
--- a/back/src/main/java/com/realive/service/customer/CustomerService.java
+++ b/back/src/main/java/com/realive/service/customer/CustomerService.java
@@ -6,6 +6,7 @@ import org.springframework.transaction.annotation.Transactional;
 import com.realive.domain.customer.Customer;
 import com.realive.repository.customer.CustomerRepository;
 
+import jakarta.persistence.EntityNotFoundException;
 import lombok.RequiredArgsConstructor;
 
 // [Customer] 회원 정보 조회 Service
@@ -20,13 +21,13 @@ public class CustomerService {
     // 고객 ID로 활성화된 회원 정보 조회
     public Customer getActiveCustomerById(Long id) {
         return customerRepository.findActiveUserById(id)
-                .orElseThrow(() -> new RuntimeException("회원이 존재하지 않거나 비활성 상태입니다."));
+                .orElseThrow(() -> new EntityNotFoundException("회원이 존재하지 않거나 비활성 상태입니다."));
     }
 
     // 이메일로 고객 정보 조회 (임시회원 제외)
     public Long findIdByEmail(String email) {
         return customerRepository.findByEmail(email)
-                .orElseThrow(() -> new RuntimeException("회원 없음"))
+                .orElseThrow(() -> new EntityNotFoundException("회원 없음"))
                 .getId();
     }
 
diff --git a/back/src/main/java/com/realive/service/customer/MemberService.java b/back/src/main/java/com/realive/service/customer/MemberService.java
index 65c57482..36265372 100644
--- a/back/src/main/java/com/realive/service/customer/MemberService.java
+++ b/back/src/main/java/com/realive/service/customer/MemberService.java
@@ -6,10 +6,13 @@ import org.springframework.stereotype.Service;
 import com.realive.domain.customer.Customer;
 import com.realive.domain.customer.SignupMethod;
 import com.realive.dto.customer.member.MemberJoinDTO;
+import com.realive.dto.customer.member.MemberModifyDTO;
 import com.realive.dto.customer.member.MemberReadDTO;
+import com.realive.exception.DuplicateEmailException;
 import com.realive.repository.customer.CustomerRepository;
 import com.realive.security.customer.JwtTokenProvider;
 
+import jakarta.persistence.EntityNotFoundException;
 import jakarta.transaction.Transactional;
 import lombok.RequiredArgsConstructor;
 
@@ -30,7 +33,7 @@ public class MemberService {
         
         // 인증된 사용자 이메일로 회원 조회
         Customer customer = customerRepository.findByEmailIncludingSocial(authenticatedEmail)
-                .orElseThrow(() -> new RuntimeException("회원 정보를 찾을 수 없습니다."));
+                .orElseThrow(() -> new EntityNotFoundException("회원 정보를 찾을 수 없습니다."));
 
         // 회원정보 업데이트
         customer.setName(request.getName());
@@ -58,7 +61,7 @@ public class MemberService {
         // 1) 이미 USER로 가입된 이메일인지 체크
         if (customerRepository.findByEmailIncludingSocial(dto.getEmail()).isPresent()
                 && customerRepository.findByEmail(dto.getEmail()).isPresent()) {
-            throw new IllegalArgumentException("이미 가입된 이메일입니다.");
+            throw new DuplicateEmailException("이미 가입된 이메일입니다.");
         }
 
         // 2) 엔티티 생성
@@ -86,7 +89,7 @@ public class MemberService {
     public MemberReadDTO getMyProfile(String email) {
         Customer customer = customerRepository
             .findByEmailIncludingSocial(email) // 소셜·일반 모두 조회 가능
-            .orElseThrow(() -> new RuntimeException("회원 정보를 찾을 수 없습니다."));
+            .orElseThrow(() -> new EntityNotFoundException("회원 정보를 찾을 수 없습니다."));
 
         MemberReadDTO dto = new MemberReadDTO();
         dto.setEmail(customer.getEmail());
@@ -99,9 +102,9 @@ public class MemberService {
     }
 
     // 회원정보 수정
-    public void updateMember(String email, MemberReadDTO dto) {
+    public void updateMember(String email, MemberModifyDTO dto) {
         Customer customer = customerRepository.findByEmail(email)
-                .orElseThrow(() -> new IllegalArgumentException("회원이 존재하지 않습니다"));
+                .orElseThrow(() -> new EntityNotFoundException("회원이 존재하지 않습니다"));
 
         customer.setName(dto.getName());
         customer.setPhone(dto.getPhone());
@@ -114,7 +117,7 @@ public class MemberService {
     // 회원 탈퇴(소프트): 비활성화
     public void deactivateByEmail(String email) {
         Customer customer = customerRepository.findByEmailIncludingSocial(email)
-                .orElseThrow(() -> new RuntimeException("회원이 존재하지 않습니다."));
+                .orElseThrow(() -> new EntityNotFoundException("회원이 존재하지 않습니다."));
 
         customer.deactivate();
     }
diff --git a/back/src/main/java/com/realive/service/customer/ProductViewServiceImpl.java b/back/src/main/java/com/realive/service/customer/ProductViewServiceImpl.java
index a5634fe1..0f5dfe15 100644
--- a/back/src/main/java/com/realive/service/customer/ProductViewServiceImpl.java
+++ b/back/src/main/java/com/realive/service/customer/ProductViewServiceImpl.java
@@ -13,6 +13,7 @@ import com.realive.dto.product.ProductResponseDTO;
 import com.realive.repository.customer.productview.ProductDetail;
 import com.realive.repository.customer.productview.ProductSearch;
 
+import jakarta.persistence.EntityNotFoundException;
 import lombok.extern.log4j.Log4j2;
 
 // [Customer] 상품 조회 Service 구현체
@@ -40,7 +41,7 @@ public class ProductViewServiceImpl implements ProductViewService {
     @Override
     public ProductResponseDTO getProductDetail(Long id) {
         return productDetail.findProductDetailById(id)
-                .orElseThrow(() -> new NoSuchElementException("해당 상품이 존재하지 않습니다. id=" + id));
+                .orElseThrow(() -> new EntityNotFoundException("해당 상품이 존재하지 않습니다. id=" + id));
     }
 
 }
diff --git a/back/src/main/java/com/realive/service/customer/WishlistService.java b/back/src/main/java/com/realive/service/customer/WishlistService.java
index 83e477e5..af8c0663 100644
--- a/back/src/main/java/com/realive/service/customer/WishlistService.java
+++ b/back/src/main/java/com/realive/service/customer/WishlistService.java
@@ -13,6 +13,7 @@ import com.realive.repository.customer.WishlistRepository;
 import com.realive.repository.customer.productview.ProductListRepository;
 import com.realive.repository.customer.productview.ProductViewRepository;
 
+import jakarta.persistence.EntityNotFoundException;
 import jakarta.transaction.Transactional;
 import lombok.RequiredArgsConstructor;
 
@@ -41,7 +42,7 @@ public class WishlistService {
         Customer customer = customerService.getActiveCustomerById(customerId);
 
         Product product = productViewRepository.findById(productId)
-                .orElseThrow(() -> new RuntimeException("상품 없음"));
+                .orElseThrow(() -> new EntityNotFoundException("상품이 존재하지 않습니다. id=" + productId));
 
         Wishlist wishlist = Wishlist.builder()
                 .customer(customer)
@@ -54,8 +55,11 @@ public class WishlistService {
 
     //찜 목록 조회
     public List<ProductListDTO> getWishlistForCustomer(Long customerId) {
+
+        Customer customer = customerService.getActiveCustomerById(customerId); // 고객 존재 여부 체크
         List<Long> productIds = wishlistRepository.findProductIdsByCustomerId(customerId);
         return productListRepository.getWishlistedProducts(productIds);
+        
     }
  
 }
diff --git a/back/src/main/java/com/realive/service/order/OrderDeliveryService.java b/back/src/main/java/com/realive/service/order/OrderDeliveryService.java
deleted file mode 100644
index c9023658..00000000
--- a/back/src/main/java/com/realive/service/order/OrderDeliveryService.java
+++ /dev/null
@@ -1,31 +0,0 @@
-// package com.realive.service.order;
-
-// import com.realive.dto.order.DeliveryStatusUpdateDTO;
-// import com.realive.dto.order.OrderDeliveryResponseDTO;
-
-// import java.util.List;
-
-// /**
-//  * 배송 관련 서비스 인터페이스
-//  */
-// public interface OrderDeliveryService {
-
-//     /**
-//      * 주문 ID 기반으로 배송 상태를 업데이트함
-//      *
-//      * @param orderId 주문 ID
-//      * @param dto 상태 업데이트 정보 (배송 상태, 운송장 번호, 택배사 등)
-//      */
-//     void updateDeliveryStatus(Long sellerId, Long orderId, DeliveryStatusUpdateDTO dto);
-
-//     /**
-//      * 판매자 ID를 기반으로 해당 판매자의 전체 배송 내역을 조회
-//      *
-//      * @param sellerId 판매자 ID
-//      * @return 배송 내역 목록
-//      */
-//     List<OrderDeliveryResponseDTO> getDeliveriesBySeller(Long sellerId);
-
-
-//     OrderDeliveryResponseDTO getDeliveryByOrderId(Long sellerId, Long orderId);
-// }
\ No newline at end of file
diff --git a/back/src/main/java/com/realive/service/order/OrderService.java b/back/src/main/java/com/realive/service/order/OrderService.java
deleted file mode 100644
index 6a3905b8..00000000
--- a/back/src/main/java/com/realive/service/order/OrderService.java
+++ /dev/null
@@ -1,25 +0,0 @@
-package com.realive.service.order;
-
-import com.realive.dto.order.*;
-import org.springframework.data.domain.Page;
-import org.springframework.data.domain.Pageable;
-
-public interface OrderService {
-    // 단일 주문 상세 조회
-    OrderResponseDTO getOrder(Long orderId, Long customerId);
-
-    // 주문 목록 조회 (페이징 포함)
-    Page<OrderResponseDTO> getOrderList(Pageable pageable);
-
-    // 구매내역 삭제
-    void deleteOrder(OrderDeleteRequestDTO orderDeleteRequestDTO);
-
-    // 구매 취소
-    void cancelOrder(OrderCancelRequestDTO orderCancelRequestDTO);
-
-    // 구매 확정
-    void confirmOrder(OrderConfirmRequestDTO orderConfirmRequestDTO);
-
-    // 결제 진행 + 구매내역 생성
-    Long processPayment(PayRequestDTO payRequestDTO);
-}
\ No newline at end of file
diff --git a/back/src/main/java/com/realive/service/order/OrderServiceImpl.java b/back/src/main/java/com/realive/service/order/OrderServiceImpl.java
deleted file mode 100644
index f24825b6..00000000
--- a/back/src/main/java/com/realive/service/order/OrderServiceImpl.java
+++ /dev/null
@@ -1,467 +0,0 @@
-package com.realive.service.order;
-
-import com.realive.domain.common.enums.DeliveryStatus; // 제공해주신 enum만 사용
-import com.realive.domain.common.enums.DeliveryType;
-import com.realive.domain.common.enums.MediaType;
-import com.realive.domain.common.enums.OrderStatus;
-import com.realive.domain.common.enums.PaymentType;
-import com.realive.domain.customer.Customer;
-import com.realive.domain.order.Order;
-import com.realive.domain.order.OrderDelivery;
-import com.realive.domain.order.OrderItem;
-import com.realive.domain.product.DeliveryPolicy;
-import com.realive.domain.product.Product;
-import com.realive.dto.order.*;
-import com.realive.repository.customer.CustomerRepository;
-import com.realive.repository.order.OrderDeliveryRepository;
-import com.realive.repository.order.OrderItemRepository;
-import com.realive.repository.order.OrderRepository;
-import com.realive.repository.product.DeliveryPolicyRepository;
-import com.realive.repository.product.ProductImageRepository;
-import com.realive.repository.product.ProductRepository;
-import jakarta.transaction.Transactional;
-import lombok.RequiredArgsConstructor;
-import lombok.extern.log4j.Log4j2;
-import org.springframework.data.domain.Page;
-import org.springframework.data.domain.PageImpl;
-import org.springframework.data.domain.Pageable;
-import org.springframework.stereotype.Service;
-
-import java.time.LocalDateTime;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Map;
-import java.util.NoSuchElementException;
-import java.util.Optional;
-import java.util.function.Function;
-import java.util.stream.Collectors;
-
-@Service
-@Transactional
-@Log4j2
-@RequiredArgsConstructor
-public class OrderServiceImpl implements OrderService {
-
-    private final OrderRepository orderRepository;
-    private final OrderItemRepository orderItemRepository;
-    private final ProductRepository productRepository;
-    private final ProductImageRepository productImageRepository;
-    private final DeliveryPolicyRepository deliveryPolicyRepository;
-    private final CustomerRepository customerRepository;
-    private final OrderDeliveryRepository orderDeliveryRepository;
-
-    @Override
-    public OrderResponseDTO getOrder(Long orderId, Long customerId) {
-        Order order = orderRepository.findByCustomer_IdAndId(customerId, orderId)
-                .orElseThrow(() -> new NoSuchElementException("존재하지 않는 구매 내역입니다. (주문 ID: " + orderId + ", 고객 ID: " + customerId + ")"));
-
-        List<OrderItem> orderItems = orderItemRepository.findByOrderId(order.getId());
-
-        if (orderItems.isEmpty()) {
-            throw new NoSuchElementException("주문 항목이 없습니다.");
-        }
-
-        List<Long> productIdsInOrder = orderItems.stream()
-                .map(orderItem -> orderItem.getProduct().getId())
-                .distinct()
-                .collect(Collectors.toList());
-
-        Map<Long, String> thumbnailUrls = productImageRepository.findThumbnailUrlsByProductIds(productIdsInOrder, MediaType.IMAGE)
-                .stream()
-                .collect(Collectors.toMap(
-                        arr -> (Long) arr[0],
-                        arr -> (String) arr[1]
-                ));
-
-        // DeliveryPolicyRepository에 findByProductIds가 없으므로 findAll 후 필터링
-        Map<Long, DeliveryPolicy> deliveryPoliciesByProductId = deliveryPolicyRepository.findAll().stream()
-                .filter(policy -> productIdsInOrder.contains(policy.getProduct().getId()))
-                .collect(Collectors.toMap(policy -> policy.getProduct().getId(), Function.identity()));
-
-
-        List<OrderItemResponseDTO> itemDTOs = new ArrayList<>();
-        int totalDeliveryFeeForOrder = 0;
-        List<Long> processedProductIdsForDelivery = new ArrayList<>();
-
-        for (OrderItem orderItem : orderItems) {
-            Product product = orderItem.getProduct();
-
-            String imageUrl = thumbnailUrls.getOrDefault(product.getId(), null);
-
-            int itemDeliveryFee = 0;
-            DeliveryPolicy deliveryPolicy = deliveryPoliciesByProductId.get(product.getId());
-
-            if (deliveryPolicy != null && deliveryPolicy.getType() == DeliveryType.유료배송 && !processedProductIdsForDelivery.contains(product.getId())) {
-                itemDeliveryFee = deliveryPolicy.getCost();
-                totalDeliveryFeeForOrder += itemDeliveryFee;
-                processedProductIdsForDelivery.add(product.getId());
-            }
-
-            itemDTOs.add(OrderItemResponseDTO.builder()
-                    .productId(product.getId())
-                    .productName(product.getName())
-                    .quantity(orderItem.getQuantity())
-                    .price(orderItem.getPrice())
-                    .imageUrl(imageUrl)
-                    .build());
-        }
-
-        // OrderDelivery 정보 조회
-        Optional<OrderDelivery> optionalOrderDelivery = orderDeliveryRepository.findByOrder(order);
-        String currentDeliveryStatus = optionalOrderDelivery
-                .map(delivery -> delivery.getStatus().getDescription())
-                .orElse(DeliveryStatus.DELIVERY_PREPARING.getDescription());
-        String paymentType = "CARD"; // 다른 결제수단은 없음
-
-        return OrderResponseDTO.from(
-                order,
-                itemDTOs,
-                totalDeliveryFeeForOrder,
-                paymentType,
-                currentDeliveryStatus
-        );
-    }
-
-
-    @Override
-    public Page<OrderResponseDTO> getOrderList(Pageable pageable) {
-        Page<Order> orderPage = orderRepository.findAllOrders(pageable);
-        List<OrderResponseDTO> responseList = new ArrayList<>();
-
-        List<Long> orderIds = orderPage.getContent().stream().map(Order::getId).collect(Collectors.toList());
-
-        Map<Long, List<OrderItem>> orderItemsByOrderId = orderItemRepository.findByOrderIdIn(orderIds).stream()
-                .collect(Collectors.groupingBy(item -> item.getOrder().getId()));
-
-        List<Long> productIds = orderItemsByOrderId.values().stream()
-                .flatMap(List::stream)
-                .map(item -> item.getProduct().getId())
-                .distinct()
-                .collect(Collectors.toList());
-
-        Map<Long, String> thumbnailUrls = productImageRepository.findThumbnailUrlsByProductIds(productIds, MediaType.IMAGE)
-                .stream()
-                .collect(Collectors.toMap(
-                        arr -> (Long) arr[0],
-                        arr -> (String) arr[1]
-                ));
-
-        // DeliveryPolicyRepository에 findByProductIds가 없으므로 findAll 후 필터링
-        Map<Long, DeliveryPolicy> deliveryPoliciesByProductId = deliveryPolicyRepository.findAll().stream()
-                .filter(policy -> productIds.contains(policy.getProduct().getId()))
-                .collect(Collectors.toMap(policy -> policy.getProduct().getId(), Function.identity()));
-
-        Map<Long, String> deliveryStatusByOrderId = orderDeliveryRepository.findByOrderIn(orderPage.getContent()).stream()
-                .collect(Collectors.toMap(
-                        delivery -> delivery.getOrder().getId(),
-                        delivery -> delivery.getStatus().getDescription(),
-                        (existing, replacement) -> existing
-                ));
-
-        for (Order order : orderPage.getContent()) {
-            List<OrderItem> currentOrderItems = orderItemsByOrderId.getOrDefault(order.getId(), new ArrayList<>());
-            List<OrderItemResponseDTO> itemDTOs = new ArrayList<>();
-            int totalDeliveryFeeForOrder = 0;
-            List<Long> processedProductIdsForOrderListDelivery = new ArrayList<>();
-
-            for (OrderItem item : currentOrderItems) {
-                Product product = item.getProduct();
-                String imageUrl = thumbnailUrls.getOrDefault(product.getId(), null);
-
-                int itemDeliveryFee = 0;
-                DeliveryPolicy deliveryPolicy = deliveryPoliciesByProductId.get(product.getId());
-                if (deliveryPolicy != null && deliveryPolicy.getType() == DeliveryType.유료배송 && !processedProductIdsForOrderListDelivery.contains(product.getId())) {
-                    itemDeliveryFee = deliveryPolicy.getCost();
-                    totalDeliveryFeeForOrder += itemDeliveryFee;
-                    processedProductIdsForOrderListDelivery.add(product.getId());
-                }
-
-                itemDTOs.add(OrderItemResponseDTO.builder()
-                        .productId(product.getId())
-                        .productName(product.getName())
-                        .quantity(item.getQuantity())
-                        .price(item.getPrice())
-                        .imageUrl(imageUrl)
-                        .build());
-            }
-
-            String currentDeliveryStatus = deliveryStatusByOrderId.getOrDefault(order.getId(), DeliveryStatus.DELIVERY_PREPARING.getDescription()); // 현재 enum에 UNKNOWN 없음, 기본값으로 '배송준비중' 설정
-            String paymentType = "UNKNOWN_PAYMENT_TYPE"; // TODO: 실제 결제 타입 가져오는 로직 구현 필요
-
-            OrderResponseDTO orderDTO = OrderResponseDTO.from(
-                    order,
-                    itemDTOs,
-                    totalDeliveryFeeForOrder,
-                    paymentType,
-                    currentDeliveryStatus
-            );
-            responseList.add(orderDTO);
-        }
-
-        long totalElements = orderPage.getTotalElements();
-
-        return new PageImpl<>(responseList, pageable, totalElements);
-    }
-
-
-    @Override
-    @Transactional
-    public void deleteOrder(OrderDeleteRequestDTO orderDeleteRequestDTO) {
-        Long orderId = orderDeleteRequestDTO.getOrderId();
-        Long customerId = orderDeleteRequestDTO.getCustomerId();
-
-        Order order = orderRepository.findByCustomer_IdAndId(customerId, orderId)
-                .orElseThrow(() -> new NoSuchElementException("삭제하려는 주문을 찾을 수 없습니다: 주문 ID " + orderId + ", 고객 ID " + customerId));
-
-        Optional<OrderDelivery> optionalOrderDelivery = orderDeliveryRepository.findByOrder(order);
-
-        if (optionalOrderDelivery.isPresent()) {
-            DeliveryStatus deliveryStatus = optionalOrderDelivery.get().getStatus();
-            // 현재 enum에 'UNKNOWN', 'PENDING' 없음. '배송준비중' 상태에서만 삭제 허용.
-            if (!(deliveryStatus == DeliveryStatus.DELIVERY_PREPARING)) {
-                throw new IllegalStateException(String.format("현재 배송 상태가 '%s'이므로 주문을 삭제할 수 없습니다. '%s' 상태의 주문만 삭제 가능합니다.",
-                        deliveryStatus.getDescription(),
-                        DeliveryStatus.DELIVERY_PREPARING.getDescription()));
-            }
-        } else {
-            // 배송 정보가 없는 경우에도 삭제를 허용할지 정책 결정 (예: 주문 생성 직후 배송 정보가 아직 생성되지 않은 경우)
-            // 현재는 배송 정보가 없으면, '배송준비중'으로 간주하고 진행 (비즈니스 로직에 따라 변경 가능)
-        }
-
-        // 주문 상태 확인: 결제 완료 또는 주문 접수 상태만 삭제 가능
-        if (!(order.getStatus() == OrderStatus.PAYMENT_COMPLETED || order.getStatus() == OrderStatus.ORDER_RECEIVED)) {
-            throw new IllegalStateException(String.format("현재 주문 상태가 '%s'이므로 삭제할 수 없습니다. 삭제 가능한 상태: (%s, %s)",
-                    order.getStatus().getDescription(),
-                    OrderStatus.PAYMENT_COMPLETED.getDescription(), OrderStatus.ORDER_RECEIVED.getDescription()));
-        }
-
-        List<OrderItem> orderItemsToDelete = orderItemRepository.findByOrderId(order.getId());
-        orderItemRepository.deleteAll(orderItemsToDelete);
-
-        optionalOrderDelivery.ifPresent(orderDeliveryRepository::delete);
-
-        orderRepository.delete(order);
-        log.info("주문이 성공적으로 삭제되었습니다: 주문 ID {}", orderId);
-    }
-
-    @Override
-    @Transactional
-    public void cancelOrder(OrderCancelRequestDTO orderCancelRequestDTO) {
-        Long orderId = orderCancelRequestDTO.getOrderId();
-        Long customerId = orderCancelRequestDTO.getCustomerId();
-        String reason = orderCancelRequestDTO.getReason();
-
-        Order order = orderRepository.findByCustomer_IdAndId(customerId, orderId)
-                .orElseThrow(() -> new NoSuchElementException("취소하려는 주문을 찾을 수 없습니다 : 주문 ID " + orderId + ", 고객 ID " + customerId));
-
-        Optional<OrderDelivery> optionalOrderDelivery = orderDeliveryRepository.findByOrder(order);
-
-        if (optionalOrderDelivery.isPresent()) {
-            DeliveryStatus deliveryStatus = optionalOrderDelivery.get().getStatus();
-            // 현재 enum에 'UNKNOWN', 'PENDING' 없음. '배송준비중' 상태에서만 취소 허용.
-            if (!(deliveryStatus == DeliveryStatus.DELIVERY_PREPARING)) {
-                throw new IllegalStateException(String.format("현재 배송 상태가 '%s'이므로 주문을 취소할 수 없습니다. '%s' 상태의 주문만 취소 가능합니다.",
-                        deliveryStatus.getDescription(),
-                        DeliveryStatus.DELIVERY_PREPARING.getDescription()));
-            }
-        } else {
-            // 배송 정보가 없는 경우에도 취소 허용 (비즈니스 로직에 따라 변경 가능)
-        }
-
-        if (!(order.getStatus() == OrderStatus.PAYMENT_COMPLETED ||
-                order.getStatus() == OrderStatus.ORDER_RECEIVED)) {
-            throw new IllegalStateException(String.format("현재 주문 상태가 '%s'이므로 취소할 수 없습니다. 취소 가능한 상태: (%s, %s)",
-                    order.getStatus().getDescription(),
-                    OrderStatus.PAYMENT_COMPLETED.getDescription(), OrderStatus.ORDER_RECEIVED.getDescription()));
-        }
-
-        order.setStatus(OrderStatus.PURCHASE_CANCELED); // OrderStatus enum에 PURCHASE_CANCELED 필요
-        order.setUpdatedAt(LocalDateTime.now());
-        orderRepository.save(order);
-
-        optionalOrderDelivery.ifPresent(delivery -> {
-            // 현재 enum에 'CANCELLED' 없음. 가장 가까운 '배송준비중'으로 다시 설정하거나,
-            // 별도의 취소 상태를 나타내는 필드를 OrderDelivery에 추가해야 합니다.
-            // 여기서는 임시로 '배송준비중'으로 되돌리거나, 상태 변경 없이 로그만 남깁니다.
-            // 가장 정확한 해결책은 DeliveryStatus enum에 CANCELLED 상태를 추가하는 것입니다.
-            // delivery.setStatus(DeliveryStatus.CANCELLED); // 이 라인은 컴파일 에러 발생
-            log.warn("DeliveryStatus enum에 CANCELLED 상태가 없어 배송 상태를 '취소'로 설정할 수 없습니다. 배송 ID: {}", delivery.getId());
-            delivery.setCompleteDate(LocalDateTime.now()); // 취소 완료 시간으로 사용 가능
-            orderDeliveryRepository.save(delivery);
-        });
-
-        // TODO: 결제 취소 (PG사에 취소 요청) 로직 추가 필요
-        // TODO: 재고 원복 로직 추가 필요
-
-        log.info("주문 상태가 '구매취소'로 변경되었습니다: 주문 ID {}", orderId);
-        if (reason != null && !reason.isEmpty()) {
-            log.info("구매취소 사유: {}", reason);
-        }
-    }
-
-    @Override
-    @Transactional
-    public void confirmOrder(OrderConfirmRequestDTO orderConfirmRequestDTO) {
-        Long orderId = orderConfirmRequestDTO.getOrderId();
-        Long customerId = orderConfirmRequestDTO.getCustomerId();
-
-        Order order = orderRepository.findByCustomer_IdAndId(customerId, orderId)
-                .orElseThrow(() -> new NoSuchElementException("구매확정 하려는 주문을 찾을 수 없습니다: 주문 ID " + orderId + ", 고객 ID " + customerId));
-
-        OrderDelivery orderDelivery = orderDeliveryRepository.findByOrder(order)
-                .orElseThrow(() -> new IllegalStateException("배송 정보가 없는 주문은 구매 확정할 수 없습니다."));
-
-        // 현재 enum에 'DELIVERED' 없음. '배송완료' 상태에서만 구매확정 허용
-        if (orderDelivery.getStatus() != DeliveryStatus.DELIVERY_COMPLETED) { // DeliveryStatus.DELIVERY_COMPLETED 사용
-            throw new IllegalStateException(String.format("현재 배송 상태가 '%s'이므로 구매확정할 수 없습니다. 구매확정은 '%s' 상태의 주문만 가능합니다.",
-                    orderDelivery.getStatus().getDescription(),
-                    DeliveryStatus.DELIVERY_COMPLETED.getDescription()));
-        }
-
-        order.setStatus(OrderStatus.PURCHASE_CONFIRMED); // OrderStatus enum에 PURCHASE_CONFIRMED 필요
-        order.setUpdatedAt(LocalDateTime.now());
-        orderRepository.save(order);
-
-        log.info("주문 상태가 '구매확정'으로 변경되었습니다: 주문 ID {}", orderId);
-    }
-
-    @Override
-    @Transactional
-    public Long processPayment(PayRequestDTO payRequestDTO) {
-        Customer customer = customerRepository.findById(payRequestDTO.getCustomerId())
-                .orElseThrow(() -> new IllegalArgumentException("고객을 찾을 수 없습니다: " + payRequestDTO.getCustomerId()));
-
-        String receiverName = payRequestDTO.getReceiverName();
-        String phone = payRequestDTO.getPhone();
-        String deliveryAddress = payRequestDTO.getDeliveryAddress();
-        PaymentType paymentType = payRequestDTO.getPaymentMethod();
-
-        if (receiverName == null || receiverName.isEmpty() ||
-                phone == null || phone.isEmpty() ||
-                deliveryAddress == null || deliveryAddress.isEmpty() ||
-                paymentType == null) {
-            throw new IllegalArgumentException("필수 배송 및 결제 정보가 누락되었습니다.");
-        }
-
-        List<OrderItem> orderItemsToSave = new ArrayList<>();
-        int calculatedTotalProductPrice = 0;
-        int totalDeliveryFee = 0;
-
-        List<Long> allProductIdsInRequest = new ArrayList<>();
-        if (payRequestDTO.getProductId() != null) {
-            allProductIdsInRequest.add(payRequestDTO.getProductId());
-        }
-        if (payRequestDTO.getOrderItems() != null) {
-            payRequestDTO.getOrderItems().forEach(item -> allProductIdsInRequest.add(item.getProductId()));
-        }
-
-        Map<Long, Product> productsMap = productRepository.findAllById(allProductIdsInRequest).stream()
-                .collect(Collectors.toMap(Product::getId, Function.identity()));
-
-        // DeliveryPolicyRepository에 findByProductIds가 없으므로 findAll 후 필터링
-        Map<Long, DeliveryPolicy> deliveryPoliciesMap = deliveryPolicyRepository.findAll().stream()
-                .filter(policy -> allProductIdsInRequest.contains(policy.getProduct().getId()))
-                .collect(Collectors.toMap(policy -> policy.getProduct().getId(), Function.identity()));
-
-
-        if (payRequestDTO.getProductId() != null && payRequestDTO.getQuantity() != null && payRequestDTO.getQuantity() > 0) {
-            Product product = productsMap.get(payRequestDTO.getProductId());
-            if (product == null) {
-                throw new IllegalArgumentException("결제하려는 상품을 찾을 수 없습니다: ID " + payRequestDTO.getProductId());
-            }
-
-            int itemPrice = product.getPrice();
-            int itemQuantity = payRequestDTO.getQuantity();
-
-            // TODO: 재고 확인 및 감소 로직 추가
-
-            calculatedTotalProductPrice += itemPrice * itemQuantity;
-
-            DeliveryPolicy deliveryPolicy = deliveryPoliciesMap.get(product.getId());
-            if (deliveryPolicy != null && deliveryPolicy.getType() == DeliveryType.유료배송) {
-                totalDeliveryFee += deliveryPolicy.getCost();
-            }
-
-            orderItemsToSave.add(OrderItem.builder()
-                    .product(product)
-                    .quantity(itemQuantity)
-                    .price(itemPrice)
-                    .build());
-
-        }
-        else if (payRequestDTO.getOrderItems() != null && !payRequestDTO.getOrderItems().isEmpty()) {
-            List<Long> processedProductIdsForDelivery = new ArrayList<>();
-
-            for (ProductQuantityDTO itemDTO : payRequestDTO.getOrderItems()) {
-                Product product = productsMap.get(itemDTO.getProductId());
-                if (product == null) {
-                    throw new IllegalArgumentException("결제하려는 상품을 찾을 수 없습니다: ID " + itemDTO.getProductId());
-                }
-
-                int itemPrice = product.getPrice();
-                int itemQuantity = itemDTO.getQuantity();
-
-                // TODO: 재고 확인 및 감소 로직 추가
-
-                calculatedTotalProductPrice += itemPrice * itemQuantity;
-
-                DeliveryPolicy deliveryPolicy = deliveryPoliciesMap.get(product.getId());
-                if (deliveryPolicy != null && deliveryPolicy.getType() == DeliveryType.유료배송 && !processedProductIdsForDelivery.contains(product.getId())) {
-                    totalDeliveryFee += deliveryPolicy.getCost();
-                    processedProductIdsForDelivery.add(product.getId());
-                }
-                orderItemsToSave.add(OrderItem.builder()
-                        .product(product)
-                        .quantity(itemQuantity)
-                        .price(itemPrice)
-                        .build());
-            }
-        } else {
-            throw new IllegalArgumentException("결제할 상품 정보가 없습니다. productId/quantity 또는 orderItems 중 하나를 제공해야 합니다.");
-        }
-
-        int finalTotalPrice = calculatedTotalProductPrice + totalDeliveryFee;
-
-        boolean paymentSuccess = processWithPaymentGateway(customer, finalTotalPrice, paymentType);
-        if (!paymentSuccess) {
-            throw new IllegalStateException("결제 처리 중 오류가 발생했거나 결제가 실패했습니다.");
-        }
-
-        // ------------------ 결제 성공 후 DB에 주문 정보 저장 ------------------
-        Order order = Order.builder()
-                .customer(customer)
-                .status(OrderStatus.PAYMENT_COMPLETED)
-                .totalPrice(finalTotalPrice)
-                .deliveryAddress(deliveryAddress)
-                .OrderedAt(LocalDateTime.now())
-                .UpdatedAt(LocalDateTime.now())
-                // Order 엔티티에 PaymentType 필드가 있다면 여기에 추가
-                // .paymentType(paymentType)
-                .build();
-        order = orderRepository.save(order);
-
-        for (OrderItem item : orderItemsToSave) {
-            item.setOrder(order);
-            orderItemRepository.save(item);
-        }
-
-        OrderDelivery orderDelivery = OrderDelivery.builder()
-                .order(order)
-                .status(DeliveryStatus.DELIVERY_PREPARING) // 현재 enum에 있는 '배송준비중' 상태 사용
-                .startDate(LocalDateTime.now())
-                .build();
-        orderDeliveryRepository.save(orderDelivery);
-
-        log.info("결제 성공 및 주문 생성 완료: 주문 ID {}", order.getId());
-        return order.getId();
-    }
-
-    private boolean processWithPaymentGateway(Customer customer, int amount, PaymentType paymentType) {
-        log.info("--- PG사(Payment Gateway) 결제 요청 시뮬레이션 ---");
-        log.info("  고객 ID: {}", customer.getId());
-        log.info("  결제 금액: {}원", amount);
-        log.info("  결제 수단: {}", paymentType.getDescription());
-        log.info("  PG사 결제 성공 (시뮬레이션)");
-        return true;
-    }
-}
\ No newline at end of file
diff --git a/back/src/main/java/com/realive/service/order/SellerOrderService.java b/back/src/main/java/com/realive/service/order/SellerOrderService.java
deleted file mode 100644
index e69de29b..00000000
diff --git a/back/src/main/java/com/realive/service/product/ProductService.java b/back/src/main/java/com/realive/service/product/ProductService.java
deleted file mode 100644
index b34cd4d3..00000000
--- a/back/src/main/java/com/realive/service/product/ProductService.java
+++ /dev/null
@@ -1,49 +0,0 @@
-package com.realive.service.product;
-
-import com.realive.dto.page.PageResponseDTO;
-import com.realive.dto.product.CustomerProductSearchCondition;
-import com.realive.dto.product.ProductListDTO;
-import com.realive.dto.product.ProductRequestDTO;
-import com.realive.dto.product.ProductResponseDTO;
-import com.realive.dto.product.ProductSearchCondition;
-
-import java.util.List;
-
-public interface ProductService {
-
-    /**
-     * 상품 등록
-     * - imageThumbnail: 대표 이미지 (필수)
-     * - videoThumbnail: 대표 영상 (선택)
-     */
-    Long createProduct(ProductRequestDTO dto, Long sellerId);
-
-    /**
-     * 상품 수정
-     * - 기존 썸네일 이미지/영상 모두 삭제 후 새로 저장
-     */
-    void updateProduct(Long productId, ProductRequestDTO dto, Long sellerId);
-
-    /**
-     * 상품 삭제 (이미지, 배송정책 포함 삭제)
-     */
-    void deleteProduct(Long productId, Long sellerId);
-
-    /**
-     * 판매자 ID 기준 상품 목록 조회(판매자용)
-     * - imageThumbnailUrl / videoThumbnailUrl 포함
-     */
-    PageResponseDTO<ProductListDTO> getProductsBySeller(String email, ProductSearchCondition condition);
-
-    /**
-     * 상품 상세 조회
-     * - imageThumbnailUrl / videoThumbnailUrl 포함
-     */
-    ProductResponseDTO getProductDetail(Long productId);
-
-    /**
-     * 구매자 전용 상품 목록 조회
-     */
-    PageResponseDTO<ProductListDTO> getVisibleProducts(CustomerProductSearchCondition condition);
-
-}
\ No newline at end of file
diff --git a/back/src/main/java/com/realive/service/review/crud/ReviewCRUDService.java b/back/src/main/java/com/realive/service/review/crud/ReviewCRUDService.java
deleted file mode 100644
index 22095a9d..00000000
--- a/back/src/main/java/com/realive/service/review/crud/ReviewCRUDService.java
+++ /dev/null
@@ -1,11 +0,0 @@
-package com.realive.service.review.crud;
-
-import com.realive.dto.review.ReviewCreateRequestDTO;
-import com.realive.dto.review.ReviewResponseDTO;
-import com.realive.dto.review.ReviewUpdateRequestDTO;
-
-public interface ReviewCRUDService {
-    ReviewResponseDTO createReview(ReviewCreateRequestDTO requestDTO, Long customerId);
-    ReviewResponseDTO updateReview(Long reviewId, ReviewUpdateRequestDTO requestDTO, Long customerId);
-    void deleteReview(Long reviewId, Long customerId);
-}
\ No newline at end of file
diff --git a/back/src/main/java/com/realive/service/review/crud/ReviewCRUDServiceImpl.java b/back/src/main/java/com/realive/service/review/crud/ReviewCRUDServiceImpl.java
deleted file mode 100644
index 78c3a965..00000000
--- a/back/src/main/java/com/realive/service/review/crud/ReviewCRUDServiceImpl.java
+++ /dev/null
@@ -1,158 +0,0 @@
-package com.realive.service.review.crud;
-
-import com.realive.domain.customer.Customer;
-import com.realive.domain.order.Order;
-import com.realive.domain.review.SellerReview;
-import com.realive.domain.review.SellerReviewImage;
-import com.realive.domain.seller.Seller;
-import com.realive.dto.review.ReviewCreateRequestDTO;
-import com.realive.dto.review.ReviewResponseDTO;
-import com.realive.dto.review.ReviewUpdateRequestDTO;
-import com.realive.repository.customer.CustomerRepository;
-import com.realive.repository.order.OrderRepository;
-import com.realive.repository.review.crud.ReviewCRUDRepository;
-import com.realive.repository.review.crud.SellerReviewImageRepository;
-import com.realive.repository.seller.SellerRepository;
-import jakarta.persistence.EntityNotFoundException;
-import lombok.RequiredArgsConstructor;
-import org.springframework.stereotype.Service;
-import org.springframework.transaction.annotation.Transactional;
-
-import java.util.ArrayList;
-import java.util.List;
-import java.util.stream.Collectors;
-
-@Service
-@RequiredArgsConstructor
-public class ReviewCRUDServiceImpl implements ReviewCRUDService {
-    private final ReviewCRUDRepository reviewRepository;
-    private final SellerReviewImageRepository imageRepository;
-    private final CustomerRepository customerRepository;
-    private final OrderRepository orderRepository;
-    private final SellerRepository sellerRepository;
-
-    @Override
-    @Transactional
-    public ReviewResponseDTO createReview(ReviewCreateRequestDTO requestDTO, Long customerId) {
-        // 1. 중복 리뷰 확인 (orderId, customerId, sellerId 조합으로 확인)
-        reviewRepository.findByOrderIdAndCustomerIdAndSellerId(requestDTO.getOrderId(), customerId, requestDTO.getSellerId())
-                .ifPresent(review -> {
-                    throw new IllegalStateException("A review for this order and seller by this customer already exists.");
-                });
-
-        // 2. Customer, Order, Seller 엔티티 조회 (실제 존재하는지 확인)
-        Customer customer = customerRepository.findById(customerId)
-                .orElseThrow(() -> new EntityNotFoundException("Customer not found with ID: " + customerId));
-        Order order = orderRepository.findById(requestDTO.getOrderId())
-                .orElseThrow(() -> new EntityNotFoundException("존재하지 않는 주문입니다.: " + requestDTO.getOrderId()));
-        Seller seller = sellerRepository.findById(requestDTO.getSellerId())
-                .orElseThrow(() -> new EntityNotFoundException("존재하지 않는 판매자입니다.: " + requestDTO.getSellerId()));
-
-        // 3. SellerReview 엔티티 생성
-        SellerReview review = SellerReview.builder()
-                .customer(customer)
-                .order(order)
-                .seller(seller)
-                .rating(requestDTO.getRating())
-                .content(requestDTO.getContent())
-                .build();
-
-        // 4. 저장
-        SellerReview savedReview = reviewRepository.save(review);
-
-        // 5. 이미지 저장 (createdAt 수동 설정 부분 제거)
-        List<String> imageUrls = saveImages(savedReview, requestDTO.getImageUrls());
-
-        // 6. DTO로 변환하여 반환
-        return ReviewResponseDTO.builder()
-                .reviewId(savedReview.getId())
-                .orderId(savedReview.getOrder().getId())
-                .customerId(savedReview.getCustomer().getId())
-                .sellerId(savedReview.getSeller().getId())
-                .productName(null) // CRUD 서비스에서는 productName을 처리하지 않습니다.
-                .rating(savedReview.getRating())
-                .content(savedReview.getContent())
-                .imageUrls(imageUrls)
-                .createdAt(savedReview.getCreatedAt())
-                .isHidden(savedReview.isHidden())
-                .build();
-    }
-
-    @Override
-    @Transactional
-    public ReviewResponseDTO updateReview(Long reviewId, ReviewUpdateRequestDTO requestDTO, Long customerId) {
-        // 리뷰 조회
-        SellerReview review = reviewRepository.findById(reviewId)
-                .orElseThrow(() -> new EntityNotFoundException("리뷰를 찾을 수 없습니다. " + reviewId));
-
-        // 권한 확인
-        if (!review.getCustomer().getId().equals(customerId)) {
-            throw new SecurityException("리뷰를 수정할 수 있는 권한이 없습니다.");
-        }
-
-        // 리뷰 내용 업데이트
-        review.setRating(requestDTO.getRating());
-        review.setContent(requestDTO.getContent());
-
-        // 기존 이미지 삭제
-        imageRepository.deleteByReviewId(reviewId);
-
-        // 새 이미지 저장
-        List<String> imageUrls = saveImages(review, requestDTO.getImageUrls());
-
-        SellerReview updatedReview = reviewRepository.save(review); // 변경된 리뷰 저장
-
-        // DTO로 변환
-        return ReviewResponseDTO.builder()
-                .reviewId(updatedReview.getId())
-                .orderId(updatedReview.getOrder().getId())
-                .customerId(updatedReview.getCustomer().getId())
-                .sellerId(updatedReview.getSeller().getId())
-                .productName(null) // CRUD 서비스에서는 productName을 처리하지 않습니다.
-                .rating(updatedReview.getRating())
-                .content(updatedReview.getContent())
-                .imageUrls(imageUrls)
-                .createdAt(updatedReview.getCreatedAt())
-                .isHidden(updatedReview.isHidden())
-                .build();
-    }
-
-    @Override
-    @Transactional
-    public void deleteReview(Long reviewId, Long customerId) {
-        // 리뷰 조회
-        SellerReview review = reviewRepository.findById(reviewId)
-                .orElseThrow(() -> new EntityNotFoundException("리뷰를 찾을 수 없습니다. : " + reviewId));
-
-        // 권한 확인
-        if (!review.getCustomer().getId().equals(customerId)) {
-            throw new SecurityException("리뷰를 삭제하실 수 있는 권한이 없습니다.");
-        }
-
-        // 관련 이미지 삭제 (먼저 삭제하여 외래키 제약조건 위반 방지)
-        imageRepository.deleteByReviewId(reviewId);
-
-        // 리뷰 삭제
-        reviewRepository.delete(review);
-    }
-
-    // 이미지 저장을 위한 헬퍼 메서드
-    private List<String> saveImages(SellerReview review, List<String> imageUrls) {
-        List<String> savedImageUrls = new ArrayList<>();
-        if (imageUrls != null && !imageUrls.isEmpty()) {
-            List<SellerReviewImage> reviewImages = imageUrls.stream()
-                    .filter(url -> url != null && !url.isBlank())
-                    .map(url -> SellerReviewImage.builder()
-                            .review(review)
-                            .imageUrl(url)
-                            .thumbnail(imageUrls.indexOf(url) == 0)
-                            .build())
-                    .collect(Collectors.toList());
-            imageRepository.saveAll(reviewImages);
-            savedImageUrls = reviewImages.stream()
-                    .map(SellerReviewImage::getImageUrl)
-                    .collect(Collectors.toList());
-        }
-        return savedImageUrls;
-    }
-}
\ No newline at end of file
diff --git a/back/src/main/java/com/realive/service/review/view/ReviewViewService.java b/back/src/main/java/com/realive/service/review/view/ReviewViewService.java
deleted file mode 100644
index c143f8a5..00000000
--- a/back/src/main/java/com/realive/service/review/view/ReviewViewService.java
+++ /dev/null
@@ -1,19 +0,0 @@
-package com.realive.service.review.view;
-
-import com.realive.dto.review.MyReviewResponseDTO;
-import com.realive.dto.review.ReviewListResponseDTO;
-import com.realive.dto.review.ReviewResponseDTO;
-import org.springframework.data.domain.Page;
-import org.springframework.data.domain.Pageable;
-
-public interface ReviewViewService {
-
-    // 판매자별 리뷰 조회
-    ReviewListResponseDTO getReviewList(Long sellerId, Pageable pageable);
-
-    // 상세 보기
-    ReviewResponseDTO getReviewDetail(Long id);
-
-    // 내가 작성한 리뷰 목록 조회
-    Page<MyReviewResponseDTO> getMyReviewList(Long customerId, Pageable pageable);
-}
\ No newline at end of file
diff --git a/back/src/main/java/com/realive/service/review/view/ReviewViewServiceImpl.java b/back/src/main/java/com/realive/service/review/view/ReviewViewServiceImpl.java
deleted file mode 100644
index d9bb437e..00000000
--- a/back/src/main/java/com/realive/service/review/view/ReviewViewServiceImpl.java
+++ /dev/null
@@ -1,73 +0,0 @@
-package com.realive.service.review.view;
-
-import com.realive.dto.review.MyReviewResponseDTO;
-import com.realive.dto.review.ReviewListResponseDTO;
-import com.realive.dto.review.ReviewResponseDTO;
-import com.realive.repository.review.view.ReviewDetail;
-import lombok.RequiredArgsConstructor;
-import lombok.extern.log4j.Log4j2;
-import org.springframework.data.domain.Page;
-import org.springframework.data.domain.Pageable;
-import org.springframework.stereotype.Service;
-
-@Service
-@RequiredArgsConstructor
-@Log4j2
-public class ReviewViewServiceImpl implements ReviewViewService {
-
-    private final ReviewDetail reviewDetail;
-
-    // 판매자에 대한 리뷰 리스트 조회
-    @Override
-    public ReviewListResponseDTO getReviewList(Long sellerId, Pageable pageable) {
-        log.info("Fetching review list for sellerId: {}, page: {}", sellerId, pageable.getPageNumber());
-        if (sellerId == null || sellerId <= 0) {
-            log.error("Invalid seller ID: {}", sellerId);
-            throw new IllegalArgumentException("Invalid seller ID");
-        }
-        // ReviewDetail에서 Page<ReviewResponseDTO>를 받아옵니다.
-        Page<ReviewResponseDTO> reviewsPage = reviewDetail.findSellerReviewsBySellerId(sellerId, pageable);
-
-        log.info("Retrieved {} reviews for sellerId: {}", reviewsPage.getTotalElements(), sellerId);
-
-        // ReviewListResponseDTO로 변환하여 반환
-        return ReviewListResponseDTO.builder()
-                .reviews(reviewsPage.getContent()) // 페이지의 실제 리뷰 리스트
-                .totalCount(reviewsPage.getTotalElements()) // <-- 캐스팅 제거 (totalCount가 long 타입으로 변경됨)
-                .page(reviewsPage.getNumber()) // 현재 페이지 번호 (0부터 시작)
-                .size(reviewsPage.getSize()) // 페이지당 요소 개수
-                .build();
-    }
-
-    // 리뷰 상세 조회
-    @Override
-    public ReviewResponseDTO getReviewDetail(Long id) {
-        log.info("Fetching review detail for id: {}", id);
-        // ID 유효성 검사 추가
-        if (id == null || id <= 0) {
-            log.error("Invalid review ID: {}", id);
-            throw new IllegalArgumentException("Invalid review ID");
-        }
-        ReviewResponseDTO review = reviewDetail.findReviewDetailById(id)
-                .orElseThrow(() -> {
-                    log.error("Review not found with id: {}", id);
-                    return new IllegalArgumentException("Review not found with id: " + id);
-                });
-        log.info("Retrieved review detail for id: {}", id);
-        return review;
-    }
-
-    // 내 리뷰리스트 조회
-    @Override
-    public Page<MyReviewResponseDTO> getMyReviewList(Long customerId, Pageable pageable) {
-        log.info("Fetching my review list for customerId: {}, page: {}", customerId, pageable.getPageNumber());
-        if (customerId == null || customerId <= 0) {
-            log.error("Invalid customer ID: {}", customerId);
-            throw new IllegalArgumentException("Invalid customer ID");
-        }
-        // ReviewDetail의 메서드 이름과 반환 타입을 MyReviewResponseDTO에 맞게 변경
-        Page<MyReviewResponseDTO> myReviews = reviewDetail.findMyReviewsByCustomerId(customerId, pageable);
-        log.info("Retrieved {} reviews for customerId: {}", myReviews.getTotalElements(), customerId);
-        return myReviews;
-    }
-}
\ No newline at end of file
diff --git a/back/src/main/java/com/realive/service/seller/SellerQnaService.java b/back/src/main/java/com/realive/service/seller/SellerQnaService.java
deleted file mode 100644
index 86fcb71f..00000000
--- a/back/src/main/java/com/realive/service/seller/SellerQnaService.java
+++ /dev/null
@@ -1,24 +0,0 @@
-package com.realive.service.seller;
-
-import com.realive.dto.seller.SellerQnaAnswerRequestDTO;
-import com.realive.dto.seller.SellerQnaResponseDTO;
-import org.springframework.data.domain.Page;
-import org.springframework.data.domain.Pageable;
-
-/**
- * 판매자 QnA 서비스 인터페이스
- * - QnA 목록 조회
- * - QnA 답변 등록/수정
- */
-public interface SellerQnaService {
-
-    /**
-     * 판매자 이메일 기준 QnA 목록 조회
-     */
-    Page<SellerQnaResponseDTO> getQnaListByEmail(String email, Pageable pageable);
-
-    /**
-     * 판매자 이메일 기준 QnA 답변 작성/수정
-     */
-    void answerQnaByEmail(String email, Long qnaId, SellerQnaAnswerRequestDTO dto);
-}
\ No newline at end of file
diff --git a/back/src/main/java/com/realive/service/seller/SellerService.java b/back/src/main/java/com/realive/service/seller/SellerService.java
deleted file mode 100644
index 171e1292..00000000
--- a/back/src/main/java/com/realive/service/seller/SellerService.java
+++ /dev/null
@@ -1,88 +0,0 @@
-package com.realive.service.seller;
-
-import org.springframework.web.multipart.MultipartFile;
-
-import com.realive.domain.seller.Seller;
-import com.realive.dto.seller.SellerLoginRequestDTO;
-import com.realive.dto.seller.SellerLoginResponseDTO;
-import com.realive.dto.seller.SellerResponseDTO;
-import com.realive.dto.seller.SellerSignupDTO;
-import com.realive.dto.seller.SellerUpdateDTO;
-
-/**
-
- SellerService
-
-
-
- 판매자 관련 기능을 정의한 서비스 인터페이스
-
-
-
- 인증, 정보 조회 및 수정, 회원가입 등을 처리
- */
-public interface SellerService {
-
-    /**
-
-     판매자 로그인 처리
-
-
-
-     @param reqdto 로그인 요청 DTO (이메일, 비밀번호)
-
-     @return 로그인 성공 시 JWT 토큰 등 포함된 응답 DTO
-     */
-    SellerLoginResponseDTO login(SellerLoginRequestDTO reqdto);
-
-    /**
-
-     내 정보 조회
-
-
-
-     @param email 로그인된 판매자의 이메일
-
-     @return 판매자 정보 DTO
-     */
-    SellerResponseDTO getMyInfo(String email);
-
-    /**
-
-     판매자 회원가입 처리
-
-
-
-     @param dto 판매자 회원가입 정보 DTO
-
-     @param businessLicense 사업자등록증 파일
-
-     @param bankAccountCopy 통장 사본 파일
-     */
-    void registerSeller(SellerSignupDTO dto, MultipartFile businessLicense, MultipartFile bankAccountCopy);
-
-    /**
-
-     판매자 정보 수정 (이름, 전화번호, 비밀번호 등)
-
-
-
-     @param email 판매자 이메일 (식별자)
-
-     @param dto 수정 요청 DTO
-     */
-    void updateSeller(String email, SellerUpdateDTO dto);
-
-    /**
-
-     이메일로 판매자 조회
-
-
-
-     @param email 판매자 이메일
-
-     @return 판매자 엔티티
-     */
-    Seller getByEmail(String email);
-}
-
diff --git a/back/src/main/java/com/realive/serviceimpl/admin/approval/SellerApprovalServiceImpl.java b/back/src/main/java/com/realive/serviceimpl/admin/approval/SellerApprovalServiceImpl.java
deleted file mode 100644
index 840dff4b..00000000
--- a/back/src/main/java/com/realive/serviceimpl/admin/approval/SellerApprovalServiceImpl.java
+++ /dev/null
@@ -1,122 +0,0 @@
-package com.realive.serviceimpl.admin.approval;
-
-import com.realive.domain.seller.Seller;
-import com.realive.dto.admin.approval.PendingSellerDTO;
-import com.realive.dto.seller.SellerResponseDTO;
-import com.realive.repository.admin.approval.ApprovalRepository;
-import com.realive.repository.seller.SellerRepository;
-import com.realive.service.admin.approval.SellerApprovalService;
-import lombok.RequiredArgsConstructor;
-import lombok.extern.slf4j.Slf4j;
-import org.springframework.stereotype.Service;
-import org.springframework.transaction.annotation.Transactional;
-
-import java.time.LocalDateTime;
-import java.util.List;
-import java.util.NoSuchElementException;
-import java.util.Optional;
-import java.util.stream.Collectors;
-
-@Slf4j
-@Service
-@RequiredArgsConstructor
-public class SellerApprovalServiceImpl implements SellerApprovalService {
-
-    private final ApprovalRepository approvalRepository;
-    private final SellerRepository sellerRepository;
-
-
-    @Override
-    @Transactional(readOnly = true)
-    public List<PendingSellerDTO> getPendingApprovalSellers() {
-        log.info("승인 대기 중인 판매자 목록 조회 요청");
-        List<Seller> pendingSellers = approvalRepository.findByIsApprovedFalseAndApprovedAtIsNull();
-        return pendingSellers.stream()
-                .map(this::convertToPendingSellerDTO)
-                .collect(Collectors.toList());
-    }
-
-    @Override
-    @Transactional
-    public SellerResponseDTO processSellerDecision(Long sellerId, boolean approveAction, Integer approvingAdminId) {
-        log.info("판매자 처리 요청 - SellerId: {}, Action (Approve?): {}, AdminId: {}", sellerId, approveAction, approvingAdminId);
-
-        Optional<Seller> sellerOptional = approvalRepository.findById(sellerId);
-        Seller seller = sellerOptional.orElseThrow(() -> {
-            log.warn("processSellerDecision - 존재하지 않는 판매자 ID 시도: {}", sellerId);
-            return new NoSuchElementException("ID가 " + sellerId + "인 판매자를 찾을 수 없습니다.");
-        });
-
-        // "한 번 승인하면 끝" 규칙 및 approvedAt의 updatable=false 제약 반영
-        if (seller.getApprovedAt() != null) {
-            // 이미 approvedAt이 설정되어 있다면, 어떤 결정이든 이미 내려진 상태.
-            // "한 번 승인하면 끝"이므로 더 이상 상태 변경 불가.
-            log.warn("processSellerDecision - 이미 처리된 판매자(ID: {})입니다. (approvedAt: {}). 상태 변경 불가.",
-                    sellerId, seller.getApprovedAt());
-            // 현재 상태를 그대로 반환하거나, 예외를 발생시킬 수 있습니다.
-            // 여기서는 예외를 발생시켜 클라이언트에게 명확히 알립니다.
-            throw new IllegalStateException("이미 승인/거부 처리가 완료된 판매자(ID: " + sellerId + ")입니다. 상태를 변경할 수 없습니다.");
-        }
-
-        // approvedAt이 null인 경우 (최초 처리)
-        if (approveAction) { // 승인 처리
-            seller.setApproved(true);
-            seller.setApprovedAt(LocalDateTime.now()); // 승인 시에만 approvedAt 설정
-            seller.setActive(true);
-            log.info("판매자 승인 처리됨 - SellerId: {}", sellerId);
-        } else { // 거부 처리
-            seller.setApproved(false);
-            // 거부 시에는 approvedAt을 설정하지 않음 (null 유지)
-            // (선택적) isActive=false 처리: Seller 엔티티에 isActive 필드와 setter가 있으므로 사용 가능
-            if (seller.isActive()) { // 현재 활성 상태일 때만 비활성화
-                seller.setActive(false);
-                log.info("판매자 거부와 함께 비활성화 처리됨 - SellerId: {}", sellerId);
-            } else {
-                log.info("판매자 거부 처리됨 (이미 비활성 상태) - SellerId: {}", sellerId);
-            }
-        }
-
-        Seller savedSeller = approvalRepository.save(seller);
-        log.info("판매자 처리 완료 - SellerId: {}, 최종 상태 (isApproved): {}, 최종 상태 (isActive): {}, approvedAt: {}",
-                savedSeller.getId(), savedSeller.isApproved(), savedSeller.isActive(), savedSeller.getApprovedAt());
-
-        return convertToSellerResponseDTO(savedSeller);
-    }
-
-    private PendingSellerDTO convertToPendingSellerDTO(Seller seller) {
-        if (seller == null) return null;
-        return PendingSellerDTO.builder()
-                .id(seller.getId())
-                .name(seller.getName())
-                .email(seller.getEmail())
-                .businessNumber(seller.getBusinessNumber())
-                .build();
-    }
-
-    private SellerResponseDTO convertToSellerResponseDTO(Seller seller) {
-        if (seller == null) return null;
-        return SellerResponseDTO.builder()
-                .email(seller.getEmail())
-                .name(seller.getName())
-                .phone(seller.getPhone())
-                .isApproved(seller.isApproved())
-                .businessNumber(seller.getBusinessNumber())
-                // Seller 엔티티에 hasBankAccountCopy 필드가 없으므로 DTO에서는 false 또는 생략
-                .build();
-    }
-
-    // 승인된 업체 리스트
-    @Override
-    public List<SellerResponseDTO> getApprovedSellers() {
-        return approvalRepository.findByIsApprovedTrueAndIsActiveTrue().stream()
-                .map(seller -> SellerResponseDTO.builder()
-                        .email(seller.getEmail())
-                        .name(seller.getName())
-                        .phone(seller.getPhone())
-                        .isApproved(seller.isApproved())
-                        .businessNumber(seller.getBusinessNumber())
-                        .build())
-                .toList();
-    }
-
-}
diff --git a/back/src/main/java/com/realive/serviceimpl/admin/auction/AuctionServiceImpl.java b/back/src/main/java/com/realive/serviceimpl/admin/auction/AuctionServiceImpl.java
deleted file mode 100644
index 459c0856..00000000
--- a/back/src/main/java/com/realive/serviceimpl/admin/auction/AuctionServiceImpl.java
+++ /dev/null
@@ -1,197 +0,0 @@
-package com.realive.serviceimpl.admin.auction;
-
-import com.realive.domain.auction.Auction;
-import com.realive.domain.auction.AdminProduct;
-import com.realive.domain.product.Product;
-import com.realive.dto.auction.AdminProductDTO;
-import com.realive.dto.auction.AuctionCreateRequestDTO;
-import com.realive.dto.auction.AuctionResponseDTO;
-import com.realive.repository.auction.AuctionRepository;
-import com.realive.repository.auction.AdminProductRepository;
-import com.realive.repository.product.ProductRepository;
-import com.realive.service.admin.auction.AuctionService;
-import lombok.RequiredArgsConstructor;
-import lombok.extern.slf4j.Slf4j;
-import org.springframework.data.domain.Page;
-import org.springframework.data.domain.PageImpl;
-import org.springframework.data.domain.Pageable;
-import org.springframework.security.access.AccessDeniedException; // AccessDeniedException import 확인
-import org.springframework.stereotype.Service;
-import org.springframework.transaction.annotation.Transactional;
-// import org.springframework.util.StringUtils; // getActiveAuctions에서 필터링 시 필요
-
-import java.time.LocalDateTime;
-import java.util.Collections;
-import java.util.List;
-import java.util.Map;
-import java.util.NoSuchElementException;
-import java.util.Optional;
-import java.util.stream.Collectors;
-
-@Slf4j
-@Service
-@RequiredArgsConstructor
-@Transactional(readOnly = true)
-public class AuctionServiceImpl implements AuctionService {
-
-    private final AuctionRepository auctionRepository;
-    private final ProductRepository productRepository;
-    private final AdminProductRepository adminProductRepository;
-
-    @Override
-    @Transactional
-    public AuctionResponseDTO registerAuction(AuctionCreateRequestDTO requestDto, Long adminUserId) { // 파라미터명 변경됨
-        log.info("관리자(ID:{}) 경매 등록 요청 - DTO ProductId: {}", adminUserId, requestDto.getProductId());
-
-        // 1. AdminProduct 및 원본 Product 정보 조회 (기존 로직과 유사)
-        AdminProduct adminProduct = adminProductRepository.findByProductId(requestDto.getProductId())
-                .orElseThrow(() -> new NoSuchElementException("관리자 상품 목록에서 해당 상품을 찾을 수 없습니다. Product ID: " + requestDto.getProductId()));
-
-        if (adminProduct.isAuctioned()) {
-            throw new IllegalStateException("이미 경매에 등록된 상품입니다.");
-        }
-
-        Product originalProduct = productRepository.findById(adminProduct.getProductId().longValue())
-                .orElseThrow(() -> new NoSuchElementException("경매 대상 원본 상품 정보를 찾을 수 없습니다."));
-
-        // 2. 권한 검증 (관리자 시나리오)
-        //    - adminUserId가 유효한 관리자인지는 Spring Security에서 처리되었다고 가정.
-        //    - 여기서는 관리자가 어떤 상품에 대해 경매를 등록할 수 있는지에 대한 정책을 구현.
-        //      예시: 관리자는 isAuctioned=false이고 isActive=true인 모든 상품에 대해 경매 등록 가능.
-        //      또는, 특정 관리자 등급만 가능하다거나, 특정 카테고리 상품만 가능하다는 등의 복잡한 규칙이 있을 수 있음.
-        //      가장 기본적인 형태는, "관리자이기만 하면 특정 조건의 상품에 대해 등록 가능"으로 가정.
-
-        //    아래는 '관리자는 어떤 상품이든 등록할 수 있다'는 전제하에, 기존 판매자 ID 비교 로직을 제거하거나 주석 처리.
-        //    만약 관리자가 특정 판매자를 "대신하여" 등록하고, 그 판매자 정보가 DTO에 있다면 다른 검증 필요.
-        /*
-        if (adminProduct.getPurchasedFromSellerId() == null || !adminProduct.getPurchasedFromSellerId().equals(adminUserId.intValue())) {
-            // 이 로직은 이제 adminUserId가 관리자 ID이므로 직접적으로 맞지 않음.
-            // 만약 requestDto에 sellerId가 포함되어 있고, 관리자가 그 sellerId를 대신하여 등록한다면
-            // 그 sellerId와 adminProduct.getPurchasedFromSellerId()를 비교해야 함.
-            // 여기서는 관리자는 상품 소유권과 무관하게 등록 가능하다고 가정하고 이 검증 생략.
-            log.warn("관리자(ID:{})가 Product ID {}에 대한 경매 등록 시 권한 검증 실패 (이 부분은 관리자 정책에 맞게 수정 필요).",
-                    adminUserId, adminProduct.getProductId());
-            throw new AccessDeniedException("관리자가 해당 상품에 대한 경매를 등록할 권한이 없습니다 (정책 재검토 필요).");
-        }
-        */
-        log.info("관리자(ID:{})가 Product ID {}에 대한 경매 등록 권한 검증 통과 (기본 정책: 관리자는 등록 가능).",
-                adminUserId, adminProduct.getProductId());
-
-
-        // 3. 중복 경매 및 상품 상태 검증 (기존 로직과 유사)
-        Optional<Auction> existingActiveAuction = auctionRepository.findByProductIdAndIsClosedFalse(adminProduct.getProductId());
-        if (existingActiveAuction.isPresent()) {
-            throw new IllegalStateException("이미 해당 상품으로 진행 중인 다른 경매가 있습니다.");
-        }
-
-        if (!originalProduct.isActive()) {
-            log.warn("관리자(ID:{}) 경매 등록 실패 - Product ID {}의 상태가 부적절함 (활성: {})",
-                    adminUserId, originalProduct.getId(), originalProduct.isActive());
-            throw new IllegalStateException("경매에 등록할 수 없는 상품 상태입니다 (비활성).");
-        }
-
-        // 4. 경매 생성 및 저장 (기존 로직과 유사)
-        Auction auction = requestDto.toEntity();
-        // Auction 엔티티에 createdByAdminId 같은 필드가 있다면 여기서 설정:
-        // auction.setCreatedByAdminId(adminUserId);
-        Auction savedAuction = auctionRepository.save(auction);
-        log.info("관리자(ID:{})에 의해 경매 등록 성공 - AuctionId: {}, ProductId: {}",
-                adminUserId, savedAuction.getId(), savedAuction.getProductId());
-
-        adminProduct.setAuctioned(true);
-        adminProductRepository.save(adminProduct);
-        log.info("AdminProduct (ID: {})의 isAuctioned 상태를 true로 업데이트 완료 (관리자: {}).",
-                adminProduct.getId(), adminUserId);
-
-        AdminProductDTO adminProductDtoForResponse = AdminProductDTO.fromEntity(adminProduct, originalProduct);
-        return AuctionResponseDTO.fromEntity(savedAuction, adminProductDtoForResponse);
-    }
-
-    @Override
-    public Page<AuctionResponseDTO> getActiveAuctions(Pageable pageable, String categoryFilter, String statusFilter) {
-        // 이 메소드는 관리자가 호출. 필터링 로직은 여전히 TODO.
-        log.info("관리자 - 진행 중인 경매 목록 조회 요청 - Pageable: {}, Category: {}, Status: {}", pageable, categoryFilter, statusFilter);
-        LocalDateTime now = LocalDateTime.now();
-        Page<Auction> auctionPage = auctionRepository.findByIsClosedFalseAndEndTimeAfter(now, pageable);
-        List<AuctionResponseDTO> auctionResponseDTOs = convertToAuctionResponseDTOs(auctionPage.getContent());
-        return new PageImpl<>(auctionResponseDTOs, pageable, auctionPage.getTotalElements());
-    }
-
-    @Override
-    public AuctionResponseDTO getAuctionDetails(Integer auctionId) {
-        // 이 메소드는 관리자가 호출.
-        log.info("관리자 - 경매 상세 정보 조회 요청 - AuctionId: {}", auctionId);
-        Auction auction = auctionRepository.findById(auctionId)
-                .orElseThrow(() -> new NoSuchElementException("경매를 찾을 수 없습니다. ID: " + auctionId));
-        // ... (이하 DTO 변환 로직은 이전과 동일)
-        AdminProduct adminProduct = adminProductRepository.findByProductId(auction.getProductId())
-                .orElseThrow(() -> new NoSuchElementException("경매에 연결된 관리자 상품 정보를 찾을 수 없습니다. Product ID: " + auction.getProductId()));
-        Product product = productRepository.findById(auction.getProductId().longValue()).orElse(null);
-        AdminProductDTO adminProductDto = AdminProductDTO.fromEntity(adminProduct, product);
-        return AuctionResponseDTO.fromEntity(auction, adminProductDto);
-    }
-
-    @Override
-    public Page<AuctionResponseDTO> getAuctionsBySeller(Long sellerId, Pageable pageable) {
-        // 이 메소드는 관리자가 특정 판매자의 경매를 조회.
-        log.info("관리자 - 특정 판매자(ID:{})가 등록한 경매 목록 조회 요청. Pageable: {}", sellerId, pageable);
-        List<AdminProduct> sellerAdminProducts = adminProductRepository.findByPurchasedFromSellerId(sellerId.intValue());
-        if (sellerAdminProducts.isEmpty()) {
-            return Page.empty(pageable);
-        }
-        List<Integer> productIdsBySeller = sellerAdminProducts.stream()
-                .map(AdminProduct::getProductId)
-                .distinct()
-                .collect(Collectors.toList());
-        if (productIdsBySeller.isEmpty()) {
-            return Page.empty(pageable);
-        }
-        Page<Auction> auctionPage = auctionRepository.findByProductIdIn(productIdsBySeller, pageable);
-        List<AuctionResponseDTO> auctionResponseDTOs = convertToAuctionResponseDTOs(auctionPage.getContent());
-        return new PageImpl<>(auctionResponseDTOs, pageable, auctionPage.getTotalElements());
-    }
-
-    @Override
-    public Optional<AuctionResponseDTO> getCurrentAuctionForProduct(Integer productId) {
-        // 이 메소드는 관리자가 특정 상품의 현재 경매를 조회.
-        log.info("관리자 - 특정 상품(ID:{})에 대해 현재 진행 중인 경매 조회 요청", productId);
-        Optional<Auction> auctionOptional = auctionRepository.findByProductIdAndIsClosedFalse(productId);
-        return auctionOptional.map(auction -> {
-            AdminProduct adminProduct = adminProductRepository.findByProductId(auction.getProductId()).orElse(null);
-            Product product = null;
-            if (adminProduct != null) {
-                product = productRepository.findById(adminProduct.getProductId().longValue()).orElse(null);
-            }
-            AdminProductDTO adminProductDto = (adminProduct != null) ? AdminProductDTO.fromEntity(adminProduct, product) : null;
-            return AuctionResponseDTO.fromEntity(auction, adminProductDto);
-        });
-    }
-
-    // DTO 변환 헬퍼 메소드 (기존과 동일)
-    private List<AuctionResponseDTO> convertToAuctionResponseDTOs(List<Auction> auctions) {
-        // ... (이전 답변의 코드와 동일)
-        if (auctions == null || auctions.isEmpty()) {
-            return Collections.emptyList();
-        }
-        List<Integer> productIds = auctions.stream().map(Auction::getProductId).distinct().collect(Collectors.toList());
-        Map<Long, Product> productMap = Collections.emptyMap();
-        if (!productIds.isEmpty()) {
-            List<Long> productLongIds = productIds.stream().map(Integer::longValue).collect(Collectors.toList());
-            List<Product> products = productRepository.findAllById(productLongIds);
-            productMap = products.stream().collect(Collectors.toMap(Product::getId, p -> p));
-        }
-        Map<Integer, AdminProduct> adminProductMap = Collections.emptyMap();
-        if (!productIds.isEmpty()) {
-            List<AdminProduct> adminProducts = adminProductRepository.findByProductIdIn(productIds);
-            adminProductMap = adminProducts.stream().collect(Collectors.toMap(AdminProduct::getProductId, ap -> ap));
-        }
-        Map<Long, Product> finalProductMap = productMap;
-        Map<Integer, AdminProduct> finalAdminProductMap = adminProductMap;
-        return auctions.stream().map(auctionEntity -> {
-            Product product = finalProductMap.get(auctionEntity.getProductId().longValue());
-            AdminProduct adminProduct = finalAdminProductMap.get(auctionEntity.getProductId());
-            AdminProductDTO adminProductDto = (adminProduct != null) ? AdminProductDTO.fromEntity(adminProduct, product) : null;
-            return AuctionResponseDTO.fromEntity(auctionEntity, adminProductDto);
-        }).collect(Collectors.toList());
-    }
-}
diff --git a/back/src/main/java/com/realive/serviceimpl/admin/auction/BidServiceImpl.java b/back/src/main/java/com/realive/serviceimpl/admin/auction/BidServiceImpl.java
deleted file mode 100644
index 7ce8aa5c..00000000
--- a/back/src/main/java/com/realive/serviceimpl/admin/auction/BidServiceImpl.java
+++ /dev/null
@@ -1,142 +0,0 @@
-package com.realive.serviceimpl.admin.auction;
-
-import com.realive.domain.auction.Auction;
-import com.realive.domain.auction.Bid;
-// import com.realive.domain.customer.Customer; // CustomerRepository 병합 후 주석 해제
-import com.realive.dto.bid.BidRequestDTO;
-import com.realive.dto.bid.BidResponseDTO;
-import com.realive.repository.auction.AuctionRepository;
-import com.realive.repository.auction.BidRepository;
-// import com.realive.repository.customer.CustomerRepository; // CustomerRepository 병합 후 주석 해제
-import com.realive.service.admin.auction.BidService; // BidService 인터페이스 경로
-import lombok.RequiredArgsConstructor;
-import lombok.extern.slf4j.Slf4j;
-import org.springframework.data.domain.Page;
-import org.springframework.data.domain.PageImpl;
-import org.springframework.data.domain.Pageable;
-import org.springframework.stereotype.Service;
-import org.springframework.transaction.annotation.Transactional;
-
-import java.time.LocalDateTime;
-import java.util.List;
-import java.util.NoSuchElementException;
-import java.util.stream.Collectors;
-
-@Slf4j
-@Service
-@RequiredArgsConstructor
-@Transactional(readOnly = true)
-public class BidServiceImpl implements BidService {
-
-    private final BidRepository bidRepository;
-    private final AuctionRepository auctionRepository;
-    // private final CustomerRepository customerRepository; // CustomerRepository 병합 후 주석 해제 및 생성자에 추가
-
-    @Override
-    @Transactional
-    public BidResponseDTO placeBid(BidRequestDTO requestDto, Long customerIdFromAuth) { // 인증된 사용자의 ID (Long)
-        log.info("입찰 시도 - AuctionId: {}, BidPrice: {}, AuthenticatedCustomerId: {}",
-                requestDto.getAuctionId(), requestDto.getBidPrice(), customerIdFromAuth);
-
-        /*
-        // CustomerRepository 병합 후 주석 해제 및 로직 활성화
-        // 0. 고객 정보 조회 및 유효성 검증
-        Customer customer = customerRepository.findById(customerIdFromAuth)
-                .orElseThrow(() -> {
-                    log.warn("입찰 실패 - 존재하지 않는 고객 ID: {}", customerIdFromAuth);
-                    return new NoSuchElementException("고객 정보를 찾을 수 없습니다. ID: " + customerIdFromAuth);
-                });
-
-        // (추가) 고객 상태 검증 (예: 활성 상태인지, 입찰 가능한지 등)
-        if (!customer.isActive() || customer.isBiddingRestricted()) { // Customer 엔티티에 해당 필드가 있다고 가정
-            log.warn("입찰 실패 - 고객(ID:{})이 입찰할 수 없는 상태입니다.", customerIdFromAuth);
-            throw new IllegalStateException("현재 입찰할 수 없는 상태입니다.");
-        }
-        */
-
-        // 1. 경매 정보 조회
-        Auction auction = auctionRepository.findById(requestDto.getAuctionId())
-                .orElseThrow(() -> {
-                    log.warn("입찰 실패 - 존재하지 않는 경매 ID: {}", requestDto.getAuctionId());
-                    return new NoSuchElementException("경매 정보를 찾을 수 없습니다. ID: " + requestDto.getAuctionId());
-                });
-
-        // 2. 경매 상태 검증
-        if (auction.isClosed()) {
-            log.warn("입찰 실패 - 이미 종료된 경매입니다. AuctionId: {}", auction.getId());
-            throw new IllegalStateException("이미 종료된 경매입니다.");
-        }
-        if (LocalDateTime.now().isAfter(auction.getEndTime())) {
-            log.warn("입찰 실패 - 경매 시간이 종료되었습니다. AuctionId: {}", auction.getId());
-            // TODO: 경매 종료 처리 로직 (별도 스케줄러 또는 여기서 즉시 처리)
-            // auction.setClosed(true);
-            // auctionRepository.save(auction);
-            throw new IllegalStateException("경매 시간이 종료되었습니다.");
-        }
-        if (LocalDateTime.now().isBefore(auction.getStartTime())) {
-            log.warn("입찰 실패 - 아직 시작되지 않은 경매입니다. AuctionId: {}", auction.getId());
-            throw new IllegalStateException("아직 시작되지 않은 경매입니다.");
-        }
-
-        // 3. 입찰 가격 검증
-        if (requestDto.getBidPrice() <= auction.getCurrentPrice()) {
-            log.warn("입찰 실패 - 현재 최고가({})보다 낮은 가격({})으로 입찰 시도. AuctionId: {}",
-                    auction.getCurrentPrice(), requestDto.getBidPrice(), auction.getId());
-            throw new IllegalArgumentException("입찰 가격은 현재 최고가보다 높아야 합니다.");
-        }
-        // TODO: 최소 입찰 증가 단위(tick size) 검증 로직 추가 필요
-
-        // 4. Bid 엔티티 생성
-        Bid newBid = Bid.builder()
-                .auctionId(auction.getId())
-                .customerId(customerIdFromAuth.intValue()) // Bid.customerId는 Integer, 인증된 ID는 Long으로 가정하여 변환
-                .bidPrice(requestDto.getBidPrice())
-                .bidTime(LocalDateTime.now())
-                .build();
-
-        // 5. Bid 저장
-        Bid savedBid = bidRepository.save(newBid);
-        log.info("입찰 성공 - BidId: {}, AuctionId: {}, CustomerId: {}, BidPrice: {}",
-                savedBid.getId(), savedBid.getAuctionId(), savedBid.getCustomerId(), savedBid.getBidPrice());
-
-        // 6. Auction의 현재 가격 업데이트
-        auction.setCurrentPrice(savedBid.getBidPrice());
-        auctionRepository.save(auction);
-        log.info("경매(AuctionId: {}) 현재 가격 업데이트 완료: {}", auction.getId(), auction.getCurrentPrice());
-
-        // TODO: (선택 사항) 실시간 알림 로직 (WebSocket 등)
-
-        return BidResponseDTO.fromEntity(savedBid);
-    }
-
-    @Override
-    public Page<BidResponseDTO> getBidsForAuction(Integer auctionId, Pageable pageable) {
-        log.info("특정 경매의 입찰 내역 조회 - AuctionId: {}, Pageable: {}", auctionId, pageable);
-        if (!auctionRepository.existsById(auctionId)) {
-            log.warn("경매(ID:{}) 입찰 내역 조회 실패 - 존재하지 않는 경매", auctionId);
-            throw new NoSuchElementException("경매 정보를 찾을 수 없습니다. ID: " + auctionId);
-        }
-        // BidRepository에 findByAuctionIdOrderByBidTimeDesc 또는 findByAuctionId(Integer, Pageable)가 있어야 함
-        Page<Bid> bidPage = bidRepository.findByAuctionIdOrderByBidTimeDesc(auctionId, pageable);
-
-        List<BidResponseDTO> bidResponseDTOs = bidPage.getContent().stream()
-                .map(BidResponseDTO::fromEntity)
-                .collect(Collectors.toList());
-
-        return new PageImpl<>(bidResponseDTOs, pageable, bidPage.getTotalElements());
-    }
-
-    @Override
-    public Page<BidResponseDTO> getBidsByCustomer(Long customerId, Pageable pageable) {
-        log.info("특정 고객의 입찰 내역 조회 - CustomerId: {}, Pageable: {}", customerId, pageable);
-        // BidRepository에 findByCustomerIdOrderByBidTimeDesc 또는 findByCustomerId(Integer, Pageable)가 있어야 함
-        // Bid 엔티티의 customerId는 Integer이므로 customerId.intValue()로 변환
-        Page<Bid> bidPage = bidRepository.findByCustomerIdOrderByBidTimeDesc(customerId.intValue(), pageable);
-
-        List<BidResponseDTO> bidResponseDTOs = bidPage.getContent().stream()
-                .map(BidResponseDTO::fromEntity)
-                .collect(Collectors.toList());
-
-        return new PageImpl<>(bidResponseDTOs, pageable, bidPage.getTotalElements());
-    }
-}
diff --git a/back/src/main/java/com/realive/serviceimpl/order/OrderDeliveryServiceImpl.java b/back/src/main/java/com/realive/serviceimpl/order/OrderDeliveryServiceImpl.java
deleted file mode 100644
index 31759a9f..00000000
--- a/back/src/main/java/com/realive/serviceimpl/order/OrderDeliveryServiceImpl.java
+++ /dev/null
@@ -1,132 +0,0 @@
-// package com.realive.serviceimpl.order;
-
-// import com.realive.domain.common.enums.DeliveryStatus;
-// import com.realive.domain.common.enums.SellerDeliveryStatus;
-// import com.realive.domain.order.Order;
-// import com.realive.domain.order.OrderDelivery;
-// import com.realive.domain.order.SellerOrderDelivery;
-// import com.realive.domain.product.Product;
-// import com.realive.dto.order.DeliveryStatusUpdateDTO;
-// import com.realive.dto.order.OrderDeliveryResponseDTO;
-// import com.realive.repository.order.OrderDeliveryRepository;
-// import com.realive.repository.order.SellerOrderDeliveryRepository;
-// import com.realive.service.order.OrderDeliveryService;
-// import lombok.RequiredArgsConstructor;
-
-
-// import org.springframework.stereotype.Service;
-// import org.springframework.transaction.annotation.Transactional;
-
-// import java.time.LocalDateTime;
-// import java.util.List;
-// import java.util.stream.Collectors;
-
-// /**
-//  * 배송 상태 변경 및 조회 서비스 구현체
-//  */
-// @Service
-// @RequiredArgsConstructor
-// public class OrderDeliveryServiceImpl implements OrderDeliveryService {
-
-//     private final SellerOrderDeliveryRepository sellerorderDeliveryRepository;
-
-//     /**
-//      * 배송 상태를 업데이트하고 상태별 처리 시간 자동 기록
-//      */
-//     @Override
-//     @Transactional
-//     public void updateDeliveryStatus(Long sellerId, Long orderId, DeliveryStatusUpdateDTO dto) {
-//         SellerOrderDelivery delivery = sellerorderDeliveryRepository.findByOrderId(orderId)
-//                 .orElseThrow(() -> new IllegalArgumentException("배송 정보가 존재하지 않습니다."));
-
-//         // 🔒 본인 주문인지 검증
-//         if (!delivery.getOrder().getProduct().getSeller().getId().equals(sellerId)) {
-//             throw new SecurityException("자신의 주문에 대해서만 배송 상태를 변경할 수 있습니다.");
-//         }
-
-//         DeliveryStatus currentStatus = delivery.getDeliveryStatus();
-//         DeliveryStatus newStatus = dto.getDeliveryStatus();
-
-//         // 🔒 상태 전이 제한 (결제완료 → 배송중 → 배송완료만 허용)
-//         boolean validTransition =
-//                 (currentStatus == SellerDeliveryStatus.결제완료 && newStatus == SellerDeliveryStatus.배송중) ||
-//                         (currentStatus == SellerDeliveryStatus.배송중 && newStatus == SellerDeliveryStatus.배송완료);
-
-//         if (!validTransition) {
-//             throw new IllegalStateException("유효하지 않은 배송 상태 전이입니다.");
-//         }
-
-//         // ✅ 운송장 번호와 택배사 정보는 배송중일 때 선택적으로 입력 가능
-//         if (newStatus == SellerDeliveryStatus.배송중) {
-//             if (dto.getTrackingNumber() != null) {
-//                 delivery.setTrackingNumber(dto.getTrackingNumber());
-//             }
-//             if (dto.getCarrier() != null) {
-//                 delivery.setCarrier(dto.getCarrier());
-//             }
-//         }
-
-//         // 📦 상태 및 관련 정보 업데이트
-//         delivery.setDeliveryStatus(newStatus);
-        
-//         if (newStatus == SellerDeliveryStatus.배송중 && delivery.getStartDate() == null) {
-//             delivery.setStartDate(LocalDateTime.now());
-//         }
-
-//         if (newStatus == SellerDeliveryStatus.배송완료 && delivery.getCompleteDate() == null) {
-//             delivery.setCompleteDate(LocalDateTime.now());
-//         }
-//     }
-
-//     /**
-//      * 판매자 ID 기준 배송 목록 조회
-//      */
-//     @Override
-//     @Transactional(readOnly = true)
-//     public List<OrderDeliveryResponseDTO> getDeliveriesBySeller(Long sellerId) {
-//         List<OrderDelivery> deliveries = orderDeliveryRepository.findAllBySellerId(sellerId);
-
-//         return deliveries.stream().map(delivery -> {
-//             Order order = delivery.getOrder();
-//             Product product = order.getProduct();
-
-//             return OrderDeliveryResponseDTO.builder()
-//                     .orderId(order.getId())
-//                     .productName(product.getName())
-//                     //.buyerId(order.getCustomer().getId()) // 구매자 ID 포함 필요 시 해제
-//                     .deliveryStatus(delivery.getDeliveryStatus())
-//                     .startDate(delivery.getStartDate())
-//                     .completeDate(delivery.getCompleteDate())
-//                     .trackingNumber(delivery.getTrackingNumber())
-//                     .carrier(delivery.getCarrier())
-//                     .build();
-//         }).collect(Collectors.toList());
-//     }
-
-//     @Override
-//     public OrderDeliveryResponseDTO getDeliveryByOrderId(Long sellerId, Long orderId) {
-//         OrderDelivery delivery = orderDeliveryRepository.findByOrderId(orderId)
-//                 .orElseThrow(() -> new IllegalArgumentException("배송 정보가 존재하지 않습니다"));
-
-//         // 본인 주문 검증
-//         if (!delivery.getOrder().getProduct().getSeller().getId().equals(sellerId)) {
-//             throw new SecurityException("자신의 상품이 아닌 주문에 접근할 수 없습니다.");
-
-//         }
-
-//         Order order = delivery.getOrder();
-//         Product product = order.getProduct();
-
-//         return OrderDeliveryResponseDTO.builder()
-//                 .orderId(order.getId())
-//                 .productName(product.getName())
-//                 //.buyerId(order.getCustomer().getId()) // 구매자 ID 포함 필요 시 해제
-//                 .deliveryStatus(delivery.getDeliveryStatus())
-//                 .startDate(delivery.getStartDate())
-//                 .completeDate(delivery.getCompleteDate())
-//                 .trackingNumber(delivery.getTrackingNumber())
-//                 .carrier(delivery.getCarrier())
-//                 .build();
-        
-//     }
-// }
\ No newline at end of file
diff --git a/back/src/main/java/com/realive/serviceimpl/product/ProductServiceImpl.java b/back/src/main/java/com/realive/serviceimpl/product/ProductServiceImpl.java
deleted file mode 100644
index 756d9713..00000000
--- a/back/src/main/java/com/realive/serviceimpl/product/ProductServiceImpl.java
+++ /dev/null
@@ -1,303 +0,0 @@
-package com.realive.serviceimpl.product;
-
-import com.realive.domain.common.enums.MediaType;
-import com.realive.domain.product.*;
-import com.realive.domain.seller.Seller;
-import com.realive.dto.page.PageResponseDTO;
-import com.realive.dto.product.*;
-import com.realive.repository.product.*;
-import com.realive.repository.seller.SellerRepository;
-import com.realive.service.common.FileUploadService;
-import com.realive.service.product.ProductService;
-import com.realive.service.seller.SellerService;
-
-import jakarta.transaction.Transactional;
-import lombok.RequiredArgsConstructor;
-
-import org.springframework.data.domain.Page;
-import org.springframework.stereotype.Service;
-import org.springframework.web.multipart.MultipartFile;
-
-import java.util.List;
-import java.util.Map;
-import java.util.stream.Collectors;
-
-@Service
-@RequiredArgsConstructor
-@Transactional
-public class ProductServiceImpl implements ProductService {
-
-        
-    private final ProductImageRepository productImageRepository;
-    private final ProductRepository productRepository;
-    private final CategoryRepository categoryRepository;
-    private final SellerRepository sellerRepository;
-    private final DeliveryPolicyRepository deliveryPolicyRepository;
-    private final FileUploadService fileUploadService;
-    private final SellerService sellerService;
-
-    @Override
-    public Long createProduct(ProductRequestDTO dto, Long sellerId) {
-        Seller seller = sellerRepository.findById(sellerId)
-                .orElseThrow(() -> new IllegalArgumentException("존재하지 않는 판매자입니다."));
-
-        Category category = null;
-        if (dto.getCategoryId() != null) {
-            category = categoryRepository.findById(dto.getCategoryId())
-                    .orElseThrow(() -> new IllegalArgumentException("존재하지 않는 카테고리입니다."));
-        }
-
-        Product product = Product.builder()
-                .name(dto.getName())
-                .description(dto.getDescription())
-                .price(dto.getPrice())
-                .stock(dto.getStock() != null ? dto.getStock() : 1)
-                .width(dto.getWidth())
-                .depth(dto.getDepth())
-                .height(dto.getHeight())
-                .status(dto.getStatus())
-                .active(dto.getActive() != null ? dto.getActive() : true)
-                .category(category)
-                .seller(seller)
-                .build();
-
-        productRepository.save(product);
-
-        // 대표 이미지 저장
-        String imageUrl = fileUploadService.upload(dto.getImageThumbnail(), "product", sellerId);
-        productImageRepository.save(ProductImage.builder()
-                .url(imageUrl)
-                .isThumbnail(true)
-                .mediaType(MediaType.IMAGE)
-                .product(product)
-                .build());
-
-        // 대표 영상 저장 (선택)
-        if (dto.getVideoThumbnail() != null && !dto.getVideoThumbnail().isEmpty()) {
-            String videoUrl = fileUploadService.upload(dto.getVideoThumbnail(), "product", sellerId);
-            productImageRepository.save(ProductImage.builder()
-                    .url(videoUrl)
-                    .isThumbnail(true)
-                    .mediaType(MediaType.VIDEO)
-                    .product(product)
-                    .build());
-        }
-
-        // 서브 이미지 저장
-        if (dto.getSubImages() != null && !dto.getSubImages().isEmpty()) {
-            for (MultipartFile file : dto.getSubImages()) {
-                if (file != null && !file.isEmpty()) {
-                    String url = fileUploadService.upload(file, "product", sellerId);
-                    productImageRepository.save(ProductImage.builder()
-                            .url(url)
-                            .isThumbnail(false)
-                            .mediaType(MediaType.IMAGE)
-                            .product(product)
-                            .build());
-                }
-            }
-        }
-
-        // 배송 정책 저장
-        if (dto.getDeliveryPolicy() != null) {
-            DeliveryPolicy policy = DeliveryPolicy.builder()
-                    .type(dto.getDeliveryPolicy().getType())
-                    .cost(dto.getDeliveryPolicy().getCost())
-                    .regionLimit(dto.getDeliveryPolicy().getRegionLimit())
-                    .product(product)
-                    .build();
-            deliveryPolicyRepository.save(policy);
-        }
-
-        return product.getId();
-    }
-
-    @Override
-    public void updateProduct(Long productId, ProductRequestDTO dto, Long sellerId) {
-        Product product = productRepository.findById(productId)
-                .orElseThrow(() -> new IllegalArgumentException("상품이 존재하지 않습니다."));
-
-        if (!product.getSeller().getId().equals(sellerId)) {
-            throw new SecurityException("해당 상품에 대한 수정 권한이 없습니다.");
-        }
-
-        // 기존 썸네일 이미지/영상 삭제
-        productImageRepository.findByProductId(productId).stream()
-                .filter(ProductImage::isThumbnail)
-                .forEach(productImageRepository::delete);
-
-        // 대표 이미지 저장
-        if (dto.getImageThumbnail() != null && !dto.getImageThumbnail().isEmpty()) {
-            String imageUrl = fileUploadService.upload(dto.getImageThumbnail(), "product", sellerId);
-            productImageRepository.save(ProductImage.builder()
-                    .url(imageUrl)
-                    .isThumbnail(true)
-                    .mediaType(MediaType.IMAGE)
-                    .product(product)
-                    .build());
-        }
-
-        // 대표 영상 저장
-        if (dto.getVideoThumbnail() != null && !dto.getVideoThumbnail().isEmpty()) {
-            String videoUrl = fileUploadService.upload(dto.getVideoThumbnail(), "product", sellerId);
-            productImageRepository.save(ProductImage.builder()
-                    .url(videoUrl)
-                    .isThumbnail(true)
-                    .mediaType(MediaType.VIDEO)
-                    .product(product)
-                    .build());
-        }
-
-        // 서브 이미지 저장
-        if (dto.getSubImages() != null && !dto.getSubImages().isEmpty()) {
-            for (MultipartFile file : dto.getSubImages()) {
-                if (file != null && !file.isEmpty()) {
-                    String url = fileUploadService.upload(file, "product", sellerId);
-                    productImageRepository.save(ProductImage.builder()
-                            .url(url)
-                            .isThumbnail(false)
-                            .mediaType(MediaType.IMAGE)
-                            .product(product)
-                            .build());
-                }
-            }
-        }
-
-        // 상품 정보 수정
-        product.setName(dto.getName());
-        product.setDescription(dto.getDescription());
-        product.setPrice(dto.getPrice());
-        product.setStock(dto.getStock() != null ? dto.getStock() : product.getStock());
-        product.setWidth(dto.getWidth());
-        product.setDepth(dto.getDepth());
-        product.setHeight(dto.getHeight());
-        product.setStatus(dto.getStatus());
-        product.setActive(dto.getActive() != null ? dto.getActive() : product.isActive());
-
-        if (dto.getCategoryId() != null) {
-            Category category = categoryRepository.findById(dto.getCategoryId())
-                    .orElseThrow(() -> new IllegalArgumentException("카테고리를 찾을 수 없습니다."));
-            product.setCategory(category);
-        }
-
-        if (dto.getDeliveryPolicy() != null) {
-            DeliveryPolicy policy = deliveryPolicyRepository.findByProduct(product)
-                    .orElse(new DeliveryPolicy());
-
-            policy.setProduct(product);
-            policy.setType(dto.getDeliveryPolicy().getType());
-            policy.setCost(dto.getDeliveryPolicy().getCost());
-            policy.setRegionLimit(dto.getDeliveryPolicy().getRegionLimit());
-
-            deliveryPolicyRepository.save(policy);
-        }
-
-        productRepository.save(product);
-    }
-
-    @Override
-    public void deleteProduct(Long productId, Long sellerId) {
-        Product product = productRepository.findById(productId)
-                .orElseThrow(() -> new IllegalArgumentException("상품이 존재하지 않습니다."));
-
-        if (!product.getSeller().getId().equals(sellerId)) {
-            throw new SecurityException("해당 상품에 대한 삭제 권한이 없습니다.");
-        }
-
-
-        product.setActive(false);
-    }
-    //상품 목록 조회 (판매자 전용)
-    @Override
-    public PageResponseDTO<ProductListDTO> getProductsBySeller(String email, ProductSearchCondition condition) {
-        
-        Seller seller = sellerService.getByEmail(email);
-        Long sellerId = seller.getId(); 
-
-        Page<Product> result = productRepository.searchProducts(condition, sellerId);
-        List<Product> products = result.getContent();
-
-        List<Long> productIds = products.stream()
-                .map(Product::getId)
-                .toList();
-
-        List<Object[]> rows = productImageRepository.findThumbnailUrlsByProductIds(productIds, MediaType.IMAGE);
-        Map<Long, String> imageMap = rows.stream()
-                .collect(Collectors.toMap(
-                        row -> (Long) row[0],
-                        row -> (String) row[1]
-                ));
-
-        List<ProductListDTO> dtoList = products.stream()
-                .map(product -> ProductListDTO.from(product, imageMap.get(product.getId())))
-                .collect(Collectors.toList());
-
-        return PageResponseDTO.<ProductListDTO>withAll()
-                .pageRequestDTO(condition)
-                .dtoList(dtoList)
-                .total((int) result.getTotalElements())
-                .build();
-    }
-
-    @Override
-    public ProductResponseDTO getProductDetail(Long productId) {
-        Product product = productRepository.findById(productId)
-                .orElseThrow(() -> new IllegalArgumentException("상품을 찾을 수 없습니다."));
-
-        return ProductResponseDTO.builder()
-                .id(product.getId())
-                .name(product.getName())
-                .description(product.getDescription())
-                .price(product.getPrice())
-                .stock(product.getStock())
-                .width(product.getWidth())
-                .depth(product.getDepth())
-                .height(product.getHeight())
-                .status(product.getStatus().name())
-                .isActive(product.isActive())
-                .imageThumbnailUrl(getThumbnailUrlByType(productId, MediaType.IMAGE))
-                .videoThumbnailUrl(getThumbnailUrlByType(productId, MediaType.VIDEO))
-                .categoryName(Category.getCategoryFullPath(product.getCategory()))
-                .sellerName(product.getSeller().getName())
-                .build();
-    }
-
-    public String getThumbnailUrlByType(Long productId, MediaType mediaType) {
-        return productImageRepository
-                .findFirstByProductIdAndIsThumbnailTrueAndMediaType(productId, mediaType)
-                .map(ProductImage::getUrl)
-                .orElse(null);
-    }
-
-    // 구매자 전용 상품 목록 조회
-    @Override
-    public PageResponseDTO<ProductListDTO> getVisibleProducts(CustomerProductSearchCondition condition) {
-       Page<Product> result = productRepository.searchVisibleProducts(condition);
-       List<Product> products = result.getContent();
-
-       //상품 id 목록 추출
-       List<Long> productIDs = products.stream()
-                .map(Product :: getId)
-                .toList();
-                
-        //상품 이미지 매핑
-        List<Object[]> rows = productImageRepository.findThumbnailUrlsByProductIds(productIDs, MediaType.IMAGE);
-        Map<Long, String> imageMap = rows.stream()
-                .collect(Collectors.toMap(
-                        row -> (Long) row[0],
-                        row -> (String) row[1]
-                ));
-        
-        //상품 DTO 매핑
-        List<ProductListDTO> dtoList = products.stream()
-                .map(product -> ProductListDTO.from(product, imageMap.get(product.getId())))
-                .toList();
-
-        //반환
-        return PageResponseDTO.<ProductListDTO>withAll()
-                .pageRequestDTO(condition)
-                .dtoList(dtoList)
-                .total((int) result.getTotalElements())
-                .build();
-        }
-}
diff --git a/back/src/main/java/com/realive/serviceimpl/seller/SellerQnaServiceImpl.java b/back/src/main/java/com/realive/serviceimpl/seller/SellerQnaServiceImpl.java
deleted file mode 100644
index 723670a8..00000000
--- a/back/src/main/java/com/realive/serviceimpl/seller/SellerQnaServiceImpl.java
+++ /dev/null
@@ -1,61 +0,0 @@
-package com.realive.serviceimpl.seller;
-
-import com.realive.domain.seller.Seller;
-import com.realive.domain.seller.SellerQna;
-import com.realive.dto.seller.SellerQnaAnswerRequestDTO;
-import com.realive.dto.seller.SellerQnaResponseDTO;
-import com.realive.repository.seller.SellerQnaRepository;
-import com.realive.repository.seller.SellerRepository;
-import com.realive.service.seller.SellerQnaService;
-import lombok.RequiredArgsConstructor;
-import org.springframework.data.domain.Page;
-import org.springframework.data.domain.Pageable;
-import org.springframework.stereotype.Service;
-
-import java.time.LocalDateTime;
-
-/**
- * 판매자 QnA 서비스 구현 클래스
- */
-@Service
-@RequiredArgsConstructor
-public class SellerQnaServiceImpl implements SellerQnaService {
-
-    private final SellerQnaRepository qnaRepository;
-    private final SellerRepository sellerRepository;
-
-    @Override
-    public Page<SellerQnaResponseDTO> getQnaListByEmail(String email, Pageable pageable) {
-        Seller seller = sellerRepository.findByEmailAndIsActiveTrue(email)
-                .orElseThrow(() -> new IllegalArgumentException("판매자 정보가 존재하지 않습니다."));
-        return qnaRepository.findBySellerId(seller.getId(), pageable)
-                .map(qna -> SellerQnaResponseDTO.builder()
-                        .id(qna.getId())
-                        .title(qna.getTitle())
-                        .content(qna.getContent())
-                        .answer(qna.getAnswer())
-                        .isAnswered(qna.getIsAnswered())
-                        .createdAt(qna.getCreatedAt())
-                        .updatedAt(qna.getUpdatedAt())
-                        .answeredAt(qna.getAnsweredAt())
-                        .build());
-    }
-
-    @Override
-    public void answerQnaByEmail(String email, Long qnaId, SellerQnaAnswerRequestDTO dto) {
-        Seller seller = sellerRepository.findByEmailAndIsActiveTrue(email)
-                .orElseThrow(() -> new IllegalArgumentException("판매자 정보가 존재하지 않습니다."));
-
-        SellerQna qna = qnaRepository.findById(qnaId)
-                .orElseThrow(() -> new IllegalArgumentException("QnA를 찾을 수 없습니다."));
-
-        if (!qna.getSeller().getId().equals(seller.getId())) {
-            throw new SecurityException("본인의 QnA에만 답변할 수 있습니다.");
-        }
-
-        qna.setAnswer(dto.getAnswer());
-        qna.setAnswered(true);
-        qna.setAnsweredAt(LocalDateTime.now());
-        qnaRepository.save(qna);
-    }
-}
\ No newline at end of file
diff --git a/back/src/main/java/com/realive/serviceimpl/seller/SellerServiceImpl.java b/back/src/main/java/com/realive/serviceimpl/seller/SellerServiceImpl.java
deleted file mode 100644
index 20a15edc..00000000
--- a/back/src/main/java/com/realive/serviceimpl/seller/SellerServiceImpl.java
+++ /dev/null
@@ -1,178 +0,0 @@
-package com.realive.serviceimpl.seller;
-
-
-
-import java.util.List;
-
-import org.springframework.security.crypto.password.PasswordEncoder;
-import org.springframework.stereotype.Service;
-import org.springframework.web.multipart.MultipartFile;
-
-import com.realive.domain.common.enums.SellerFileType;
-import com.realive.domain.seller.Seller;
-import com.realive.domain.seller.SellerDocument;
-import com.realive.dto.seller.SellerLoginRequestDTO;
-import com.realive.dto.seller.SellerLoginResponseDTO;
-import com.realive.dto.seller.SellerResponseDTO;
-import com.realive.dto.seller.SellerSignupDTO;
-import com.realive.dto.seller.SellerUpdateDTO;
-import com.realive.repository.seller.SellerDocumentRepository;
-import com.realive.repository.seller.SellerRepository;
-import com.realive.security.JwtUtil;
-import com.realive.service.common.FileUploadService;
-import com.realive.service.seller.SellerService;
-
-import jakarta.transaction.Transactional;
-import lombok.RequiredArgsConstructor;
-import lombok.extern.log4j.Log4j2;
-
-@Log4j2
-@Service
-@RequiredArgsConstructor
-public class SellerServiceImpl implements SellerService{
-
-    private final SellerRepository sellerRepository;
-    private final PasswordEncoder passwordEncoder;
-    private final JwtUtil jwtUtil;
-    private final SellerDocumentRepository sellerDocumentRepository;
-    private final FileUploadService fileUploadService;
-
-     @Override
-    public Seller getByEmail(String email){
-        return sellerRepository.findByEmail(email)
-                .orElseThrow(()-> new IllegalArgumentException("존재하지 않는 이메일입니다."));
-    }
-
-
-    //로그인
-    @Override
-    public SellerLoginResponseDTO login(SellerLoginRequestDTO reqdto){
-
-       
-
-        // email로 사용자 찾기
-        Seller seller = sellerRepository.findByEmailAndIsActiveTrue(reqdto.getEmail())
-                .orElseThrow(()-> new IllegalArgumentException("존재하지 않는 이메일입니다."));
-
-        // 비밀번호 확인
-        if (!passwordEncoder.matches(reqdto.getPassword(), seller.getPassword())) {
-            throw new IllegalArgumentException("비밀번호가 일치하지 않습니다.");
-
-        }
-        // accesstoken, refreshtoken 생성
-        String accessToken = jwtUtil.generateAccessToken(seller);
-        String refreshToken = jwtUtil.generateRefreshToken(seller);
-
-        // dto 반환
-        return SellerLoginResponseDTO.builder()
-                .accessToken(accessToken)
-                .refreshToken(refreshToken)
-                .email(seller.getEmail())
-                .name(seller.getName())
-                .build();
-    }
-
-    // 판매자 정보 조회 
-    @Override
-    public SellerResponseDTO getMyInfo(String email){
-
-        Seller seller = sellerRepository.findByEmail(email)
-                .orElseThrow(()-> new IllegalArgumentException("존재하지 않는 판매자입니다."));
-
-        return SellerResponseDTO.builder()
-                .email(seller.getEmail())
-                .name(seller.getName())
-                .phone(seller.getPhone())
-                .isApproved(seller.isApproved())
-                .businessNumber(seller.getBusinessNumber())
-                .hasBankAccountCopy(true)
-                .build();
-
-    }
-    // 회원가입
-    @Override
-    public void registerSeller(SellerSignupDTO dto, MultipartFile businessLicense, MultipartFile bankAcountCopy){
-        
-        
-        
-        
-        //이메일 존재 유무 검증.
-        if (sellerRepository.existsByEmail(dto.getEmail())) {
-            throw new IllegalArgumentException("이미 존재하는 이메일입니다.");
-
-        }
-        //이름 중복 검증.
-        if (sellerRepository.existsByName(dto.getName())) {
-            throw new IllegalArgumentException("이미 존재하는 이름입니다.");
-        }
-        //비번 인코딩저장.
-        String encodedPassword = passwordEncoder.encode(dto.getPassword());
-
-        Seller seller = Seller.builder()
-                .email(dto.getEmail())
-                .name(dto.getName())
-                .phone(dto.getPhone())
-                .password(encodedPassword)
-                .businessNumber(dto.getBusinessNumber())
-                .isApproved(false)
-                .build();
-        //dto 받은거 저장.
-        sellerRepository.save(seller);
-
-        //파일 업로드 
-        String licenseUrl = fileUploadService.upload(businessLicense, "사업자등록증", seller.getId());
-        String bankUrl = fileUploadService.upload(bankAcountCopy, "통장사본", seller.getId());
-
-        SellerDocument licenceDoc = SellerDocument.builder()
-                .seller(seller)
-                .fileType(SellerFileType.사업자등록증)
-                .fileUrl(licenseUrl)
-                .isVerified(false)
-                .build();
-        
-         SellerDocument bankDoc = SellerDocument.builder()
-                .seller(seller)
-                .fileType(SellerFileType.통장사본)
-                .fileUrl(bankUrl)
-                .isVerified(false)
-                .build();
-
-        sellerDocumentRepository.saveAll(List.of(licenceDoc,bankDoc));
-    
-    }   
-    //회원수정
-    @Override
-    @Transactional
-    public void updateSeller(String email, SellerUpdateDTO dto) {
-        Seller seller = sellerRepository.findByEmail(email)
-                .orElseThrow(()-> new IllegalArgumentException("존재하지 않는 판매자입니다."));
-
-        if (!seller.getName().equals(dto.getName())) {
-            if(sellerRepository.existsByName(dto.getName())){
-                throw new IllegalArgumentException("이미 사용중인 이름입니다.");
-            }
-
-            seller.setName(dto.getName());
-
-        }//end if
-
-        if (!seller.getPhone().equals(dto.getPhone())) {
-
-            seller.setPhone(dto.getPhone());
-
-        }//end if
-
-        if (dto.getNewPassword() != null && !dto.getNewPassword().isBlank()) {
-
-            String encodedPassword = passwordEncoder.encode(dto.getNewPassword());
-
-            seller.setPassword(encodedPassword);
-
-        }//end if
-
-    }
-
-   
-  
-}
-
diff --git a/back/src/main/java/com/realive/util/ImageUploader.java b/back/src/main/java/com/realive/util/ImageUploader.java
deleted file mode 100644
index 8481ca9a..00000000
--- a/back/src/main/java/com/realive/util/ImageUploader.java
+++ /dev/null
@@ -1,8 +0,0 @@
-package com.realive.util;
-
-import org.springframework.web.multipart.MultipartFile;
-
-public interface ImageUploader {
-    String uploadImage(MultipartFile file);
-    String uploadImage(MultipartFile file, String prefix);
-}
\ No newline at end of file
diff --git a/back/src/main/java/com/realive/util/LocalDiskImageUploader.java b/back/src/main/java/com/realive/util/LocalDiskImageUploader.java
deleted file mode 100644
index f83922f9..00000000
--- a/back/src/main/java/com/realive/util/LocalDiskImageUploader.java
+++ /dev/null
@@ -1,57 +0,0 @@
-package com.realive.util;
-
-import org.springframework.stereotype.Component;
-import org.springframework.web.multipart.MultipartFile;
-import org.springframework.beans.factory.annotation.Value; // @Value 어노테이션 사용을 위해 추가
-
-import java.io.IOException;
-import java.nio.file.Files;
-import java.nio.file.Path;
-import java.nio.file.Paths;
-import java.util.UUID;
-
-@Component // Spring Bean으로 등록
-public class LocalDiskImageUploader implements ImageUploader {
-
-    // 이미지를 저장할 로컬 디렉토리 경로 (application.properties 등에서 설정)
-    @Value("${file.upload-dir}")
-    private String uploadDir;
-
-    @Override
-    public String uploadImage(MultipartFile file) {
-        return uploadImage(file, null);
-    }
-
-    @Override
-    public String uploadImage(MultipartFile file, String prefix) {
-        if (file.isEmpty()) {
-            return null;
-        }
-
-        try {
-            // 업로드 디렉토리 생성 (없으면)
-            Path uploadPath = Paths.get(uploadDir).toAbsolutePath().normalize();
-            Files.createDirectories(uploadPath);
-
-            String originalFilename = file.getOriginalFilename();
-            String uuid = UUID.randomUUID().toString();
-            String fileExtension = "";
-            if (originalFilename != null && originalFilename.contains(".")) {
-                fileExtension = originalFilename.substring(originalFilename.lastIndexOf("."));
-            }
-
-            // 파일명에 접두사 적용
-            String fileName = (prefix != null && !prefix.isEmpty() ? prefix : "") + uuid + fileExtension;
-            Path filePath = uploadPath.resolve(fileName);
-
-            // 파일 저장
-            Files.copy(file.getInputStream(), filePath);
-
-            // 로컬 파일의 경우 URL은 서비스할 서버의 경로를 가정 (예: /images/{fileName})
-            // 실제 운영 환경에서는 Nginx 등을 통해 정적 파일 서비스하거나, 클라우드 스토리지 URL 사용
-            return "/images/" + fileName; // 예시 URL 반환
-        } catch (IOException e) {
-            throw new RuntimeException("Failed to upload image to local disk: " + file.getOriginalFilename(), e);
-        }
-    }
-}
\ No newline at end of file
diff --git a/back/src/main/resources/application.yml b/back/src/main/resources/application.yml
index 025ccfc7..016d2264 100644
--- a/back/src/main/resources/application.yml
+++ b/back/src/main/resources/application.yml
@@ -3,6 +3,9 @@ server:
   port: 8080
   servlet:
     context-path:
+  error:
+    whitelabel:
+      enabled: false
 
 spring:
   config:
diff --git a/back/src/test/java/com/realive/login/LoginTests.java b/back/src/test/java/com/realive/login/LoginTests.java
deleted file mode 100644
index f4eb0aa9..00000000
--- a/back/src/test/java/com/realive/login/LoginTests.java
+++ /dev/null
@@ -1,64 +0,0 @@
-package com.realive.login;
-
-import java.time.LocalDate;
-
-import org.junit.jupiter.api.Test;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.boot.test.context.SpringBootTest;
-import org.springframework.security.crypto.password.PasswordEncoder;
-import org.springframework.test.annotation.Rollback;
-
-import com.realive.domain.customer.Customer;
-import com.realive.domain.customer.Gender;
-import com.realive.domain.customer.SignupMethod;
-import com.realive.repository.customer.CustomerRepository;
-
-import jakarta.transaction.Transactional;
-import lombok.extern.log4j.Log4j2;
-
-@Transactional
-@SpringBootTest
-@Log4j2
-public class LoginTests {
-
-    @Autowired
-    private CustomerRepository customerRepository;
-
-    //PasswordEncoder 주입받기 
-    @Autowired
-    private PasswordEncoder passwordEncoder;
-
-    // @Rollback
-    // @Test
-    // public void testEncode() {
-
-    //     for (int i = 1; i <= 20; i++) {
-    //         Customer customer = new Customer("user" + i + "@gmail.com", passwordEncoder.encode("1111"));
-    //         customer.setName("사용자" + i);
-    //         customer.setPhone("010-1234-56" + String.format("%02d", i));
-    //         customer.setAddress("서울시 어딘가 " + i + "번지");
-    //         customer.setBirth(LocalDate.of(1990 + (i % 10), (i % 12) + 1, (i % 28) + 1));
-    //         customer.setGender(i % 2 == 0 ? Gender.MALE : Gender.FEMALE);
-
-    //         // SignupMethod는 USER / KAKAO / GOOGLE 순환으로 분배
-    //         if (i % 3 == 0) {
-    //             customer.setSignupMethod(SignupMethod.KAKAO);
-    //         } else if (i % 3 == 1) {
-    //             customer.setSignupMethod(SignupMethod.GOOGLE);
-    //         } else {
-    //             customer.setSignupMethod(SignupMethod.USER);
-    //         }
-
-    //         // isActive와 penaltyScore 설정
-    //         if (i % 5 == 0) {
-    //             customer.setPenaltyScore(15); // 제재 점수
-    //             customer.setIsActive(false);  // 탈퇴 상태
-    //         }
-
-    //         customerRepository.save(customer);
-    //     }
-
-    // }
-
-    
-}
diff --git a/back/src/test/java/com/realive/product/ProductRepoTests.java b/back/src/test/java/com/realive/product/ProductRepoTests.java
deleted file mode 100644
index 10893589..00000000
--- a/back/src/test/java/com/realive/product/ProductRepoTests.java
+++ /dev/null
@@ -1,92 +0,0 @@
-package com.realive.product;
-
-import static org.junit.jupiter.api.Assertions.assertEquals;
-
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.boot.test.context.SpringBootTest;
-import org.springframework.transaction.annotation.Transactional;
-
-import com.querydsl.jpa.impl.JPAQueryFactory;
-import com.realive.domain.common.enums.MediaType;
-import com.realive.domain.common.enums.ProductStatus;
-import com.realive.domain.product.Product;
-import com.realive.domain.product.ProductImage;
-import com.realive.dto.product.ProductListDTO;
-import com.realive.repository.customer.productview.ProductSearch;
-import com.realive.repository.customer.productview.ProductViewRepository;
-
-import jakarta.persistence.EntityManager;
-
-import lombok.extern.log4j.Log4j2;
-
-@SpringBootTest
-@Log4j2
-@Transactional
-public class ProductRepoTests {
-
-
-    @Autowired(required = false)
-    private ProductViewRepository productRepository;
-
-    @Autowired
-    private JPAQueryFactory queryFactory;
-
-    @Autowired
-    private EntityManager em;
-    
-
-    // @Test
-    // public void testSearch1() {
-    //     // 페이지 번호 0, 페이지 크기 5로 요청
-    //     Pageable pageable = PageRequest.of(0,10);
-        
-    //     //페이징 조회
-    //     List<ProductListDto> result = productRepository.productList(pageable);
-
-    //     // 조회 결과 출력
-    //     result.forEach(dto -> {
-    //         System.out.println(dto.getId() + " | " + dto.getName() + " | " + dto.getPrice() + " | " + dto.getThumbnailUrl());
-    //     });
-    // }
-
- 
-    //더미데이터 추가해서 페이징 테스트
-    // @Rollback(false) 
-    // @Test
-    // public void testSearchWithMultipleDummyData() {
-
-    //     // 10개의 상품 + 썸네일 이미지 생성 및 저장
-    //     for (int i = 1; i <= 15; i++) {
-    //         Product product = Product.builder()
-    //                 .name("테스트 상품 " + i)
-    //                 .price(10000 * i)
-    //                 .status(ProductStatus.상)  // enum 상수를 넣어야 함
-    //                 .isActive(true)
-    //                 .build();
-
-    //         productRepository.save(product);
-
-    //         ProductImage thumbnail = ProductImage.builder()
-    //                 .product(product)
-    //                 .url("http://example.com/image" + i + ".jpg")
-    //                 .isThumbnail(true)
-    //                 .mediaType(MediaType.IMAGE)
-    //                 .build();
-
-    //         em.persist(thumbnail);
-    //     }
-
-    //     em.flush();
-    //     em.clear();
-
-    //     Pageable pageable = PageRequest.of(0, 10);
-    //     List<ProductListDto> result = productRepository.productList(pageable);
-
-    //     result.forEach(dto -> {
-    //         System.out.println(dto.getId() + " | " + dto.getName() + " | " + dto.getPrice() + " | " + dto.getThumbnailUrl());
-    //     });
-
-    //     assertEquals(10, result.size());
-    // }
-    
-}
diff --git a/back/src/test/java/com/realive/realive/AdminSellerApprovalControllerTest.java b/back/src/test/java/com/realive/realive/AdminSellerApprovalControllerTest.java
deleted file mode 100644
index 620ce47a..00000000
--- a/back/src/test/java/com/realive/realive/AdminSellerApprovalControllerTest.java
+++ /dev/null
@@ -1,260 +0,0 @@
-package com.realive.realive;
-
-
-
-import com.fasterxml.jackson.databind.ObjectMapper;
-import com.realive.controller.admin.AdminSellerApprovalController;
-import com.realive.dto.admin.approval.PendingSellerDTO;
-import com.realive.dto.admin.approval.SellerDecisionRequestDTO;
-import com.realive.dto.seller.SellerResponseDTO;
-import com.realive.service.admin.approval.SellerApprovalService;
-import org.junit.jupiter.api.BeforeEach;
-import org.junit.jupiter.api.DisplayName;
-import org.junit.jupiter.api.Test;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
-import org.springframework.test.context.bean.override.mockito.MockitoBean;
-import org.springframework.http.MediaType;
-import org.springframework.security.test.context.support.WithMockUser;
-import org.springframework.test.web.servlet.MockMvc;
-import org.springframework.test.web.servlet.ResultActions;
-import org.springframework.test.web.servlet.setup.MockMvcBuilders;
-import org.springframework.web.context.WebApplicationContext;
-
-import java.time.LocalDateTime; // SellerResponseDTO에 approvedAt이 있다면 필요
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.List;
-import java.util.NoSuchElementException;
-
-import static org.mockito.ArgumentMatchers.any;
-import static org.mockito.ArgumentMatchers.anyLong;
-import static org.mockito.BDDMockito.given;
-import static org.mockito.Mockito.verify;
-import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.csrf; // POST 테스트 시 CSRF
-import static org.springframework.security.test.web.servlet.setup.SecurityMockMvcConfigurers.springSecurity;
-import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
-import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
-import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
-import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
-
-@WebMvcTest(AdminSellerApprovalController.class) // 테스트 대상 컨트롤러 지정
-class AdminSellerApprovalControllerTest {
-
-    @Autowired
-    private MockMvc mockMvc;
-
-    @org.springframework.test.context.bean.override.mockito.MockitoBean  // SellerApprovalService를 가짜 객체(Mock)로 대체
-    private SellerApprovalService sellerApprovalService;
-
-    @Autowired
-    private ObjectMapper objectMapper; // 객체 <-> JSON 변환
-
-    @Autowired
-    private WebApplicationContext context;
-
-    // 각 테스트 실행 전 MockMvc에 Spring Security 필터 적용
-    @BeforeEach
-    public void setup() {
-        mockMvc = MockMvcBuilders
-                .webAppContextSetup(context)
-                .apply(springSecurity()) // Spring Security 필터 적용
-                .alwaysDo(print())       // 모든 요청/응답 상세 내용 콘솔 출력
-                .build();
-    }
-
-    // --- 1. 승인 대기 목록 조회 API 테스트 ---
-    @Test
-    @DisplayName("GET /pending - 성공 (데이터 있음) - 관리자 권한")
-    @WithMockUser(roles = "ADMIN") // "ADMIN" 역할로 인증된 사용자 시뮬레이션
-    void getPendingApprovalSellers_withData_shouldReturnOk() throws Exception {
-        // given: 서비스가 반환할 가짜 데이터 준비
-        PendingSellerDTO seller1 = PendingSellerDTO.builder().id(1L).name("판매자1").email("seller1@example.com").businessNumber("111-11-11111").build();
-        PendingSellerDTO seller2 = PendingSellerDTO.builder().id(2L).name("판매자2").email("seller2@example.com").businessNumber("222-22-22222").build();
-        List<PendingSellerDTO> mockResponse = Arrays.asList(seller1, seller2);
-
-        given(sellerApprovalService.getPendingApprovalSellers()).willReturn(mockResponse);
-
-        // when: API 호출
-        ResultActions actions = mockMvc.perform(get("/api/admin/sellers/pending")
-                .contentType(MediaType.APPLICATION_JSON));
-
-        // then: 결과 검증
-        actions
-                .andExpect(status().isOk()) // 200 OK
-                .andExpect(content().contentType(MediaType.APPLICATION_JSON))
-                .andExpect(jsonPath("$.length()").value(2))
-                .andExpect(jsonPath("$[0].name").value("판매자1"));
-    }
-
-    @Test
-    @DisplayName("GET /pending - 성공 (데이터 없음) - 관리자 권한")
-    @WithMockUser(roles = "ADMIN")
-    void getPendingApprovalSellers_noData_shouldReturnNoContent() throws Exception {
-        // given
-        given(sellerApprovalService.getPendingApprovalSellers()).willReturn(Collections.emptyList());
-
-        // when
-        ResultActions actions = mockMvc.perform(get("/api/admin/sellers/pending")
-                .contentType(MediaType.APPLICATION_JSON));
-
-        // then
-        actions
-                .andExpect(status().isNoContent()); // 204 No Content
-    }
-
-    @Test
-    @DisplayName("GET /pending - 일반 사용자 접근 시 403 Forbidden")
-    @WithMockUser(roles = "USER") // "USER" 역할 (관리자 아님)
-    void getPendingApprovalSellers_asUser_shouldReturnForbidden() throws Exception {
-        // when
-        ResultActions actions = mockMvc.perform(get("/api/admin/sellers/pending")
-                .contentType(MediaType.APPLICATION_JSON));
-        // then
-        actions
-                .andExpect(status().isForbidden()); // 403 Forbidden
-    }
-
-    // --- 2. 업체 승인/거부 처리 API 테스트 ---
-    @Test
-    @DisplayName("POST /approve - 승인 성공 (최초 처리) - 관리자 권한")
-    @WithMockUser(roles = "ADMIN")
-    void processSellerDecision_approveSuccess_shouldReturnOk() throws Exception {
-        // given
-        Long sellerId = 1L;
-        SellerDecisionRequestDTO requestDto = new SellerDecisionRequestDTO();
-        requestDto.setSellerId(sellerId);
-        requestDto.setApprove(true);
-
-        SellerResponseDTO mockResponse = SellerResponseDTO.builder()
-                .name("판매자1")
-                .email("seller1@example.com")
-                .isApproved(true) // 서비스에서 isApproved=true로 설정 후 반환 가정
-                // .approvedAt(LocalDateTime.now()) // 만약 DTO에 approvedAt이 있고 서비스가 설정한다면
-                .businessNumber("111-11-11111")
-                .build();
-
-        given(sellerApprovalService.processSellerDecision(sellerId, true, 0)).willReturn(mockResponse);
-
-        // when
-        ResultActions actions = mockMvc.perform(post("/api/admin/sellers/approve")
-                .with(csrf()) // CSRF 토큰 추가 (Spring Security 사용 시 POST, PUT 등에 필요)
-                .contentType(MediaType.APPLICATION_JSON)
-                .content(objectMapper.writeValueAsString(requestDto)));
-
-        // then
-        actions
-                .andExpect(status().isOk())
-                .andExpect(jsonPath("$.isApproved").value(true))
-                .andExpect(jsonPath("$.name").value("판매자1"));
-
-        verify(sellerApprovalService).processSellerDecision(sellerId, true, 0);
-    }
-
-    @Test
-    @DisplayName("POST /approve - 거부 성공 (최초 처리, isActive=false) - 관리자 권한")
-    @WithMockUser(roles = "ADMIN")
-    void processSellerDecision_rejectSuccess_shouldReturnOk() throws Exception {
-        // given
-        Long sellerId = 2L;
-        SellerDecisionRequestDTO requestDto = new SellerDecisionRequestDTO();
-        requestDto.setSellerId(sellerId);
-        requestDto.setApprove(false); // 거부
-
-        SellerResponseDTO mockResponse = SellerResponseDTO.builder()
-                .name("판매자2")
-                .email("seller2@example.com")
-                .isApproved(false) // 서비스에서 isApproved=false로 설정 후 반환 가정
-                // .isActive(false) // 만약 DTO에 isActive가 있다면
-                .businessNumber("222-22-22222")
-                .build();
-
-        given(sellerApprovalService.processSellerDecision(sellerId, false, 0)).willReturn(mockResponse);
-
-        // when
-        ResultActions actions = mockMvc.perform(post("/api/admin/sellers/approve")
-                .with(csrf())
-                .contentType(MediaType.APPLICATION_JSON)
-                .content(objectMapper.writeValueAsString(requestDto)));
-
-        // then
-        actions
-                .andExpect(status().isOk())
-                .andExpect(jsonPath("$.isApproved").value(false));
-        // 만약 서비스에서 isActive=false로 변경하고 DTO에 반영한다면:
-        // .andExpect(jsonPath("$.isActive").value(false));
-
-        verify(sellerApprovalService).processSellerDecision(sellerId, false, 0);
-    }
-
-    @Test
-    @DisplayName("POST /approve - 이미 처리된 판매자 (approvedAt != null) - 관리자 권한")
-    @WithMockUser(roles = "ADMIN")
-    void processSellerDecision_alreadyProcessed_shouldReturnConflict() throws Exception {
-        // given
-        Long sellerId = 3L;
-        SellerDecisionRequestDTO requestDto = new SellerDecisionRequestDTO();
-        requestDto.setSellerId(sellerId);
-        requestDto.setApprove(true); // 승인 시도
-
-        String errorMessage = "이미 승인/거부 처리가 완료된 판매자(ID: " + sellerId + ")입니다. 상태를 변경할 수 없습니다.";
-        given(sellerApprovalService.processSellerDecision(sellerId, true, 0))
-                .willThrow(new IllegalStateException(errorMessage));
-
-        // when
-        ResultActions actions = mockMvc.perform(post("/api/admin/sellers/approve")
-                .with(csrf())
-                .contentType(MediaType.APPLICATION_JSON)
-                .content(objectMapper.writeValueAsString(requestDto)));
-
-        // then
-        actions
-                .andExpect(status().isConflict()) // 409 Conflict
-                .andExpect(content().string(errorMessage));
-    }
-
-    @Test
-    @DisplayName("POST /approve - 존재하지 않는 판매자 - 관리자 권한")
-    @WithMockUser(roles = "ADMIN")
-    void processSellerDecision_sellerNotFound_shouldReturnNotFound() throws Exception {
-        // given
-        Long sellerId = 99L;
-        SellerDecisionRequestDTO requestDto = new SellerDecisionRequestDTO();
-        requestDto.setSellerId(sellerId);
-        requestDto.setApprove(true);
-
-        String errorMessage = "ID가 " + sellerId + "인 판매자를 찾을 수 없습니다.";
-        given(sellerApprovalService.processSellerDecision(sellerId, true, 0))
-                .willThrow(new NoSuchElementException(errorMessage));
-
-        // when
-        ResultActions actions = mockMvc.perform(post("/api/admin/sellers/approve")
-                .with(csrf())
-                .contentType(MediaType.APPLICATION_JSON)
-                .content(objectMapper.writeValueAsString(requestDto)));
-        // then
-        actions
-                .andExpect(status().isNotFound()) // 404 Not Found
-                .andExpect(content().string(errorMessage));
-    }
-
-    @Test
-    @DisplayName("POST /approve - 일반 사용자 접근 시 403 Forbidden")
-    @WithMockUser(roles = "USER")
-    void processSellerDecision_asUser_shouldReturnForbidden() throws Exception {
-        // given
-        Long sellerId = 1L;
-        SellerDecisionRequestDTO requestDto = new SellerDecisionRequestDTO();
-        requestDto.setSellerId(sellerId);
-        requestDto.setApprove(true);
-
-        // when
-        ResultActions actions = mockMvc.perform(post("/api/admin/sellers/approve")
-                .with(csrf())
-                .contentType(MediaType.APPLICATION_JSON)
-                .content(objectMapper.writeValueAsString(requestDto)));
-        // then
-        actions
-                .andExpect(status().isForbidden()); // 403 Forbidden
-    }
-}
diff --git a/back/src/test/java/com/realive/realive/AdminSignupTest.java b/back/src/test/java/com/realive/realive/AdminSignupTest.java
deleted file mode 100644
index a0fb0710..00000000
--- a/back/src/test/java/com/realive/realive/AdminSignupTest.java
+++ /dev/null
@@ -1,29 +0,0 @@
-package com.realive.realive;
-
-import com.realive.domain.admin.Admin;
-import com.realive.repository.admin.AdminRepository;
-import org.junit.jupiter.api.Test;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.boot.test.context.SpringBootTest;
-import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
-
-@SpringBootTest
-public class AdminSignupTest {
-
-    @Autowired
-    private AdminRepository adminRepository;
-
-    @Test
-    public void insertAdmin() {
-        BCryptPasswordEncoder encoder = new BCryptPasswordEncoder();
-
-        Admin admin = new Admin();
-        admin.setEmail("admin@admin.com");
-        admin.setName("Gudo");
-        admin.setPassword(encoder.encode("admin")); // 패스워드 암호화
-
-        adminRepository.save(admin);
-
-        System.out.println("관리자 데이터 저장 완료");
-    }
-}
diff --git a/back/src/test/java/com/realive/realive/AuctionControllerTest.java b/back/src/test/java/com/realive/realive/AuctionControllerTest.java
deleted file mode 100644
index eb3c7205..00000000
--- a/back/src/test/java/com/realive/realive/AuctionControllerTest.java
+++ /dev/null
@@ -1,218 +0,0 @@
-package com.realive.realive;
-
-
-import com.fasterxml.jackson.databind.ObjectMapper;
-import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
-import com.realive.config.JpaAuditingConfig;
-// @EnableJpaAuditing이 분리된 설정 클래스
-import com.realive.controller.auction.AuctionController;
-import com.realive.dto.auction.AuctionCreateRequestDTO;
-import com.realive.dto.auction.AuctionResponseDTO;
-import com.realive.dto.auction.AdminProductDTO;
-import com.realive.repository.seller.SellerRepository;
-import com.realive.security.JwtUtil;
-import com.realive.service.admin.auction.AuctionService;
-import org.junit.jupiter.api.BeforeEach;
-import org.junit.jupiter.api.DisplayName;
-import org.junit.jupiter.api.Test;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
-import org.springframework.boot.test.mock.mockito.MockBean;
-import org.springframework.context.annotation.ComponentScan; // FilterType 사용을 위해 import
-import org.springframework.context.annotation.FilterType;   // FilterType 사용을 위해 import
-import org.springframework.context.annotation.Import;
-import org.springframework.data.domain.Page;
-import org.springframework.data.domain.PageImpl;
-import org.springframework.data.domain.PageRequest;
-import org.springframework.data.domain.Pageable;
-import org.springframework.data.domain.Sort;
-import org.springframework.http.MediaType;
-import org.springframework.security.access.AccessDeniedException;
-import org.springframework.test.context.TestPropertySource;
-import org.springframework.test.web.servlet.MockMvc;
-import org.springframework.test.web.servlet.ResultActions;
-
-// --- 기본적인 DB/JPA 자동 설정 제외를 위한 import ---
-import org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration;
-import org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration;
-import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;
-import org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration;
-
-import java.time.LocalDateTime;
-import java.util.Collections;
-import java.util.List;
-import java.util.NoSuchElementException;
-
-import static org.mockito.ArgumentMatchers.any;
-import static org.mockito.ArgumentMatchers.eq;
-import static org.mockito.BDDMockito.given;
-import static org.mockito.Mockito.times;
-import static org.mockito.Mockito.verify;
-import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
-import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
-import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
-import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
-
-@WebMvcTest(
-        controllers = AuctionController.class,
-        // @EnableJpaAuditing을 포함하는 JpaAuditingConfig 클래스를 필터로 제외
-        excludeFilters = {
-                @ComponentScan.Filter(type = FilterType.ASSIGNABLE_TYPE, classes = JpaAuditingConfig.class)
-        },
-        // 기본적인 DB 및 JPA 자동 설정은 여전히 제외하는 것이 좋음
-        excludeAutoConfiguration = {
-                DataSourceAutoConfiguration.class,
-                HibernateJpaAutoConfiguration.class,
-                JpaRepositoriesAutoConfiguration.class,
-                TransactionAutoConfiguration.class
-                // 'JpaAuditingAutoConfiguration.class'는 찾을 수 없으므로 제거
-        }
-)
-@Import(JwtUtil.class)
-@TestPropertySource(properties = {
-        "jwt.secret=YourTestSecretKeyNeedsToBeLongEnoughForHS256Algorithm",
-        "jwt.expiration=60000"
-})
-class AuctionControllerTest {
-
-    @Autowired
-    private MockMvc mockMvc;
-
-    @Autowired
-    private ObjectMapper objectMapper;
-
-    @MockBean
-    private AuctionService auctionService;
-
-    @MockBean
-    private SellerRepository sellerRepository;
-
-    private AuctionCreateRequestDTO validCreateRequest;
-    private AuctionResponseDTO auctionResponse;
-    private AdminProductDTO adminProductResponse;
-    private Long mockAuthenticatedUserId = 1L;
-
-    @BeforeEach
-    void setUp() {
-        objectMapper.registerModule(new JavaTimeModule());
-
-        adminProductResponse = AdminProductDTO.builder()
-                .id(1).productId(101).productName("테스트용 관리자 상품").auctioned(false).build();
-        auctionResponse = AuctionResponseDTO.builder()
-                .id(1).productId(101).startPrice(10000).currentPrice(10000)
-                .startTime(LocalDateTime.now().plusHours(1)).endTime(LocalDateTime.now().plusDays(7))
-                .adminProduct(adminProductResponse).build();
-        validCreateRequest = AuctionCreateRequestDTO.builder()
-                .productId(101).startPrice(10000).endTime(LocalDateTime.now().plusDays(7)).build();
-    }
-
-    @Test
-    @DisplayName("경매 등록 - 성공")
-    void registerAuction_Success() throws Exception {
-        given(auctionService.registerAuction(any(AuctionCreateRequestDTO.class), eq(mockAuthenticatedUserId)))
-                .willReturn(auctionResponse);
-        ResultActions resultActions = mockMvc.perform(post("/api/auctions")
-                .contentType(MediaType.APPLICATION_JSON)
-                .content(objectMapper.writeValueAsString(validCreateRequest)));
-        resultActions.andDo(print())
-                .andExpect(status().isCreated())
-                .andExpect(jsonPath("$.message").value("경매가 성공적으로 등록되었습니다."))
-                .andExpect(jsonPath("$.data.id").value(auctionResponse.getId()));
-        verify(auctionService, times(1)).registerAuction(any(AuctionCreateRequestDTO.class), eq(mockAuthenticatedUserId));
-    }
-
-    @Test
-    @DisplayName("경매 등록 - 실패 (유효하지 않은 요청 데이터 - @Valid)")
-    void registerAuction_Fail_InvalidRequestData() throws Exception {
-        AuctionCreateRequestDTO invalidRequest = AuctionCreateRequestDTO.builder().startPrice(-100).build();
-        mockMvc.perform(post("/api/auctions")
-                        .contentType(MediaType.APPLICATION_JSON)
-                        .content(objectMapper.writeValueAsString(invalidRequest)))
-                .andDo(print())
-                .andExpect(status().isBadRequest());
-    }
-
-    @Test
-    @DisplayName("경매 등록 - 실패 (서비스 로직 예외 - 상품 없음)")
-    void registerAuction_Fail_ProductNotFound() throws Exception {
-        String errorMessage = "테스트: 관련 리소스를 찾을 수 없음";
-        given(auctionService.registerAuction(any(AuctionCreateRequestDTO.class), eq(mockAuthenticatedUserId)))
-                .willThrow(new NoSuchElementException(errorMessage));
-        mockMvc.perform(post("/api/auctions")
-                        .contentType(MediaType.APPLICATION_JSON)
-                        .content(objectMapper.writeValueAsString(validCreateRequest)))
-                .andDo(print())
-                .andExpect(status().isNotFound())
-                .andExpect(jsonPath("$.message").value(errorMessage));
-    }
-
-    @Test
-    @DisplayName("경매 등록 - 실패 (서비스 로직 예외 - 권한 없음)")
-    void registerAuction_Fail_AccessDenied() throws Exception {
-        String errorMessage = "테스트: 접근 권한 없음";
-        given(auctionService.registerAuction(any(AuctionCreateRequestDTO.class), eq(mockAuthenticatedUserId)))
-                .willThrow(new AccessDeniedException(errorMessage));
-        mockMvc.perform(post("/api/auctions")
-                        .contentType(MediaType.APPLICATION_JSON)
-                        .content(objectMapper.writeValueAsString(validCreateRequest)))
-                .andDo(print())
-                .andExpect(status().isForbidden())
-                .andExpect(jsonPath("$.message").value(errorMessage));
-    }
-
-    @Test
-    @DisplayName("진행 중인 경매 목록 조회 - 성공 (데이터 있음)")
-    void getActiveAuctions_Success_WithData() throws Exception {
-        Pageable pageable = PageRequest.of(0, 10, Sort.by(Sort.Direction.ASC, "endTime"));
-        List<AuctionResponseDTO> auctions = Collections.singletonList(auctionResponse);
-        Page<AuctionResponseDTO> auctionPage = new PageImpl<>(auctions, pageable, 1);
-        given(auctionService.getActiveAuctions(eq(pageable), any(), any())).willReturn(auctionPage);
-        mockMvc.perform(get("/api/auctions")
-                        .param("page", "0").param("size", "10").param("sort", "endTime,asc")
-                        .accept(MediaType.APPLICATION_JSON))
-                .andDo(print())
-                .andExpect(status().isOk())
-                .andExpect(jsonPath("$.data.content[0].id").value(auctionResponse.getId()));
-    }
-
-    @Test
-    @DisplayName("진행 중인 경매 목록 조회 - 성공 (데이터 없음)")
-    void getActiveAuctions_Success_NoData() throws Exception {
-        Pageable pageable = PageRequest.of(0, 10);
-        Page<AuctionResponseDTO> emptyPage = new PageImpl<>(Collections.emptyList(), pageable, 0);
-        given(auctionService.getActiveAuctions(any(Pageable.class), any(), any())).willReturn(emptyPage);
-        mockMvc.perform(get("/api/auctions")
-                        .param("page", "0").param("size", "10")
-                        .accept(MediaType.APPLICATION_JSON))
-                .andDo(print())
-                .andExpect(status().isOk())
-                .andExpect(jsonPath("$.message").value("진행 중인 경매가 없습니다."))
-                .andExpect(jsonPath("$.data.content").isEmpty());
-    }
-
-    @Test
-    @DisplayName("경매 상세 조회 - 성공")
-    void getAuctionDetails_Success() throws Exception {
-        Integer auctionId = auctionResponse.getId();
-        given(auctionService.getAuctionDetails(eq(auctionId))).willReturn(auctionResponse);
-        mockMvc.perform(get("/api/auctions/{auctionId}", auctionId)
-                        .accept(MediaType.APPLICATION_JSON))
-                .andDo(print())
-                .andExpect(status().isOk())
-                .andExpect(jsonPath("$.data.id").value(auctionId));
-    }
-
-    @Test
-    @DisplayName("경매 상세 조회 - 실패 (존재하지 않는 경매 ID)")
-    void getAuctionDetails_Fail_NotFound() throws Exception {
-        Integer nonExistentAuctionId = 999;
-        String errorMessage = "테스트: 경매를 찾을 수 없습니다. ID: " + nonExistentAuctionId;
-        given(auctionService.getAuctionDetails(eq(nonExistentAuctionId)))
-                .willThrow(new NoSuchElementException(errorMessage));
-        mockMvc.perform(get("/api/auctions/{auctionId}", nonExistentAuctionId)
-                        .accept(MediaType.APPLICATION_JSON))
-                .andDo(print())
-                .andExpect(status().isNotFound())
-                .andExpect(jsonPath("$.message").value(errorMessage));
-    }
-}
diff --git a/back/src/test/java/com/realive/realive/RealiveApplicationTests.java b/back/src/test/java/com/realive/realive/RealiveApplicationTests.java
deleted file mode 100644
index 82c319c9..00000000
--- a/back/src/test/java/com/realive/realive/RealiveApplicationTests.java
+++ /dev/null
@@ -1,16 +0,0 @@
-package com.realive.realive;
-
-import org.junit.jupiter.api.Test;
-import org.springframework.boot.test.context.SpringBootTest;
-
-@SpringBootTest
-class RealiveApplicationTests {
-
-	@Test
-	void contextLoads() {
-	}
-
-
-
-
-}
diff --git a/back/src/test/java/com/realive/realive/StatControllerTest.java b/back/src/test/java/com/realive/realive/StatControllerTest.java
deleted file mode 100644
index 178e4213..00000000
--- a/back/src/test/java/com/realive/realive/StatControllerTest.java
+++ /dev/null
@@ -1,307 +0,0 @@
-package com.realive.realive;
-
-import com.fasterxml.jackson.databind.ObjectMapper;
-import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
-import com.realive.controller.admin.StatController;
-import com.realive.dto.common.ApiResponse;
-import com.realive.dto.logs.AdminDashboardDTO;
-import com.realive.dto.logs.CommissionLogDTO;
-import com.realive.dto.logs.PayoutLogDTO;
-import com.realive.dto.logs.PenaltyLogDTO;
-import com.realive.dto.logs.ProductLogDTO;
-import com.realive.dto.logs.SalesLogDTO;
-import com.realive.dto.logs.SalesWithCommissionDTO;
-import com.realive.dto.logs.salessum.CategorySalesSummaryDTO;
-import com.realive.dto.logs.salessum.DailySalesSummaryDTO;
-import com.realive.dto.logs.salessum.MonthlySalesLogDetailListDTO;
-import com.realive.dto.logs.salessum.MonthlySalesSummaryDTO;
-import com.realive.dto.logs.salessum.SalesLogDetailListDTO;
-import com.realive.service.admin.logs.StatService;
-
-import io.swagger.v3.oas.annotations.Operation;
-import io.swagger.v3.oas.annotations.Parameter;
-import io.swagger.v3.oas.annotations.media.Content;
-import io.swagger.v3.oas.annotations.media.Schema;
-import io.swagger.v3.oas.annotations.responses.ApiResponses;
-import io.swagger.v3.oas.annotations.tags.Tag;
-
-import org.junit.jupiter.api.BeforeEach;
-import org.junit.jupiter.api.DisplayName;
-import org.junit.jupiter.api.Test;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
-import org.springframework.boot.test.mock.mockito.MockBean;
-import org.springframework.data.jpa.mapping.JpaMetamodelMappingContext;
-import org.springframework.http.HttpStatus;
-import org.springframework.http.MediaType;
-import org.springframework.security.test.context.support.WithMockUser;
-import org.springframework.test.web.servlet.MockMvc;
-import org.springframework.test.web.servlet.ResultActions;
-import org.springframework.test.web.servlet.setup.MockMvcBuilders;
-import org.springframework.web.context.WebApplicationContext;
-
-import java.math.BigDecimal;
-import java.time.LocalDate;
-import java.time.YearMonth;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
-import static org.mockito.ArgumentMatchers.any;
-import static org.mockito.ArgumentMatchers.eq;
-import static org.mockito.BDDMockito.given;
-import static org.springframework.security.test.web.servlet.setup.SecurityMockMvcConfigurers.springSecurity;
-import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
-import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
-import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
-
-@SuppressWarnings("deprecation")
-@WebMvcTest(StatController.class)
-class StatControllerTest {
-
-    @Autowired
-    private MockMvc mockMvc;
-
-    @MockBean
-    private StatService statService;
-
-    @MockBean
-    private JpaMetamodelMappingContext jpaMetamodelMappingContext;
-
-    @Autowired
-    private ObjectMapper objectMapper;
-
-    @Autowired
-    private WebApplicationContext context;
-
-    private DailySalesSummaryDTO mockDailySummary;
-    private SalesLogDetailListDTO mockDailyDetails;
-    private MonthlySalesSummaryDTO mockMonthlySummary;
-    private MonthlySalesLogDetailListDTO mockMonthlyDetails;
-    private List<DailySalesSummaryDTO> mockDailySummariesInMonth;
-    private List<CategorySalesSummaryDTO> mockCategorySummaries;
-    private Map<String, Object> mockDashboardData;
-    private SalesLogDTO mockSalesLogDto1;
-    private CommissionLogDTO mockCommissionLogDto1;
-    private PayoutLogDTO mockPayoutLogDto1;
-    private PenaltyLogDTO mockPenaltyLogDto1;
-
-    @BeforeEach
-    public void setup() {
-        objectMapper.registerModule(new JavaTimeModule());
-        mockMvc = MockMvcBuilders
-                .webAppContextSetup(context)
-                .apply(springSecurity())
-                .alwaysDo(print())
-                .build();
-
-        LocalDate testDate = LocalDate.of(2025, 5, 28);
-        YearMonth testYearMonth = YearMonth.of(2025, 5);
-
-        mockDailySummary = DailySalesSummaryDTO.builder().date(testDate).totalSalesCount(10).totalSalesAmount(100000).totalQuantity(20).build();
-
-        mockSalesLogDto1 = SalesLogDTO.builder().id(1).orderItemId(1).productId(101).sellerId(1).customerId(1).quantity(1).unitPrice(10000).totalPrice(10000).soldAt(testDate).build();
-        SalesLogDTO mockSalesLogDto2 = SalesLogDTO.builder().id(2).orderItemId(2).productId(101).sellerId(1).customerId(2).quantity(2).unitPrice(10000).totalPrice(20000).soldAt(testDate).build();
-        mockDailyDetails = SalesLogDetailListDTO.builder().date(testDate).salesLogs(Arrays.asList(mockSalesLogDto1, mockSalesLogDto2)).build();
-
-        mockMonthlySummary = MonthlySalesSummaryDTO.builder().month(testYearMonth).totalSalesCount(50).totalSalesAmount(500000).totalQuantity(100).build();
-        mockMonthlyDetails = MonthlySalesLogDetailListDTO.builder().month(testYearMonth).salesLogs(Arrays.asList(mockSalesLogDto1, mockSalesLogDto2)).build();
-        mockDailySummariesInMonth = Arrays.asList(DailySalesSummaryDTO.builder().date(testYearMonth.atDay(1)).totalSalesCount(5).build());
-        mockCategorySummaries = Arrays.asList(new CategorySalesSummaryDTO(1L, "가구", 10L, 500000L, 0));
-
-        // Corrected: Removed 'L' from id values to match Integer type
-        mockCommissionLogDto1 = CommissionLogDTO.builder().id(1).salesLogId(1).commissionAmount(1000).commissionRate(new BigDecimal("0.1")).build();
-        mockPayoutLogDto1 = PayoutLogDTO.builder().id(1).sellerId(1).payoutAmount(8000).processedAt(testDate.atTime(10,0)).build();
-        // Corrected: Removed .userId(1) as it's not present in PenaltyLogDTO
-        mockPenaltyLogDto1 = PenaltyLogDTO.builder().id(1).reason("지연배송").points(5000).build();
-
-        ProductLogDTO productLog = ProductLogDTO.builder()
-                .salesWithCommissions(Arrays.asList(
-                        SalesWithCommissionDTO.builder()
-                                .salesLog(mockSalesLogDto1)
-                                .commissionLog(mockCommissionLogDto1)
-                                .build()
-                ))
-                .payoutLogs(Arrays.asList(mockPayoutLogDto1))
-                .build();
-        AdminDashboardDTO adminViewData = AdminDashboardDTO.builder()
-                .productLog(productLog)
-                .penaltyLogs(Arrays.asList(mockPenaltyLogDto1))
-                .pendingSellerCount(5)
-                .build();
-        mockDashboardData = new HashMap<>();
-        mockDashboardData.put("adminViewData", adminViewData);
-        mockDashboardData.put("totalProducts", 100L);
-        mockDashboardData.put("newProductsToday", 10L);
-    }
-
-    // --- 관리자 대시보드 통계 API 테스트 ---
-    @Test
-    @DisplayName("GET /dashboard - 성공 (데이터 있음) - 관리자 권한")
-    @WithMockUser(roles = "ADMIN")
-    void getDashboardStats_withData_shouldReturnOk() throws Exception {
-        LocalDate testDate = LocalDate.of(2025, 5, 28);
-        given(statService.getDashboardStats(eq(testDate))).willReturn(mockDashboardData);
-
-        ResultActions actions = mockMvc.perform(get("/api/admin/stats/dashboard")
-                .param("date", testDate.toString())
-                .contentType(MediaType.APPLICATION_JSON));
-
-        actions
-                .andExpect(status().isOk())
-                .andExpect(jsonPath("$.status").value(HttpStatus.OK.value()))
-                .andExpect(jsonPath("$.message").value("Success"))
-                .andExpect(jsonPath("$.data.totalProducts").value(100L))
-                .andExpect(jsonPath("$.data.adminViewData.pendingSellerCount").value(5))
-                .andExpect(jsonPath("$.data.adminViewData.productLog.salesWithCommissions[0].commissionLog.commissionAmount").value(mockCommissionLogDto1.getCommissionAmount()))
-                .andExpect(jsonPath("$.data.adminViewData.productLog.payoutLogs[0].payoutAmount").value(mockPayoutLogDto1.getPayoutAmount()))
-                .andExpect(jsonPath("$.data.adminViewData.penaltyLogs[0].points").value(mockPenaltyLogDto1.getPoints()));
-    }
-
-    // --- 일별 판매 요약 API 테스트 ---
-    @Test
-    @DisplayName("GET /daily-summary - 성공 (데이터 있음) - 관리자 권한")
-    @WithMockUser(roles = "ADMIN")
-    void getDailySalesSummary_withData_shouldReturnOk() throws Exception {
-        LocalDate testDate = LocalDate.of(2025, 5, 28);
-        given(statService.getDailySalesSummary(eq(testDate))).willReturn(mockDailySummary);
-
-        ResultActions actions = mockMvc.perform(get("/api/admin/stats/daily-summary").param("date", testDate.toString()));
-        actions.andExpect(status().isOk()).andExpect(jsonPath("$.data.totalSalesCount").value(mockDailySummary.getTotalSalesCount()));
-    }
-
-    // --- 일별 상세 판매 로그 API 테스트 ---
-    @Test
-    @DisplayName("GET /daily-details - 성공 (데이터 있음) - 관리자 권한")
-    @WithMockUser(roles = "ADMIN")
-    void getDailySalesLogDetails_withData_shouldReturnOk() throws Exception {
-        LocalDate testDate = LocalDate.of(2025, 5, 28);
-        given(statService.getDailySalesLogDetails(eq(testDate))).willReturn(mockDailyDetails);
-
-        ResultActions actions = mockMvc.perform(get("/api/admin/stats/daily-details").param("date", testDate.toString()));
-        actions.andExpect(status().isOk()).andExpect(jsonPath("$.data.salesLogs[0].id").value(mockDailyDetails.getSalesLogs().get(0).getId()));
-    }
-
-    // --- 월별 판매 요약 API 테스트 ---
-    @Test
-    @DisplayName("GET /monthly-summary - 성공 (데이터 있음) - 관리자 권한")
-    @WithMockUser(roles = "ADMIN")
-    void getMonthlySalesSummary_withData_shouldReturnOk() throws Exception {
-        YearMonth testYearMonth = YearMonth.of(2025, 5);
-        given(statService.getMonthlySalesSummary(eq(testYearMonth))).willReturn(mockMonthlySummary);
-
-        ResultActions actions = mockMvc.perform(get("/api/admin/stats/monthly-summary").param("yearMonth", testYearMonth.toString()));
-        actions.andExpect(status().isOk()).andExpect(jsonPath("$.data.totalSalesAmount").value(mockMonthlySummary.getTotalSalesAmount()));
-    }
-
-    // --- 월별 상세 판매 로그 API 테스트 ---
-    @Test
-    @DisplayName("GET /monthly-details - 성공 (데이터 있음) - 관리자 권한")
-    @WithMockUser(roles = "ADMIN")
-    void getMonthlySalesLogDetails_withData_shouldReturnOk() throws Exception {
-        YearMonth testYearMonth = YearMonth.of(2025, 5);
-        given(statService.getMonthlySalesLogDetails(eq(testYearMonth))).willReturn(mockMonthlyDetails);
-
-        ResultActions actions = mockMvc.perform(get("/api/admin/stats/monthly-details").param("yearMonth", testYearMonth.toString()));
-        actions.andExpect(status().isOk()).andExpect(jsonPath("$.data.salesLogs.length()").value(mockMonthlyDetails.getSalesLogs().size()));
-    }
-
-    // --- 특정 월의 일별 판매 요약 리스트 API 테스트 ---
-    @Test
-    @DisplayName("GET /daily-summaries-in-month - 성공 (데이터 있음) - 관리자 권한")
-    @WithMockUser(roles = "ADMIN")
-    void getDailySummariesInMonth_withData_shouldReturnOk() throws Exception {
-        YearMonth testYearMonth = YearMonth.of(2025, 5);
-        given(statService.getDailySummariesInMonth(eq(testYearMonth))).willReturn(mockDailySummariesInMonth);
-
-        ResultActions actions = mockMvc.perform(get("/api/admin/stats/daily-summaries-in-month").param("yearMonth", testYearMonth.toString()));
-        actions.andExpect(status().isOk()).andExpect(jsonPath("$.data.length()").value(mockDailySummariesInMonth.size()));
-    }
-
-    // --- 판매자별 일별 판매 요약 API 테스트 ---
-    @Test
-    @DisplayName("GET /seller/{sellerId}/daily-summary - 성공 (데이터 있음) - 관리자 권한")
-    @WithMockUser(roles = "ADMIN")
-    void getSellerDailySalesSummary_withData_shouldReturnOk() throws Exception {
-        Integer sellerId = 1;
-        LocalDate testDate = LocalDate.of(2025, 5, 28);
-        given(statService.getSellerDailySalesSummary(eq(sellerId), eq(testDate))).willReturn(mockDailySummary);
-
-        ResultActions actions = mockMvc.perform(get("/api/admin/stats/seller/{sellerId}/daily-summary", sellerId).param("date", testDate.toString()));
-        actions.andExpect(status().isOk()).andExpect(jsonPath("$.data.totalSalesCount").value(mockDailySummary.getTotalSalesCount()));
-    }
-
-    // --- 판매자별 월별 판매 요약 API 테스트 ---
-    @Test
-    @DisplayName("GET /seller/{sellerId}/monthly-summary - 성공 (데이터 있음) - 관리자 권한")
-    @WithMockUser(roles = "ADMIN")
-    void getSellerMonthlySalesSummary_withData_shouldReturnOk() throws Exception {
-        Integer sellerId = 1;
-        YearMonth testYearMonth = YearMonth.of(2025, 5);
-        given(statService.getSellerMonthlySalesSummary(eq(sellerId), eq(testYearMonth))).willReturn(mockMonthlySummary);
-
-        ResultActions actions = mockMvc.perform(get("/api/admin/stats/seller/{sellerId}/monthly-summary", sellerId).param("yearMonth", testYearMonth.toString()));
-        actions.andExpect(status().isOk()).andExpect(jsonPath("$.data.totalSalesAmount").value(mockMonthlySummary.getTotalSalesAmount()));
-    }
-
-    // --- 상품별 일별 판매 요약 API 테스트 ---
-    @Test
-    @DisplayName("GET /product/{productId}/daily-summary - 성공 (데이터 있음) - 관리자 권한")
-    @WithMockUser(roles = "ADMIN")
-    void getProductDailySalesSummary_withData_shouldReturnOk() throws Exception {
-        Integer productId = 101;
-        LocalDate testDate = LocalDate.of(2025, 5, 28);
-        given(statService.getProductDailySalesSummary(eq(productId), eq(testDate))).willReturn(mockDailySummary);
-
-        ResultActions actions = mockMvc.perform(get("/api/admin/stats/product/{productId}/daily-summary", productId).param("date", testDate.toString()));
-        actions.andExpect(status().isOk()).andExpect(jsonPath("$.data.totalSalesCount").value(mockDailySummary.getTotalSalesCount()));
-    }
-
-    // --- 상품별 월별 판매 요약 API 테스트 ---
-    @Test
-    @DisplayName("GET /product/{productId}/monthly-summary - 성공 (데이터 있음) - 관리자 권한")
-    @WithMockUser(roles = "ADMIN")
-    void getProductMonthlySalesSummary_withData_shouldReturnOk() throws Exception {
-        Integer productId = 101;
-        YearMonth testYearMonth = YearMonth.of(2025, 5);
-        given(statService.getProductMonthlySalesSummary(eq(productId), eq(testYearMonth))).willReturn(mockMonthlySummary);
-
-        ResultActions actions = mockMvc.perform(get("/api/admin/stats/product/{productId}/monthly-summary", productId).param("yearMonth", testYearMonth.toString()));
-        actions.andExpect(status().isOk()).andExpect(jsonPath("$.data.totalSalesAmount").value(mockMonthlySummary.getTotalSalesAmount()));
-    }
-
-
-    // --- 카테고리별 판매 요약 API 테스트 ---
-    @Test
-    @DisplayName("GET /category-summary - 성공 (데이터 있음) - 관리자 권한")
-    @WithMockUser(roles = "ADMIN")
-    void getPlatformCategorySalesSummary_withData_shouldReturnOk() throws Exception {
-        LocalDate startDate = LocalDate.of(2025, 5, 1);
-        LocalDate endDate = LocalDate.of(2025, 5, 28);
-        given(statService.getPlatformCategorySalesSummary(eq(startDate), eq(endDate))).willReturn(mockCategorySummaries);
-
-        ResultActions actions = mockMvc.perform(get("/api/admin/stats/category-summary")
-                .param("startDate", startDate.toString())
-                .param("endDate", endDate.toString()));
-        actions.andExpect(status().isOk()).andExpect(jsonPath("$.data.length()").value(mockCategorySummaries.size()));
-    }
-
-    // 데이터 없음 (204 또는 404) 및 서비스 오류 (500) 케이스는 각 엔드포인트별로 추가하면 좋습니다.
-    // 예시: getDailySalesSummary - 데이터 없음
-    @Test
-    @DisplayName("GET /daily-summary - 데이터 없음 (404 Not Found) - 관리자 권한")
-    @WithMockUser(roles = "ADMIN")
-    void getDailySalesSummary_noData_shouldReturnNotFound() throws Exception {
-        LocalDate testDate = LocalDate.of(2025, 5, 28);
-        given(statService.getDailySalesSummary(eq(testDate))).willReturn(null);
-
-        ResultActions actions = mockMvc.perform(get("/api/admin/stats/daily-summary").param("date", testDate.toString()));
-
-        actions
-                .andExpect(status().isNotFound())
-                .andExpect(jsonPath("$.status").value(HttpStatus.NOT_FOUND.value()))
-                .andExpect(jsonPath("$.message").value("해당 날짜의 판매 요약 데이터가 없습니다."));
-    }
-}
\ No newline at end of file
diff --git a/back/src/test/java/com/realive/review/ReviewRepoTests.java b/back/src/test/java/com/realive/review/ReviewRepoTests.java
deleted file mode 100644
index af992df5..00000000
--- a/back/src/test/java/com/realive/review/ReviewRepoTests.java
+++ /dev/null
@@ -1,66 +0,0 @@
-package com.realive.review;
-
-import com.querydsl.jpa.impl.JPAQueryFactory;
-import com.realive.domain.common.enums.MediaType;
-import com.realive.domain.common.enums.ProductStatus;
-import com.realive.domain.product.Product;
-import com.realive.domain.product.ProductImage;
-import com.realive.repository.review.view.ReviewViewRepository;
-import jakarta.persistence.EntityManager;
-import lombok.extern.log4j.Log4j2;
-import org.junit.jupiter.api.Test;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.boot.test.context.SpringBootTest;
-import org.springframework.test.annotation.Rollback;
-import org.springframework.transaction.annotation.Transactional;
-
-@SpringBootTest
-@Log4j2
-@Transactional
-public class ReviewRepoTests {
-
-//    @Autowired
-//    private JPAQueryFactory queryFactory;
-//
-//    @Autowired(required = false)
-//    private ReviewViewRepository reviewViewRepository;
-//
-//    @Autowired
-//    private ProductViewRepository productRepository;
-//
-//    @Autowired
-//    private EntityManager em;
-//
-//    @Test
-//    @Rollback(false)
-//    public void testInsertDummyData() {
-//
-//
-//        for (int i = 0; i < 500; i++) {
-//            Product product = Product.builder()
-//                    .name("테스트 상품 " + i)
-//                    .price(10000 * i)
-//                    .status(ProductStatus.상)  // enum 상수를 넣어야 함
-//                    .isActive(true)
-//                    .build();
-//
-//            productRepository.save(product);
-//
-//            ProductImage thumbnail = ProductImage.builder()
-//                    .product(product)
-//                    .url("http://example.com/image" + i + ".jpg")
-//                    .isThumbnail(true)
-//                    .mediaType(MediaType.IMAGE)
-//                    .build();
-//
-//            em.persist(thumbnail);
-//        }
-//
-//        em.flush();
-//        em.clear();
-//
-//
-//        }
-
-    }
-
-- 
2.47.1.windows.1

